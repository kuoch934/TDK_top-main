
TDK_top-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a114  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d8  0800a5d8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e0  0800a5e0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a5ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b20  20000090  0800a678  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb0  0800a678  00021bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021014  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb9  00000000  00000000  00041113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  000450d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  000461b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aaa  00000000  00000000  00046ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001848b  00000000  00000000  0006b991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d74f3  00000000  00000000  00083e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bc4  00000000  00000000  0015b310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a2c4 	.word	0x0800a2c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	0800a2c4 	.word	0x0800a2c4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b970 	b.w	8000dfc <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0xe2>
 8000b4a:	fab2 f382 	clz	r3, r2
 8000b4e:	b143      	cbz	r3, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	f1c3 0220 	rsb	r2, r3, #32
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	409c      	lsls	r4, r3
 8000b62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b66:	fa1f f58c 	uxth.w	r5, ip
 8000b6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6e:	0c22      	lsrs	r2, r4, #16
 8000b70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b78:	fb01 f005 	mul.w	r0, r1, r5
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d90a      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b80:	eb1c 0202 	adds.w	r2, ip, r2
 8000b84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b88:	f080 811c 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f240 8119 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000b92:	3902      	subs	r1, #2
 8000b94:	4462      	add	r2, ip
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba6:	fb00 f505 	mul.w	r5, r0, r5
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x90>
 8000bae:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x294>
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x294>
 8000bc0:	4464      	add	r4, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11e      	cbz	r6, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40dc      	lsrs	r4, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0xbc>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80ed 	beq.w	8000dbe <__udivmoddi4+0x28a>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d149      	bne.n	8000c8c <__udivmoddi4+0x158>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d302      	bcc.n	8000c02 <__udivmoddi4+0xce>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	f200 80f8 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c02:	1a84      	subs	r4, r0, r2
 8000c04:	eb65 0203 	sbc.w	r2, r5, r3
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0e2      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	e9c6 4700 	strd	r4, r7, [r6]
 8000c14:	e7df      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xe6>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f382 	clz	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8090 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c34:	fb07 2015 	mls	r0, r7, r5, r2
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3e:	fb0e f005 	mul.w	r0, lr, r5
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c46:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2b8>
 8000c56:	4645      	mov	r5, r8
 8000c58:	1a12      	subs	r2, r2, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c60:	fb07 2210 	mls	r2, r7, r0, r2
 8000c64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x14e>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x14c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2c2>
 8000c80:	4610      	mov	r0, r2
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c8a:	e79f      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c8c:	f1c1 0720 	rsb	r7, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca2:	40fd      	lsrs	r5, r7
 8000ca4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca8:	4323      	orrs	r3, r4
 8000caa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb6:	0c1c      	lsrs	r4, r3, #16
 8000cb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2b4>
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2b4>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4464      	add	r4, ip
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	b29d      	uxth	r5, r3
 8000ce8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cec:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2ac>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2ac>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d12:	fba3 9502 	umull	r9, r5, r3, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	42ac      	cmp	r4, r5
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46ae      	mov	lr, r5
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x29c>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x298>
 8000d24:	b156      	cbz	r6, 8000d3c <__udivmoddi4+0x208>
 8000d26:	ebb0 0208 	subs.w	r2, r0, r8
 8000d2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d32:	40ca      	lsrs	r2, r1
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	4317      	orrs	r7, r2
 8000d38:	e9c6 7400 	strd	r7, r4, [r6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	f1c3 0120 	rsb	r1, r3, #32
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d50:	fa25 f101 	lsr.w	r1, r5, r1
 8000d54:	409d      	lsls	r5, r3
 8000d56:	432a      	orrs	r2, r5
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d64:	fb07 1510 	mls	r5, r7, r0, r1
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d72:	428d      	cmp	r5, r1
 8000d74:	fa04 f403 	lsl.w	r4, r4, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x258>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000d84:	428d      	cmp	r5, r1
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4461      	add	r1, ip
 8000d8c:	1b49      	subs	r1, r1, r5
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d94:	fb07 1115 	mls	r1, r7, r5, r1
 8000d98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000da0:	4291      	cmp	r1, r2
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x282>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000dae:	4291      	cmp	r1, r2
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000db2:	3d02      	subs	r5, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a52      	subs	r2, r2, r1
 8000db8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0xfc>
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e6e6      	b.n	8000b96 <__udivmoddi4+0x62>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x90>
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000ddc:	4645      	mov	r5, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x282>
 8000de0:	462b      	mov	r3, r5
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x258>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dec:	3d02      	subs	r5, #2
 8000dee:	4462      	add	r2, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e70a      	b.n	8000c0c <__udivmoddi4+0xd8>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x14e>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0a5a      	lsrs	r2, r3, #9
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e12:	fba1 1202 	umull	r1, r2, r1, r2
 8000e16:	09d2      	lsrs	r2, r2, #7
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e1a:	fb01 f202 	mul.w	r2, r1, r2
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	09db      	lsrs	r3, r3, #7
 8000e30:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	441a      	add	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	00044b83 	.word	0x00044b83
 8000e54:	3b9aca00 	.word	0x3b9aca00

08000e58 <HAL_TIM_PeriodElapsedCallback>:

double angle_hz = 0.0;
double angle_ev = 0.0;
int t = 0;
int x = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM5){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d144      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>
		//shooter
		if(reset == 1)	Reset();
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>
 8000e72:	f004 f959 	bl	8005128 <_Z5Resetv>
 8000e76:	e003      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x28>
		else{
			shooter_base();
 8000e78:	f003 fea6 	bl	8004bc8 <_Z12shooter_basev>
			base_limit();
 8000e7c:	f004 fa1e 	bl	80052bc <_Z10base_limitv>
		}
		shooter();
 8000e80:	f003 fcba 	bl	80047f8 <_Z7shooterv>
		//laji car
		if(laji_cmd == 1){
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x3e>
			cmd = laji_cmd;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e007      	b.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		}
		else if(laji_cmd == 2){
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d103      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			cmd = laji_cmd;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ea4:	6013      	str	r3, [r2, #0]
		}
		if(laji_reset == 1){
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d102      	bne.n	8000eb4 <HAL_TIM_PeriodElapsedCallback+0x5c>
			laji_Reset();
 8000eae:	f000 f97f 	bl	80011b0 <_Z10laji_Resetv>
 8000eb2:	e001      	b.n	8000eb8 <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else{
			laji_control();
 8000eb4:	f000 f9a2 	bl	80011fc <_Z12laji_controlv>
		}
		t++;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ec0:	6013      	str	r3, [r2, #0]
		if(t%20 == 0){
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ec4:	6819      	ldr	r1, [r3, #0]
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ec8:	fb83 2301 	smull	r2, r3, r3, r1
 8000ecc:	10da      	asrs	r2, r3, #3
 8000ece:	17cb      	asrs	r3, r1, #31
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	1aca      	subs	r2, r1, r3
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	d109      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			t = 0;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
			x++;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000eee:	6013      	str	r3, [r2, #0]
			pub();
 8000ef0:	f002 fc4c 	bl	800378c <_Z3pubv>
		}
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40000c00 	.word	0x40000c00
 8000f00:	20000014 	.word	0x20000014
 8000f04:	200000d0 	.word	0x200000d0
 8000f08:	200000d4 	.word	0x200000d4
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	200000c0 	.word	0x200000c0
 8000f14:	66666667 	.word	0x66666667
 8000f18:	200000c4 	.word	0x200000c4

08000f1c <_Z13fliping_statei>:
laji fliping;
laji lifting;
int laji_reset = 1;
int laji_cmd, cmd, laji_ok = 1;

int fliping_state(int f_dir){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af04      	add	r7, sp, #16
 8000f22:	6078      	str	r0, [r7, #4]
 int ENA = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 if(f_dir == 1){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d127      	bne.n	8000f7e <_Z13fliping_statei+0x62>
  fliping.move(1,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <_Z13fliping_statei+0xbc>)
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	2310      	movs	r3, #16
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <_Z13fliping_statei+0xc0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <_Z13fliping_statei+0xc4>)
 8000f42:	f000 f8b3 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN)){
 8000f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <_Z13fliping_statei+0xc0>)
 8000f4c:	f005 fe54 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d035      	beq.n	8000fcc <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8000f60:	2301      	movs	r3, #1
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <_Z13fliping_statei+0xbc>)
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2310      	movs	r3, #16
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <_Z13fliping_statei+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <_Z13fliping_statei+0xc4>)
 8000f74:	f000 f89a 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e026      	b.n	8000fcc <_Z13fliping_statei+0xb0>
  }
 }
 else{ //f_dir == 0
  fliping.move(0,1, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_Z13fliping_statei+0xbc>)
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2310      	movs	r3, #16
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <_Z13fliping_statei+0xc0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <_Z13fliping_statei+0xc4>)
 8000f92:	f000 f88b 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN)){
 8000f96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <_Z13fliping_statei+0xc8>)
 8000f9c:	f005 fe2c 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00d      	beq.n	8000fcc <_Z13fliping_statei+0xb0>
   fliping.move(0,0, FLIPING_INA_PORT,FLIPING_INA_PIN,FLIPING_INB_PORT,FLIPING_INB_PIN);
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_Z13fliping_statei+0xbc>)
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2310      	movs	r3, #16
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_Z13fliping_statei+0xc0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <_Z13fliping_statei+0xc4>)
 8000fc4:	f000 f872 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENA = 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENA;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	200000c8 	.word	0x200000c8
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <_Z13lifting_statei>:
int lifting_state(int l_dir){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	6078      	str	r0, [r7, #4]
 int ENB = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 if(l_dir == 1){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d127      	bne.n	800104a <_Z13lifting_statei+0x62>
  lifting.move(1,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2308      	movs	r3, #8
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	4826      	ldr	r0, [pc, #152]	; (80010a8 <_Z13lifting_statei+0xc0>)
 800100e:	f000 f84d 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN)){
 8001012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001018:	f005 fdee 	bl	8006bf8 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d035      	beq.n	8001098 <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800102c:	2304      	movs	r3, #4
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	2308      	movs	r3, #8
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <_Z13lifting_statei+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	481a      	ldr	r0, [pc, #104]	; (80010a8 <_Z13lifting_statei+0xc0>)
 8001040:	f000 f834 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e026      	b.n	8001098 <_Z13lifting_statei+0xb0>
  }
 }
 else{ //l_dir == 0
  lifting.move(0,1, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800104a:	2304      	movs	r3, #4
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2308      	movs	r3, #8
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001058:	2201      	movs	r2, #1
 800105a:	2100      	movs	r1, #0
 800105c:	4812      	ldr	r0, [pc, #72]	; (80010a8 <_Z13lifting_statei+0xc0>)
 800105e:	f000 f825 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
  if(HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN)){
 8001062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001068:	f005 fdc6 	bl	8006bf8 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00d      	beq.n	8001098 <_Z13lifting_statei+0xb0>
   lifting.move(0,0, LIFTING_INA_PORT,LIFTING_INA_PIN,LIFTING_INB_PORT,LIFTING_INB_PIN);
 800107c:	2304      	movs	r3, #4
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_Z13lifting_statei+0xbc>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2308      	movs	r3, #8
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <_Z13lifting_statei+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <_Z13lifting_statei+0xc0>)
 8001090:	f000 f80c 	bl	80010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>
   ENB = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
  }
 }
 return ENB;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020800 	.word	0x40020800
 80010a8:	200000cc 	.word	0x200000cc

080010ac <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t>:
void laji::move(int INA, int INB, GPIO_TypeDef* GPIOxA,uint16_t GPIO_PinA, GPIO_TypeDef* GPIOxB,uint16_t GPIO_PinB){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
 if( (INA == 0 && INB == 0) || (INA == 1 && INB == 1) ){
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x1a>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x26>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10f      	bne.n	80010ec <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10c      	bne.n	80010ec <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x40>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 80010d2:	8b3b      	ldrh	r3, [r7, #24]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f005 fda5 	bl	8006c28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 80010de:	8c3b      	ldrh	r3, [r7, #32]
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	f005 fd9f 	bl	8006c28 <HAL_GPIO_WritePin>
 80010ea:	e025      	b.n	8001138 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 1 && INB == 0 ){
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10f      	bne.n	8001112 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x66>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_SET);
 80010f8:	8b3b      	ldrh	r3, [r7, #24]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f005 fd92 	bl	8006c28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_RESET);
 8001104:	8c3b      	ldrh	r3, [r7, #32]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	69f8      	ldr	r0, [r7, #28]
 800110c:	f005 fd8c 	bl	8006c28 <HAL_GPIO_WritePin>
 8001110:	e012      	b.n	8001138 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 }
 else if( INA == 0 && INB == 1 ){
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10f      	bne.n	8001138 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10c      	bne.n	8001138 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
  HAL_GPIO_WritePin(GPIOxA, GPIO_PinA, GPIO_PIN_RESET);
 800111e:	8b3b      	ldrh	r3, [r7, #24]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f005 fd7f 	bl	8006c28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOxB, GPIO_PinB, GPIO_PIN_SET);
 800112a:	8c3b      	ldrh	r3, [r7, #32]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	69f8      	ldr	r0, [r7, #28]
 8001132:	f005 fd79 	bl	8006c28 <HAL_GPIO_WritePin>
 }
}
 8001136:	e7ff      	b.n	8001138 <_ZN4laji4moveEiiP12GPIO_TypeDeftS1_t+0x8c>
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_Z18fliping_RisingEdgei>:
int fliping_RisingEdge(int current){
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 static int previous = 0;
 int temp;
    temp = current && !previous;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <_Z18fliping_RisingEdgei+0x1a>
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <_Z18fliping_RisingEdgei+0x34>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <_Z18fliping_RisingEdgei+0x1a>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <_Z18fliping_RisingEdgei+0x1c>
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
    previous = current;
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_Z18fliping_RisingEdgei+0x34>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
    return temp;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200000d8 	.word	0x200000d8

08001178 <_Z18lifting_RisingEdgei>:
int lifting_RisingEdge(int current){
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 static int previous = 0;
 int temp;
 temp = current && !previous;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <_Z18lifting_RisingEdgei+0x1a>
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <_Z18lifting_RisingEdgei+0x34>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <_Z18lifting_RisingEdgei+0x1a>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <_Z18lifting_RisingEdgei+0x1c>
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 previous = current;
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_Z18lifting_RisingEdgei+0x34>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6013      	str	r3, [r2, #0]
 return temp;
 800119c:	68fb      	ldr	r3, [r7, #12]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200000dc 	.word	0x200000dc

080011b0 <_Z10laji_Resetv>:

//if(msg->pin == 1){
// reset = 1;
//}
void laji_Reset(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if(laji_reset != 0){
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <_Z10laji_Resetv+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <_Z10laji_Resetv+0x24>
	lifting.ENA = lifting_state(0);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ff13 	bl	8000fe8 <_Z13lifting_statei>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <_Z10laji_Resetv+0x44>)
 80011c6:	6013      	str	r3, [r2, #0]
	fliping.ENA = fliping_state(0);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fea7 	bl	8000f1c <_Z13fliping_statei>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <_Z10laji_Resetv+0x48>)
 80011d2:	6013      	str	r3, [r2, #0]
	}
	if(lifting.ENA == 1 && fliping.ENA == 1){
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_Z10laji_Resetv+0x44>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <_Z10laji_Resetv+0x3a>
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_Z10laji_Resetv+0x48>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d102      	bne.n	80011ea <_Z10laji_Resetv+0x3a>
	laji_reset = 0;
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <_Z10laji_Resetv+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	}
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000
 80011f4:	200000cc 	.word	0x200000cc
 80011f8:	200000c8 	.word	0x200000c8

080011fc <_Z12laji_controlv>:
// cmd = 1;
//}
//if(msg->data == 2){
// cmd = 2;
//}
void laji_control(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
 static int a = 0;
 if(cmd == 1){
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <_Z12laji_controlv+0xe4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d113      	bne.n	8001230 <_Z12laji_controlv+0x34>
	 laji_ok = 0;
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <_Z12laji_controlv+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
	 fliping.ENA = fliping_state(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe84 	bl	8000f1c <_Z13fliping_statei>
 8001214:	4603      	mov	r3, r0
 8001216:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <_Z12laji_controlv+0xec>)
 8001218:	6013      	str	r3, [r2, #0]
  if(fliping.ENA == 1){
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <_Z12laji_controlv+0xec>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d15b      	bne.n	80012da <_Z12laji_controlv+0xde>
	 cmd = 0;
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <_Z12laji_controlv+0xe4>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
	 laji_ok = 1;
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <_Z12laji_controlv+0xe8>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
  if(a == 2 && fliping.ENA == 1){
   cmd = 0;
   laji_ok = 1;
  }
 }
}
 800122e:	e054      	b.n	80012da <_Z12laji_controlv+0xde>
 else if(cmd == 2){
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <_Z12laji_controlv+0xe4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d150      	bne.n	80012da <_Z12laji_controlv+0xde>
	 laji_ok = 0;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <_Z12laji_controlv+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
  switch( a%3 ){
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <_Z12laji_controlv+0xf0>)
 8001240:	6819      	ldr	r1, [r3, #0]
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <_Z12laji_controlv+0xf4>)
 8001244:	fb83 3201 	smull	r3, r2, r3, r1
 8001248:	17cb      	asrs	r3, r1, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	0052      	lsls	r2, r2, #1
 8001250:	441a      	add	r2, r3
 8001252:	1a8b      	subs	r3, r1, r2
 8001254:	2b02      	cmp	r3, #2
 8001256:	d012      	beq.n	800127e <_Z12laji_controlv+0x82>
 8001258:	2b02      	cmp	r3, #2
 800125a:	dc16      	bgt.n	800128a <_Z12laji_controlv+0x8e>
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <_Z12laji_controlv+0x6a>
 8001260:	2b01      	cmp	r3, #1
 8001262:	d006      	beq.n	8001272 <_Z12laji_controlv+0x76>
 8001264:	e011      	b.n	800128a <_Z12laji_controlv+0x8e>
   lifting.ENA = lifting_state(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff febe 	bl	8000fe8 <_Z13lifting_statei>
 800126c:	4603      	mov	r3, r0
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <_Z12laji_controlv+0xf8>)
 8001270:	6013      	str	r3, [r2, #0]
   lifting.ENA = lifting_state(0);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff feb8 	bl	8000fe8 <_Z13lifting_statei>
 8001278:	4603      	mov	r3, r0
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <_Z12laji_controlv+0xf8>)
 800127c:	6013      	str	r3, [r2, #0]
   fliping.ENA = fliping_state(0);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fe4c 	bl	8000f1c <_Z13fliping_statei>
 8001284:	4603      	mov	r3, r0
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <_Z12laji_controlv+0xec>)
 8001288:	6013      	str	r3, [r2, #0]
  if(fliping_RisingEdge(fliping.ENA) == 1 || lifting_RisingEdge(lifting.ENA) == 1){
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <_Z12laji_controlv+0xec>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff56 	bl	8001140 <_Z18fliping_RisingEdgei>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d007      	beq.n	80012aa <_Z12laji_controlv+0xae>
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <_Z12laji_controlv+0xf8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff6a 	bl	8001178 <_Z18lifting_RisingEdgei>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <_Z12laji_controlv+0xb2>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <_Z12laji_controlv+0xb4>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <_Z12laji_controlv+0xc2>
   a++;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_Z12laji_controlv+0xf0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <_Z12laji_controlv+0xf0>)
 80012bc:	6013      	str	r3, [r2, #0]
  if(a == 2 && fliping.ENA == 1){
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <_Z12laji_controlv+0xf0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d109      	bne.n	80012da <_Z12laji_controlv+0xde>
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_Z12laji_controlv+0xec>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <_Z12laji_controlv+0xde>
   cmd = 0;
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <_Z12laji_controlv+0xe4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
   laji_ok = 1;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <_Z12laji_controlv+0xe8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000d4 	.word	0x200000d4
 80012e4:	20000004 	.word	0x20000004
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	200000e0 	.word	0x200000e0
 80012f0:	55555556 	.word	0x55555556
 80012f4:	200000cc 	.word	0x200000cc

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f004 fbde 	bl	8005abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f818 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f000 fb60 	bl	80019c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001308:	f000 fb36 	bl	8001978 <MX_DMA_Init>
  MX_TIM1_Init();
 800130c:	f000 f880 	bl	8001410 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001310:	f000 f8d6 	bl	80014c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001314:	f000 f928 	bl	8001568 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001318:	f000 fa2e 	bl	8001778 <MX_TIM8_Init>
  MX_TIM12_Init();
 800131c:	f000 fab0 	bl	8001880 <MX_TIM12_Init>
  MX_TIM4_Init();
 8001320:	f000 f976 	bl	8001610 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001324:	f000 f9da 	bl	80016dc <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001328:	f000 fafc 	bl	8001924 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 800132c:	f000 fc04 	bl	8001b38 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x38>
	...

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2234      	movs	r2, #52	; 0x34
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f008 fe6b 	bl	800a01e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <SystemClock_Config+0xd4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <SystemClock_Config+0xd4>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <SystemClock_Config+0xd4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <SystemClock_Config+0xd8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001380:	4a22      	ldr	r2, [pc, #136]	; (800140c <SystemClock_Config+0xd8>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <SystemClock_Config+0xd8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 ff95 	bl	80072f0 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013cc:	f000 fbae 	bl	8001b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fc34 	bl	8006c5c <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013fa:	f000 fb97 	bl	8001b2c <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	; 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f008 fdfd 	bl	800a01e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_TIM1_Init+0xa8>)
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <MX_TIM1_Init+0xac>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_TIM1_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_TIM1_Init+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM1_Init+0xa8>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_TIM1_Init+0xa8>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_TIM1_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM1_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001458:	2301      	movs	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_TIM1_Init+0xa8>)
 8001484:	f006 fbaa 	bl	8007bdc <HAL_TIM_Encoder_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800148e:	f000 fb4d 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM1_Init+0xa8>)
 80014a0:	f007 fa9a 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014aa:	f000 fb3f 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000e4 	.word	0x200000e4
 80014bc:	40010000 	.word	0x40010000

080014c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f008 fda5 	bl	800a01e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014f2:	f04f 32ff 	mov.w	r2, #4294967295
 80014f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM2_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800151c:	2301      	movs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_TIM2_Init+0xa4>)
 8001530:	f006 fb54 	bl	8007bdc <HAL_TIM_Encoder_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800153a:	f000 faf7 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM2_Init+0xa4>)
 800154c:	f007 fa44 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001556:	f000 fae9 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000012c 	.word	0x2000012c

08001568 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2224      	movs	r2, #36	; 0x24
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f008 fd51 	bl	800a01e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_TIM3_Init+0xa0>)
 8001586:	4a21      	ldr	r2, [pc, #132]	; (800160c <MX_TIM3_Init+0xa4>)
 8001588:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_TIM3_Init+0xa0>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM3_Init+0xa0>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM3_Init+0xa0>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM3_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM3_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM3_Init+0xa0>)
 80015d6:	f006 fb01 	bl	8007bdc <HAL_TIM_Encoder_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f000 faa4 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM3_Init+0xa0>)
 80015f2:	f007 f9f1 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015fc:	f000 fa96 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	; 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000174 	.word	0x20000174
 800160c:	40000400 	.word	0x40000400

08001610 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <MX_TIM4_Init+0xc4>)
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <MX_TIM4_Init+0xc8>)
 8001636:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <MX_TIM4_Init+0xc4>)
 800163a:	223f      	movs	r2, #63	; 0x3f
 800163c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <MX_TIM4_Init+0xc4>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <MX_TIM4_Init+0xc4>)
 8001646:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800164a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_TIM4_Init+0xc4>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <MX_TIM4_Init+0xc4>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001658:	481e      	ldr	r0, [pc, #120]	; (80016d4 <MX_TIM4_Init+0xc4>)
 800165a:	f006 f9a7 	bl	80079ac <HAL_TIM_PWM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001664:	f000 fa62 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <MX_TIM4_Init+0xc4>)
 8001678:	f007 f9ae 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001682:	f000 fa53 	bl	8001b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001686:	2360      	movs	r3, #96	; 0x60
 8001688:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 600;
 800168a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800168e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_TIM4_Init+0xc4>)
 80016a0:	f006 fcd8 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80016aa:	f000 fa3f 	bl	8001b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2204      	movs	r2, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_TIM4_Init+0xc4>)
 80016b6:	f006 fccd 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80016c0:	f000 fa34 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <MX_TIM4_Init+0xc4>)
 80016c6:	f003 ffb3 	bl	8005630 <HAL_TIM_MspPostInit>

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001bc 	.word	0x200001bc
 80016d8:	40000800 	.word	0x40000800

080016dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MX_TIM5_Init+0x94>)
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <MX_TIM5_Init+0x98>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 63;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <MX_TIM5_Init+0x94>)
 8001700:	223f      	movs	r2, #63	; 0x3f
 8001702:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_TIM5_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <MX_TIM5_Init+0x94>)
 800170c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_TIM5_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM5_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_TIM5_Init+0x94>)
 8001720:	f006 f884 	bl	800782c <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 f9ff 	bl	8001b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4619      	mov	r1, r3
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <MX_TIM5_Init+0x94>)
 800173c:	f006 fd4c 	bl	80081d8 <HAL_TIM_ConfigClockSource>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001746:	f000 f9f1 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <MX_TIM5_Init+0x94>)
 8001758:	f007 f93e 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001762:	f000 f9e3 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000204 	.word	0x20000204
 8001774:	40000c00 	.word	0x40000c00

08001778 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b092      	sub	sp, #72	; 0x48
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fc3b 	bl	800a01e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <MX_TIM8_Init+0x100>)
 80017aa:	4a34      	ldr	r2, [pc, #208]	; (800187c <MX_TIM8_Init+0x104>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <MX_TIM8_Init+0x100>)
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <MX_TIM8_Init+0x100>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <MX_TIM8_Init+0x100>)
 80017bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <MX_TIM8_Init+0x100>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_TIM8_Init+0x100>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_TIM8_Init+0x100>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017d4:	4828      	ldr	r0, [pc, #160]	; (8001878 <MX_TIM8_Init+0x100>)
 80017d6:	f006 f8e9 	bl	80079ac <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80017e0:	f000 f9a4 	bl	8001b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f0:	4619      	mov	r1, r3
 80017f2:	4821      	ldr	r0, [pc, #132]	; (8001878 <MX_TIM8_Init+0x100>)
 80017f4:	f007 f8f0 	bl	80089d8 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80017fe:	f000 f995 	bl	8001b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 600;
 8001806:	f44f 7316 	mov.w	r3, #600	; 0x258
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	2200      	movs	r2, #0
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_TIM8_Init+0x100>)
 800182a:	f006 fc13 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001834:	f000 f97a 	bl	8001b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800184c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001850:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_TIM8_Init+0x100>)
 800185c:	f007 f938 	bl	8008ad0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8001866:	f000 f961 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM8_Init+0x100>)
 800186c:	f003 fee0 	bl	8005630 <HAL_TIM_MspPostInit>

}
 8001870:	bf00      	nop
 8001872:	3748      	adds	r7, #72	; 0x48
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000024c 	.word	0x2000024c
 800187c:	40010400 	.word	0x40010400

08001880 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001898:	4b20      	ldr	r3, [pc, #128]	; (800191c <MX_TIM12_Init+0x9c>)
 800189a:	4a21      	ldr	r2, [pc, #132]	; (8001920 <MX_TIM12_Init+0xa0>)
 800189c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <MX_TIM12_Init+0x9c>)
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_TIM12_Init+0x9c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19999;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_TIM12_Init+0x9c>)
 80018ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018b0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_TIM12_Init+0x9c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_TIM12_Init+0x9c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <MX_TIM12_Init+0x9c>)
 80018c0:	f006 f874 	bl	80079ac <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80018ca:	f000 f92f 	bl	8001b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 80018d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_TIM12_Init+0x9c>)
 80018e8:	f006 fbb4 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80018f2:	f000 f91b 	bl	8001b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2204      	movs	r2, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <MX_TIM12_Init+0x9c>)
 80018fe:	f006 fba9 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001908:	f000 f910 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MX_TIM12_Init+0x9c>)
 800190e:	f003 fe8f 	bl	8005630 <HAL_TIM_MspPostInit>

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000294 	.word	0x20000294
 8001920:	40001800 	.word	0x40001800

08001924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_USART2_UART_Init+0x50>)
 800192c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001930:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART2_UART_Init+0x4c>)
 800195c:	f007 f91e 	bl	8008b9c <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001966:	f000 f8e1 	bl	8001b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200002dc 	.word	0x200002dc
 8001974:	40004400 	.word	0x40004400

08001978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_DMA_Init+0x4c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <MX_DMA_Init+0x4c>)
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <MX_DMA_Init+0x4c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2010      	movs	r0, #16
 80019a0:	f004 f9fd 	bl	8005d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019a4:	2010      	movs	r0, #16
 80019a6:	f004 fa16 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2011      	movs	r0, #17
 80019b0:	f004 f9f5 	bl	8005d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019b4:	2011      	movs	r0, #17
 80019b6:	f004 fa0e 	bl	8005dd6 <HAL_NVIC_EnableIRQ>

}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a3f      	ldr	r2, [pc, #252]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f640 010f 	movw	r1, #2063	; 0x80f
 8001a54:	4832      	ldr	r0, [pc, #200]	; (8001b20 <MX_GPIO_Init+0x158>)
 8001a56:	f005 f8e7 	bl	8006c28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4831      	ldr	r0, [pc, #196]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001a60:	f005 f8e2 	bl	8006c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f240 3101 	movw	r1, #769	; 0x301
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a6c:	f005 f8dc 	bl	8006c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12;
 8001a70:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4826      	ldr	r0, [pc, #152]	; (8001b20 <MX_GPIO_Init+0x158>)
 8001a86:	f004 fe2f 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8001a8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481f      	ldr	r0, [pc, #124]	; (8001b20 <MX_GPIO_Init+0x158>)
 8001aa4:	f004 fe20 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4819      	ldr	r0, [pc, #100]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001ac0:	f004 fe12 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9;
 8001ac4:	f240 3301 	movw	r3, #769	; 0x301
 8001ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001ade:	f004 fe03 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	480b      	ldr	r0, [pc, #44]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001af8:	f004 fdf6 	bl	80066e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001afc:	2330      	movs	r3, #48	; 0x30
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001b10:	f004 fdea 	bl	80066e8 <HAL_GPIO_Init>

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400

08001b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <Error_Handler+0x8>
	...

08001b38 <main_function>:
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim12;

int fu,fl,lu,ll;

void main_function(){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	ros_setup();
 8001b3c:	f001 fdfa 	bl	8003734 <_Z9ros_setupv>
	stm_setup();
 8001b40:	f000 f834 	bl	8001bac <stm_setup>
	while(1){
		fl = HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN);
 8001b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b48:	4812      	ldr	r0, [pc, #72]	; (8001b94 <main_function+0x5c>)
 8001b4a:	f005 f855 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <main_function+0x60>)
 8001b54:	601a      	str	r2, [r3, #0]
		fu = HAL_GPIO_ReadPin(FLIPING_UP_LIMIT_PORT, FLIPING_UP_LIMIT_PIN);
 8001b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <main_function+0x64>)
 8001b5c:	f005 f84c 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <main_function+0x68>)
 8001b66:	601a      	str	r2, [r3, #0]
		ll = HAL_GPIO_ReadPin(LIFTING_DOWN_LIMIT_PORT, LIFTING_DOWN_LIMIT_PIN);
 8001b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <main_function+0x64>)
 8001b6e:	f005 f843 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <main_function+0x6c>)
 8001b78:	601a      	str	r2, [r3, #0]
		lu = HAL_GPIO_ReadPin(LIFTING_UP_LIMIT_PORT, LIFTING_UP_LIMIT_PIN);
 8001b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <main_function+0x64>)
 8001b80:	f005 f83a 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <main_function+0x70>)
 8001b8a:	601a      	str	r2, [r3, #0]
		ros_loop();
 8001b8c:	f001 fdf4 	bl	8003778 <_Z8ros_loopv>
		fl = HAL_GPIO_ReadPin(FLIPING_DOWN_LIMIT_PORT, FLIPING_DOWN_LIMIT_PIN);
 8001b90:	e7d8      	b.n	8001b44 <main_function+0xc>
 8001b92:	bf00      	nop
 8001b94:	40020000 	.word	0x40020000
 8001b98:	200003e4 	.word	0x200003e4
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	200003e0 	.word	0x200003e0
 8001ba4:	200003ec 	.word	0x200003ec
 8001ba8:	200003e8 	.word	0x200003e8

08001bac <stm_setup>:
	}
}

void stm_setup(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	  //PWM
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);	//PB6 -> attach servo
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4818      	ldr	r0, [pc, #96]	; (8001c14 <stm_setup+0x68>)
 8001bb4:	f005 ff4a 	bl	8007a4c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);	//PB7 -> ball_seat servo
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <stm_setup+0x68>)
 8001bbc:	f005 ff46 	bl	8007a4c <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);	//PC6 -> rail servo
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <stm_setup+0x6c>)
 8001bc4:	f005 ff42 	bl	8007a4c <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);	//PB14 -> horizontal_angle speed
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4814      	ldr	r0, [pc, #80]	; (8001c1c <stm_setup+0x70>)
 8001bcc:	f005 ff3e 	bl	8007a4c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);	//PB15 -> elevation_angle speed
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4812      	ldr	r0, [pc, #72]	; (8001c1c <stm_setup+0x70>)
 8001bd4:	f005 ff3a 	bl	8007a4c <HAL_TIM_PWM_Start>

	  //Encoder
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);	//Shooter Encoder tl1
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <stm_setup+0x74>)
 8001bdc:	f006 f8a4 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_2);	//Shooter Encoder tl2
 8001be0:	2104      	movs	r1, #4
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <stm_setup+0x74>)
 8001be4:	f006 f8a0 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);	//horizontal_angle Encoder tl1
 8001be8:	2100      	movs	r1, #0
 8001bea:	480e      	ldr	r0, [pc, #56]	; (8001c24 <stm_setup+0x78>)
 8001bec:	f006 f89c 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);	//horizontal_angle Encoder tl2
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <stm_setup+0x78>)
 8001bf4:	f006 f898 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);	//elevation_angle Encoder tl1
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <stm_setup+0x7c>)
 8001bfc:	f006 f894 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);	//elevation_angle Encoder tl2
 8001c00:	2104      	movs	r1, #4
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <stm_setup+0x7c>)
 8001c04:	f006 f890 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  //Timer Interupt
	  HAL_TIM_Base_Start_IT(&htim5); //PSC 63 , ARR 999 -> 1kHz
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <stm_setup+0x80>)
 8001c0a:	f005 fe5f 	bl	80078cc <HAL_TIM_Base_Start_IT>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200001bc 	.word	0x200001bc
 8001c18:	2000024c 	.word	0x2000024c
 8001c1c:	20000294 	.word	0x20000294
 8001c20:	200000e4 	.word	0x200000e4
 8001c24:	2000012c 	.word	0x2000012c
 8001c28:	20000174 	.word	0x20000174
 8001c2c:	20000204 	.word	0x20000204

08001c30 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <_ZN3ros3MsgC1Ev+0x1c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	0800a5a8 	.word	0x0800a5a8

08001c74 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
      data()
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffe8 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffce 	bl	8001c30 <_ZN3ros4TimeC1Ev>
    {
    }
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	0800a590 	.word	0x0800a590

08001ca4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0a19      	lsrs	r1, r3, #8
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2ca      	uxtb	r2, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0c19      	lsrs	r1, r3, #16
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	b2ca      	uxtb	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	0e19      	lsrs	r1, r3, #24
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3303      	adds	r3, #3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b2ca      	uxtb	r2, r1
 8001cf4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6899      	ldr	r1, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	b2ca      	uxtb	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a19      	lsrs	r1, r3, #8
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	b2ca      	uxtb	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	0c19      	lsrs	r1, r3, #16
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3302      	adds	r3, #2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0e19      	lsrs	r1, r3, #24
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3303      	adds	r3, #3
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3304      	adds	r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d46:	68fb      	ldr	r3, [r7, #12]
    }
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	440b      	add	r3, r1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3303      	adds	r3, #3
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	440b      	add	r3, r1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	440b      	add	r3, r1
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3302      	adds	r3, #2
 8001de4:	6839      	ldr	r1, [r7, #0]
 8001de6:	440b      	add	r3, r1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3303      	adds	r3, #3
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    }
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	0800a2dc 	.word	0x0800a2dc

08001e38 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	0800a2ec 	.word	0x0800a2ec

08001e54 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fef8 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e74:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e7a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e80:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
    {
    }
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	0800a578 	.word	0x0800a578
 8001e98:	0800a310 	.word	0x0800a310

08001e9c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8899      	ldrh	r1, [r3, #4]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3302      	adds	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe f996 	bl	8000208 <strlen>
 8001edc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fcc6 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	18d0      	adds	r0, r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4619      	mov	r1, r3
 8001f00:	f008 f8c2 	bl	800a088 <memcpy>
      offset += length_topic_name;
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe f979 	bl	8000208 <strlen>
 8001f16:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 fca9 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	18d0      	adds	r0, r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f008 f8a5 	bl	800a088 <memcpy>
      offset += length_message_type;
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4413      	add	r3, r2
 8001f44:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f95c 	bl	8000208 <strlen>
 8001f50:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fc8c 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3304      	adds	r3, #4
 8001f64:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	18d0      	adds	r0, r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4619      	mov	r1, r3
 8001f74:	f008 f888 	bl	800a088 <memcpy>
      offset += length_md5sum;
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2ca      	uxtb	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	0a19      	lsrs	r1, r3, #8
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0c19      	lsrs	r1, r3, #16
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0e19      	lsrs	r1, r3, #24
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3303      	adds	r3, #3
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
    }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08a      	sub	sp, #40	; 0x28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21b      	sxth	r3, r3
 8002002:	4313      	orrs	r3, r2
 8002004:	b21b      	sxth	r3, r3
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	3302      	adds	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	441a      	add	r2, r3
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f001 fc49 	bl	80038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3304      	adds	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e00b      	b.n	8002048 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	441a      	add	r2, r3
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3b01      	subs	r3, #1
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	440b      	add	r3, r1
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4413      	add	r3, r2
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	429a      	cmp	r2, r3
 8002052:	d3ed      	bcc.n	8002030 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4413      	add	r3, r2
 800205a:	3b01      	subs	r3, #1
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3b01      	subs	r3, #1
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	441a      	add	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	4413      	add	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	441a      	add	r2, r3
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fc16 	bl	80038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3304      	adds	r3, #4
 800208e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	e00b      	b.n	80020ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	441a      	add	r2, r3
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	3301      	adds	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3ed      	bcc.n	8002096 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	3b01      	subs	r3, #1
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	441a      	add	r2, r3
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fbe3 	bl	80038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	3304      	adds	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e00b      	b.n	8002114 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	441a      	add	r2, r3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b01      	subs	r3, #1
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	440b      	add	r3, r1
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3ed      	bcc.n	80020fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	3b01      	subs	r3, #1
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4413      	add	r3, r2
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	3b01      	subs	r3, #1
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440a      	add	r2, r1
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	3301      	adds	r3, #1
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	440b      	add	r3, r1
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	4313      	orrs	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3302      	adds	r3, #2
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440b      	add	r3, r1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	4313      	orrs	r3, r2
 8002178:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	3303      	adds	r3, #3
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	440b      	add	r3, r1
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	061b      	lsls	r3, r3, #24
 8002188:	4313      	orrs	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3304      	adds	r3, #4
 8002196:	61bb      	str	r3, [r7, #24]
     return offset;
 8002198:	69bb      	ldr	r3, [r7, #24]
    }
 800219a:	4618      	mov	r0, r3
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	0800a314 	.word	0x0800a314

080021c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0800a330 	.word	0x0800a330

080021dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fd34 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
      level(0),
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	711a      	strb	r2, [r3, #4]
      msg("")
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80021fc:	609a      	str	r2, [r3, #8]
    {
    }
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	0800a560 	.word	0x0800a560
 800220c:	0800a310 	.word	0x0800a310

08002210 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	4413      	add	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	7912      	ldrb	r2, [r2, #4]
 8002228:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fd ffe7 	bl	8000208 <strlen>
 800223a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4413      	add	r3, r2
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fb17 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	18d0      	adds	r0, r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4619      	mov	r1, r3
 800225e:	f007 ff13 	bl	800a088 <memcpy>
      offset += length_msg;
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
      return offset;
 800226a:	68fb      	ldr	r3, [r7, #12]
    }
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3301      	adds	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	441a      	add	r2, r3
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fb08 	bl	80038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3304      	adds	r3, #4
 80022aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e00b      	b.n	80022ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	441a      	add	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	440b      	add	r3, r1
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3ed      	bcc.n	80022b2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	3b01      	subs	r3, #1
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
     return offset;
 80022fa:	693b      	ldr	r3, [r7, #16]
    }
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	0800a354 	.word	0x0800a354

08002320 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	0800a368 	.word	0x0800a368

0800233c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fc84 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	0800a548 	.word	0x0800a548

08002384 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4413      	add	r3, r2
 800239c:	b2ca      	uxtb	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0a19      	lsrs	r1, r3, #8
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	b2ca      	uxtb	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c19      	lsrs	r1, r3, #16
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3302      	adds	r3, #2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0e19      	lsrs	r1, r3, #24
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	3303      	adds	r3, #3
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	b2ca      	uxtb	r2, r1
 80023d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3304      	adds	r3, #4
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	e02a      	b.n	8002438 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	0a19      	lsrs	r1, r3, #8
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	4413      	add	r3, r2
 8002408:	b2ca      	uxtb	r2, r1
 800240a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	0c19      	lsrs	r1, r3, #16
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3302      	adds	r3, #2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	b2ca      	uxtb	r2, r1
 800241a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	0e19      	lsrs	r1, r3, #24
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3303      	adds	r3, #3
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	b2ca      	uxtb	r2, r1
 800242a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3304      	adds	r3, #4
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	3301      	adds	r3, #1
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	6a3a      	ldr	r2, [r7, #32]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3cf      	bcc.n	80023e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6919      	ldr	r1, [r3, #16]
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	0a19      	lsrs	r1, r3, #8
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	0c19      	lsrs	r1, r3, #16
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3302      	adds	r3, #2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	0e19      	lsrs	r1, r3, #24
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3303      	adds	r3, #3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3304      	adds	r3, #4
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	e02a      	b.n	80024e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	b2ca      	uxtb	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	0a19      	lsrs	r1, r3, #8
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3301      	adds	r3, #1
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	b2ca      	uxtb	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0c19      	lsrs	r1, r3, #16
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3302      	adds	r3, #2
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0e19      	lsrs	r1, r3, #24
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3303      	adds	r3, #3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	b2ca      	uxtb	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3304      	adds	r3, #4
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d3cf      	bcc.n	8002492 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69d9      	ldr	r1, [r3, #28]
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	0a19      	lsrs	r1, r3, #8
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	0c19      	lsrs	r1, r3, #16
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3302      	adds	r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	0e19      	lsrs	r1, r3, #24
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3303      	adds	r3, #3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	b2ca      	uxtb	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3304      	adds	r3, #4
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e027      	b.n	8002592 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fe5a 	bl	8000208 <strlen>
 8002554:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	6979      	ldr	r1, [r7, #20]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f98a 	bl	8003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	3304      	adds	r3, #4
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	18d0      	adds	r0, r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4619      	mov	r1, r3
 8002580:	f007 fd82 	bl	800a088 <memcpy>
      offset += length_stringsi;
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4413      	add	r3, r2
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3301      	adds	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3d2      	bcc.n	8002542 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800259e:	4618      	mov	r0, r3
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08e      	sub	sp, #56	; 0x38
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3301      	adds	r3, #1
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	3302      	adds	r3, #2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	4313      	orrs	r3, r2
 80025e0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	3303      	adds	r3, #3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	3304      	adds	r3, #4
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	6a3a      	ldr	r2, [r7, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	d90a      	bls.n	800261a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f007 fcce 	bl	8009fb0 <realloc>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
 8002624:	e035      	b.n	8002692 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	440a      	add	r2, r1
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	3301      	adds	r3, #1
 800263e:	6839      	ldr	r1, [r7, #0]
 8002640:	440b      	add	r3, r1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	3302      	adds	r3, #2
 8002650:	6839      	ldr	r1, [r7, #0]
 8002652:	440b      	add	r3, r1
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002660:	3303      	adds	r3, #3
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	440b      	add	r3, r1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	3304      	adds	r3, #4
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	3208      	adds	r2, #8
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3301      	adds	r3, #1
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	429a      	cmp	r2, r3
 800269a:	d3c4      	bcc.n	8002626 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a8:	3301      	adds	r3, #1
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	3302      	adds	r3, #2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	3303      	adds	r3, #3
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80026dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026de:	3304      	adds	r3, #4
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d90a      	bls.n	8002702 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f007 fc5a 	bl	8009fb0 <realloc>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270c:	e035      	b.n	800277a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	440a      	add	r2, r1
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	3301      	adds	r3, #1
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	440b      	add	r3, r1
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	3302      	adds	r3, #2
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	440b      	add	r3, r1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	3303      	adds	r3, #3
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	440b      	add	r3, r1
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	3304      	adds	r3, #4
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	3214      	adds	r2, #20
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	3301      	adds	r3, #1
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d3c4      	bcc.n	800270e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	3301      	adds	r3, #1
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	3302      	adds	r3, #2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b4:	3303      	adds	r3, #3
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	3304      	adds	r3, #4
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d90a      	bls.n	80027ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f007 fbe6 	bl	8009fb0 <realloc>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f4:	e03e      	b.n	8002874 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	441a      	add	r2, r3
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f857 	bl	80038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	3304      	adds	r3, #4
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e00b      	b.n	800282c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	441a      	add	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	3b01      	subs	r3, #1
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	440b      	add	r3, r1
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	429a      	cmp	r2, r3
 8002836:	d3ed      	bcc.n	8002814 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	3b01      	subs	r3, #1
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	3b01      	subs	r3, #1
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	441a      	add	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	3220      	adds	r2, #32
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	3301      	adds	r3, #1
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287a:	429a      	cmp	r2, r3
 800287c:	d3bb      	bcc.n	80027f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002880:	4618      	mov	r0, r3
 8002882:	3738      	adds	r7, #56	; 0x38
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	0800a484 	.word	0x0800a484

080028a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	0800a38c 	.word	0x0800a38c

080028c0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68d8      	ldr	r0, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6891      	ldr	r1, [r2, #8]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4798      	blx	r3
 800290c:	4603      	mov	r3, r0
  };
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
  }
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002970:	461a      	mov	r2, r3
 8002972:	2300      	movs	r3, #0
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297c:	461a      	mov	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	60d3      	str	r3, [r2, #12]
    }
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	200002dc 	.word	0x200002dc

08002994 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f804 	bl	80029aa <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029be:	4619      	mov	r1, r3
 80029c0:	f006 f9e6 	bl	8008d90 <HAL_UART_Receive_DMA>
    }
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZN13STM32Hardware4readEv>:

    int read(){
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffa4 	bl	800292e <_ZN13STM32Hardware10getRdmaIndEv>
 80029e6:	4603      	mov	r3, r0
 80029e8:	429c      	cmp	r4, r3
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80029fc:	1c59      	adds	r1, r3, #1
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	791b      	ldrb	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002a12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    }
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
	...

08002a28 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d108      	bne.n	8002a50 <_ZN13STM32Hardware5flushEv+0x28>
 8002a3e:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <_ZN13STM32Hardware5flushEv+0xcc>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <_ZN13STM32Hardware5flushEv+0x28>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <_ZN13STM32Hardware5flushEv+0x2a>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d049      	beq.n	8002aea <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <_ZN13STM32Hardware5flushEv+0xcc>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d039      	beq.n	8002ae4 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d20c      	bcs.n	8002a9e <_ZN13STM32Hardware5flushEv+0x76>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	e007      	b.n	8002aae <_ZN13STM32Hardware5flushEv+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	89fa      	ldrh	r2, [r7, #14]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f006 f8e4 	bl	8008c94 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae2:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <_ZN13STM32Hardware5flushEv+0xcc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
      }
    }
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200003f0 	.word	0x200003f0

08002af8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0e:	bfa8      	it	ge
 8002b10:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002b14:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf28      	it	cs
 8002b28:	4613      	movcs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f007 faa1 	bl	800a088 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b5c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d00b      	beq.n	8002b7e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	18d1      	adds	r1, r2, r3
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f007 fa85 	bl	800a088 <memcpy>
      }

      flush();
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff52 	bl	8002a28 <_ZN13STM32Hardware5flushEv>
    }
 8002b84:	bf00      	nop
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	f002 fff8 	bl	8005b88 <HAL_GetTick>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f850 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
      x(0),
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800a504 	.word	0x0800a504

08002bf4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bf4:	b480      	push	{r7}
 8002bf6:	b08b      	sub	sp, #44	; 0x2c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c08:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c12:	6838      	ldr	r0, [r7, #0]
 8002c14:	4401      	add	r1, r0
 8002c16:	b2d3      	uxtb	r3, r2
 8002c18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	0a02      	lsrs	r2, r0, #8
 8002c28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c2c:	0a0b      	lsrs	r3, r1, #8
 8002c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c30:	3101      	adds	r1, #1
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	4401      	add	r1, r0
 8002c36:	b2d3      	uxtb	r3, r2
 8002c38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	0c02      	lsrs	r2, r0, #16
 8002c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c4c:	0c0b      	lsrs	r3, r1, #16
 8002c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c50:	3102      	adds	r1, #2
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	4401      	add	r1, r0
 8002c56:	b2d3      	uxtb	r3, r2
 8002c58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	0e02      	lsrs	r2, r0, #24
 8002c68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c6c:	0e0b      	lsrs	r3, r1, #24
 8002c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c70:	3103      	adds	r1, #3
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	4401      	add	r1, r0
 8002c76:	b2d3      	uxtb	r3, r2
 8002c78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	000a      	movs	r2, r1
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	3104      	adds	r1, #4
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	4401      	add	r1, r0
 8002c92:	b2d3      	uxtb	r3, r2
 8002c94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	0a0a      	lsrs	r2, r1, #8
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca8:	3105      	adds	r1, #5
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	4401      	add	r1, r0
 8002cae:	b2d3      	uxtb	r3, r2
 8002cb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002cb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	0c0a      	lsrs	r2, r1, #16
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc4:	3106      	adds	r1, #6
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	4401      	add	r1, r0
 8002cca:	b2d3      	uxtb	r3, r2
 8002ccc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002cce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	0e0a      	lsrs	r2, r1, #24
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce0:	3107      	adds	r1, #7
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	4401      	add	r1, r0
 8002ce6:	b2d3      	uxtb	r3, r2
 8002ce8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	3308      	adds	r3, #8
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002cfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	4401      	add	r1, r0
 8002d04:	b2d3      	uxtb	r3, r2
 8002d06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002d08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	0a02      	lsrs	r2, r0, #8
 8002d16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d1a:	0a0b      	lsrs	r3, r1, #8
 8002d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1e:	3101      	adds	r1, #1
 8002d20:	6838      	ldr	r0, [r7, #0]
 8002d22:	4401      	add	r1, r0
 8002d24:	b2d3      	uxtb	r3, r2
 8002d26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	0c02      	lsrs	r2, r0, #16
 8002d36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d3a:	0c0b      	lsrs	r3, r1, #16
 8002d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3e:	3102      	adds	r1, #2
 8002d40:	6838      	ldr	r0, [r7, #0]
 8002d42:	4401      	add	r1, r0
 8002d44:	b2d3      	uxtb	r3, r2
 8002d46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	0e02      	lsrs	r2, r0, #24
 8002d56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d5a:	0e0b      	lsrs	r3, r1, #24
 8002d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5e:	3103      	adds	r1, #3
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	4401      	add	r1, r0
 8002d64:	b2d3      	uxtb	r3, r2
 8002d66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	000a      	movs	r2, r1
 8002d76:	2300      	movs	r3, #0
 8002d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7a:	3104      	adds	r1, #4
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	4401      	add	r1, r0
 8002d80:	b2d3      	uxtb	r3, r2
 8002d82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	0a0a      	lsrs	r2, r1, #8
 8002d92:	2300      	movs	r3, #0
 8002d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d96:	3105      	adds	r1, #5
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	4401      	add	r1, r0
 8002d9c:	b2d3      	uxtb	r3, r2
 8002d9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002da0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	0c0a      	lsrs	r2, r1, #16
 8002dae:	2300      	movs	r3, #0
 8002db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db2:	3106      	adds	r1, #6
 8002db4:	6838      	ldr	r0, [r7, #0]
 8002db6:	4401      	add	r1, r0
 8002db8:	b2d3      	uxtb	r3, r2
 8002dba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002dbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	0e0a      	lsrs	r2, r1, #24
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dce:	3107      	adds	r1, #7
 8002dd0:	6838      	ldr	r0, [r7, #0]
 8002dd2:	4401      	add	r1, r0
 8002dd4:	b2d3      	uxtb	r3, r2
 8002dd6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	3308      	adds	r3, #8
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002de4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dee:	6838      	ldr	r0, [r7, #0]
 8002df0:	4401      	add	r1, r0
 8002df2:	b2d3      	uxtb	r3, r2
 8002df4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	0a02      	lsrs	r2, r0, #8
 8002e04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e08:	0a0b      	lsrs	r3, r1, #8
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	3101      	adds	r1, #1
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	4401      	add	r1, r0
 8002e12:	b2d3      	uxtb	r3, r2
 8002e14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	0c02      	lsrs	r2, r0, #16
 8002e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e28:	0c0b      	lsrs	r3, r1, #16
 8002e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2c:	3102      	adds	r1, #2
 8002e2e:	6838      	ldr	r0, [r7, #0]
 8002e30:	4401      	add	r1, r0
 8002e32:	b2d3      	uxtb	r3, r2
 8002e34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	0e02      	lsrs	r2, r0, #24
 8002e44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e48:	0e0b      	lsrs	r3, r1, #24
 8002e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4c:	3103      	adds	r1, #3
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	4401      	add	r1, r0
 8002e52:	b2d3      	uxtb	r3, r2
 8002e54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	000a      	movs	r2, r1
 8002e64:	2300      	movs	r3, #0
 8002e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e68:	3104      	adds	r1, #4
 8002e6a:	6838      	ldr	r0, [r7, #0]
 8002e6c:	4401      	add	r1, r0
 8002e6e:	b2d3      	uxtb	r3, r2
 8002e70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	0a0a      	lsrs	r2, r1, #8
 8002e80:	2300      	movs	r3, #0
 8002e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e84:	3105      	adds	r1, #5
 8002e86:	6838      	ldr	r0, [r7, #0]
 8002e88:	4401      	add	r1, r0
 8002e8a:	b2d3      	uxtb	r3, r2
 8002e8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	0c0a      	lsrs	r2, r1, #16
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea0:	3106      	adds	r1, #6
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	4401      	add	r1, r0
 8002ea6:	b2d3      	uxtb	r3, r2
 8002ea8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	0e0a      	lsrs	r2, r1, #24
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ebc:	3107      	adds	r1, #7
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	4401      	add	r1, r0
 8002ec2:	b2d3      	uxtb	r3, r2
 8002ec4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	3308      	adds	r3, #8
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ece:	4618      	mov	r0, r3
 8002ed0:	372c      	adds	r7, #44	; 0x2c
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002eda:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ede:	b0eb      	sub	sp, #428	; 0x1ac
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002ee6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002efc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f00:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2200      	movs	r2, #0
 8002f10:	461c      	mov	r4, r3
 8002f12:	4615      	mov	r5, r2
 8002f14:	ea40 0804 	orr.w	r8, r0, r4
 8002f18:	ea41 0905 	orr.w	r9, r1, r5
 8002f1c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	469a      	mov	sl, r3
 8002f38:	4693      	mov	fp, r2
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002f46:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002f4a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002f4e:	ea40 0402 	orr.w	r4, r0, r2
 8002f52:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002f56:	430b      	orrs	r3, r1
 8002f58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f5c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002f60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002f7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002f8e:	464c      	mov	r4, r9
 8002f90:	0423      	lsls	r3, r4, #16
 8002f92:	4644      	mov	r4, r8
 8002f94:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f98:	4644      	mov	r4, r8
 8002f9a:	0422      	lsls	r2, r4, #16
 8002f9c:	ea40 0402 	orr.w	r4, r0, r2
 8002fa0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002faa:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002fae:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fb2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fba:	1cda      	adds	r2, r3, #3
 8002fbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002fcc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002fd0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002fdc:	4623      	mov	r3, r4
 8002fde:	061b      	lsls	r3, r3, #24
 8002fe0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002fe4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002fe8:	4623      	mov	r3, r4
 8002fea:	4303      	orrs	r3, r0
 8002fec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ff8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002ffc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003000:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003004:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2200      	movs	r2, #0
 8003016:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800301a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800302a:	0023      	movs	r3, r4
 800302c:	2200      	movs	r2, #0
 800302e:	ea40 0402 	orr.w	r4, r0, r2
 8003032:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800303c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003040:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003044:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003048:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800304c:	1d5a      	adds	r2, r3, #5
 800304e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800305e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800306e:	0223      	lsls	r3, r4, #8
 8003070:	2200      	movs	r2, #0
 8003072:	ea40 0402 	orr.w	r4, r0, r2
 8003076:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800307a:	430b      	orrs	r3, r1
 800307c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003080:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003084:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003088:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800308c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003090:	1d9a      	adds	r2, r3, #6
 8003092:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030a2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80030b2:	0423      	lsls	r3, r4, #16
 80030b4:	2200      	movs	r2, #0
 80030b6:	ea40 0402 	orr.w	r4, r0, r2
 80030ba:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80030be:	430b      	orrs	r3, r1
 80030c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030c4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80030c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030d4:	1dda      	adds	r2, r3, #7
 80030d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80030e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80030f6:	0623      	lsls	r3, r4, #24
 80030f8:	2200      	movs	r2, #0
 80030fa:	ea40 0402 	orr.w	r4, r0, r2
 80030fe:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003102:	430b      	orrs	r3, r1
 8003104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003108:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800310c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003110:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003114:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003118:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800311c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003120:	3308      	adds	r3, #8
 8003122:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003132:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003136:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800313a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2200      	movs	r2, #0
 8003146:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800314a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800314e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003152:	4623      	mov	r3, r4
 8003154:	4303      	orrs	r3, r0
 8003156:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800315a:	462b      	mov	r3, r5
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003162:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003166:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800316a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800316e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2200      	movs	r2, #0
 8003180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003184:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003194:	464c      	mov	r4, r9
 8003196:	0223      	lsls	r3, r4, #8
 8003198:	4644      	mov	r4, r8
 800319a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800319e:	4644      	mov	r4, r8
 80031a0:	0222      	lsls	r2, r4, #8
 80031a2:	ea40 0402 	orr.w	r4, r0, r2
 80031a6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80031b0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80031b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80031e2:	464c      	mov	r4, r9
 80031e4:	0423      	lsls	r3, r4, #16
 80031e6:	4644      	mov	r4, r8
 80031e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031ec:	4644      	mov	r4, r8
 80031ee:	0422      	lsls	r2, r4, #16
 80031f0:	ea40 0402 	orr.w	r4, r0, r2
 80031f4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80031f8:	430b      	orrs	r3, r1
 80031fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031fe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003202:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003206:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800320a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800320e:	1cda      	adds	r2, r3, #3
 8003210:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003214:	4413      	add	r3, r2
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003220:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003224:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003228:	4623      	mov	r3, r4
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003230:	4623      	mov	r3, r4
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003238:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800323c:	4623      	mov	r3, r4
 800323e:	4303      	orrs	r3, r0
 8003240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003244:	462b      	mov	r3, r5
 8003246:	430b      	orrs	r3, r1
 8003248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800324c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003250:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003254:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003258:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2200      	movs	r2, #0
 800326a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800326e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800327e:	0023      	movs	r3, r4
 8003280:	2200      	movs	r2, #0
 8003282:	ea40 0402 	orr.w	r4, r0, r2
 8003286:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800328a:	430b      	orrs	r3, r1
 800328c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003290:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003294:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003298:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800329c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032a0:	1d5a      	adds	r2, r3, #5
 80032a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80032c2:	0223      	lsls	r3, r4, #8
 80032c4:	2200      	movs	r2, #0
 80032c6:	ea40 0402 	orr.w	r4, r0, r2
 80032ca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80032ce:	430b      	orrs	r3, r1
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032d4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80032d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032e4:	1d9a      	adds	r2, r3, #6
 80032e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003306:	0423      	lsls	r3, r4, #16
 8003308:	2200      	movs	r2, #0
 800330a:	ea40 0402 	orr.w	r4, r0, r2
 800330e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003312:	430b      	orrs	r3, r1
 8003314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003318:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800331c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003320:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003324:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003328:	1dda      	adds	r2, r3, #7
 800332a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800333a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800334a:	0623      	lsls	r3, r4, #24
 800334c:	2200      	movs	r2, #0
 800334e:	ea40 0402 	orr.w	r4, r0, r2
 8003352:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003356:	430b      	orrs	r3, r1
 8003358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800335c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003360:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003364:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003368:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800336c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003370:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003374:	3308      	adds	r3, #8
 8003376:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003386:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800338a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800338e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800339e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80033a6:	4623      	mov	r3, r4
 80033a8:	4303      	orrs	r3, r0
 80033aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ac:	462b      	mov	r3, r5
 80033ae:	430b      	orrs	r3, r1
 80033b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033b2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80033b6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033ba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2200      	movs	r2, #0
 80033d0:	673b      	str	r3, [r7, #112]	; 0x70
 80033d2:	677a      	str	r2, [r7, #116]	; 0x74
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033e0:	464c      	mov	r4, r9
 80033e2:	0223      	lsls	r3, r4, #8
 80033e4:	4644      	mov	r4, r8
 80033e6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033ea:	4644      	mov	r4, r8
 80033ec:	0222      	lsls	r2, r4, #8
 80033ee:	ea40 0402 	orr.w	r4, r0, r2
 80033f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80033f4:	430b      	orrs	r3, r1
 80033f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80033fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003400:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003404:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800340e:	4413      	add	r3, r2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2200      	movs	r2, #0
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
 8003418:	667a      	str	r2, [r7, #100]	; 0x64
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003426:	464c      	mov	r4, r9
 8003428:	0423      	lsls	r3, r4, #16
 800342a:	4644      	mov	r4, r8
 800342c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003430:	4644      	mov	r4, r8
 8003432:	0422      	lsls	r2, r4, #16
 8003434:	ea40 0402 	orr.w	r4, r0, r2
 8003438:	65bc      	str	r4, [r7, #88]	; 0x58
 800343a:	430b      	orrs	r3, r1
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003442:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003446:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800344a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800344e:	1cda      	adds	r2, r3, #3
 8003450:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2200      	movs	r2, #0
 800345c:	653b      	str	r3, [r7, #80]	; 0x50
 800345e:	657a      	str	r2, [r7, #84]	; 0x54
 8003460:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003464:	4623      	mov	r3, r4
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346a:	4623      	mov	r3, r4
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003470:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003474:	4623      	mov	r3, r4
 8003476:	4303      	orrs	r3, r0
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
 800347a:	462b      	mov	r3, r5
 800347c:	430b      	orrs	r3, r1
 800347e:	647b      	str	r3, [r7, #68]	; 0x44
 8003480:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003484:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003488:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800348c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003490:	1d1a      	adds	r2, r3, #4
 8003492:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80034ac:	0023      	movs	r3, r4
 80034ae:	2200      	movs	r2, #0
 80034b0:	ea40 0402 	orr.w	r4, r0, r2
 80034b4:	633c      	str	r4, [r7, #48]	; 0x30
 80034b6:	430b      	orrs	r3, r1
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034be:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034ca:	1d5a      	adds	r2, r3, #5
 80034cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034d0:	4413      	add	r3, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80034e6:	0223      	lsls	r3, r4, #8
 80034e8:	2200      	movs	r2, #0
 80034ea:	ea40 0402 	orr.w	r4, r0, r2
 80034ee:	623c      	str	r4, [r7, #32]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80034f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003500:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003504:	3306      	adds	r3, #6
 8003506:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2200      	movs	r2, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	61fa      	str	r2, [r7, #28]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	69bc      	ldr	r4, [r7, #24]
 8003520:	0423      	lsls	r3, r4, #16
 8003522:	2200      	movs	r2, #0
 8003524:	ea40 0402 	orr.w	r4, r0, r2
 8003528:	613c      	str	r4, [r7, #16]
 800352a:	430b      	orrs	r3, r1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003532:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003536:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800353a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800353e:	3307      	adds	r3, #7
 8003540:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003544:	4413      	add	r3, r2
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2200      	movs	r2, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	68bc      	ldr	r4, [r7, #8]
 800355a:	0623      	lsls	r3, r4, #24
 800355c:	2200      	movs	r2, #0
 800355e:	ea40 0402 	orr.w	r4, r0, r2
 8003562:	603c      	str	r4, [r7, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e9d7 3400 	ldrd	r3, r4, [r7]
 800356c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003570:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003574:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003578:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800357c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003580:	3308      	adds	r3, #8
 8003582:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003586:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800358a:	4618      	mov	r0, r3
 800358c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003596:	4770      	bx	lr

08003598 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	0800a3b0 	.word	0x0800a3b0

080035b4 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	0800a3c4 	.word	0x0800a3c4

080035d0 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
      data(0)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fb3a 	bl	8001c54 <_ZN3ros3MsgC1Ev>
 80035e0:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <_ZN8std_msgs4Int8C1Ev+0x28>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	711a      	strb	r2, [r3, #4]
    {
    }
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0800a4ec 	.word	0x0800a4ec

080035fc <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003610:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	7a3a      	ldrb	r2, [r7, #8]
 800361a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
      return offset;
 8003622:	68fb      	ldr	r3, [r7, #12]
    }
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003642:	7a3a      	ldrb	r2, [r7, #8]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	440b      	add	r3, r1
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	b2db      	uxtb	r3, r3
 8003650:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003652:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
     return offset;
 8003660:	68fb      	ldr	r3, [r7, #12]
    }
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	0800a3e8 	.word	0x0800a3e8

0800368c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	0800a3f8 	.word	0x0800a3f8

080036a8 <_Z14angle_callbackRKN13geometry_msgs5PointE>:
extern double target_hz, target_ev, target_length;
int flag;
std_msgs::Int8 laji;

void angle_callback(const geometry_msgs::Point &msg)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	target_hz = msg.x;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036b6:	490a      	ldr	r1, [pc, #40]	; (80036e0 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x38>)
 80036b8:	e9c1 2300 	strd	r2, r3, [r1]
	target_ev = msg.y;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x3c>)
 80036c4:	e9c1 2300 	strd	r2, r3, [r1]
	target_length = msg.z;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036ce:	4906      	ldr	r1, [pc, #24]	; (80036e8 <_Z14angle_callbackRKN13geometry_msgs5PointE+0x40>)
 80036d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20001a00 	.word	0x20001a00
 80036e4:	20001a08 	.word	0x20001a08
 80036e8:	200019c8 	.word	0x200019c8

080036ec <_Z13laji_callbackRKN8std_msgs4Int8E>:
void laji_callback(const std_msgs::Int8 &msg){
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	laji_cmd = msg.data;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <_Z13laji_callbackRKN8std_msgs4Int8E+0x20>)
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	200000d0 	.word	0x200000d0

08003710 <_Z12ori_callbackRKN8std_msgs4Int8E>:

void ori_callback(const std_msgs::Int8 &msg){
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	flag = msg.data;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <_Z12ori_callbackRKN8std_msgs4Int8E+0x20>)
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	200003f4 	.word	0x200003f4

08003734 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
ros::Publisher pub_laji("laji_ok", &laji);

void ros_setup(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
    nh.initNode();
 8003738:	480a      	ldr	r0, [pc, #40]	; (8003764 <_Z9ros_setupv+0x30>)
 800373a:	f000 f9e5 	bl	8003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub_angle);
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <_Z9ros_setupv+0x34>)
 8003740:	4808      	ldr	r0, [pc, #32]	; (8003764 <_Z9ros_setupv+0x30>)
 8003742:	f000 fa0a 	bl	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(sub_ori);
 8003746:	4909      	ldr	r1, [pc, #36]	; (800376c <_Z9ros_setupv+0x38>)
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <_Z9ros_setupv+0x30>)
 800374a:	f000 fa31 	bl	8003bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(sub_laji);
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <_Z9ros_setupv+0x3c>)
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <_Z9ros_setupv+0x30>)
 8003752:	f000 fa2d 	bl	8003bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.advertise(pub_laji);
 8003756:	4907      	ldr	r1, [pc, #28]	; (8003774 <_Z9ros_setupv+0x40>)
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <_Z9ros_setupv+0x30>)
 800375a:	f000 fa54 	bl	8003c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000400 	.word	0x20000400
 8003768:	20001940 	.word	0x20001940
 800376c:	20001978 	.word	0x20001978
 8003770:	20001994 	.word	0x20001994
 8003774:	200019b0 	.word	0x200019b0

08003778 <_Z8ros_loopv>:
void ros_loop(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
//    pub_laji.publish(&laji);
    nh.spinOnce();
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <_Z8ros_loopv+0x10>)
 800377e:	f000 fa72 	bl	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

//    interPub();
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000400 	.word	0x20000400

0800378c <_Z3pubv>:
void pub(){
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
	laji.data = laji_ok;
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <_Z3pubv+0x1c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b25a      	sxtb	r2, r3
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <_Z3pubv+0x20>)
 8003798:	711a      	strb	r2, [r3, #4]
	pub_laji.publish(&laji);
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <_Z3pubv+0x20>)
 800379c:	4804      	ldr	r0, [pc, #16]	; (80037b0 <_Z3pubv+0x24>)
 800379e:	f7ff f8a6 	bl	80028ee <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000004 	.word	0x20000004
 80037ac:	200003f8 	.word	0x200003f8
 80037b0:	200019b0 	.word	0x200019b0

080037b4 <_Z13Error_Handlerv>:

/* UART Communication */
void Error_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037b8:	b672      	cpsid	i
}
 80037ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037bc:	e7fe      	b.n	80037bc <_Z13Error_Handlerv+0x8>
	...

080037c0 <_ZL19MX_USART2_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART2_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <_ZL19MX_USART2_UART_Initv+0x58>)
 80037c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037cc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80037d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037f6:	4807      	ldr	r0, [pc, #28]	; (8003814 <_ZL19MX_USART2_UART_Initv+0x54>)
 80037f8:	f005 f9d0 	bl	8008b9c <HAL_UART_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800380c:	f7ff ffd2 	bl	80037b4 <_Z13Error_Handlerv>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200002dc 	.word	0x200002dc
 8003818:	40004400 	.word	0x40004400

0800381c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    if(huart == &huart2){
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_UART_ErrorCallback+0x30>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10b      	bne.n	8003844 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization


  HAL_UART_DeInit(&huart2);
 800382c:	4807      	ldr	r0, [pc, #28]	; (800384c <HAL_UART_ErrorCallback+0x30>)
 800382e:	f005 fa02 	bl	8008c36 <HAL_UART_DeInit>
  MX_USART2_UART_Init();
 8003832:	f7ff ffc5 	bl	80037c0 <_ZL19MX_USART2_UART_Initv>
  nh.getHardware()->init();
 8003836:	4806      	ldr	r0, [pc, #24]	; (8003850 <HAL_UART_ErrorCallback+0x34>)
 8003838:	f000 fc8d 	bl	8004156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800383c:	4603      	mov	r3, r0
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f8a8 	bl	8002994 <_ZN13STM32Hardware4initEv>
    }
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200002dc 	.word	0x200002dc
 8003850:	20000400 	.word	0x20000400

08003854 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <HAL_UART_TxCpltCallback+0x20>)
 800385e:	f000 fc7a 	bl	8004156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff f8df 	bl	8002a28 <_ZN13STM32Hardware5flushEv>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000400 	.word	0x20000400

08003878 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e00c      	b.n	80038a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	fa22 f103 	lsr.w	r1, r2, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	b2ca      	uxtb	r2, r1
 800389a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d9ef      	bls.n	8003888 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e010      	b.n	80038ee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	440a      	add	r2, r1
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	4611      	mov	r1, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d9eb      	bls.n	80038cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	0800a534 	.word	0x0800a534

08003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ffe8 	bl	8003904 <_ZN3ros15NodeHandleBase_C1Ev>
 8003934:	4a47      	ldr	r2, [pc, #284]	; (8003a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f808 	bl	8002954 <_ZN13STM32HardwareC1Ev>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8003956:	3314      	adds	r3, #20
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fcef 	bl	800233c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e00a      	b.n	800397a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3301      	adds	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b18      	cmp	r3, #24
 800397e:	d9f1      	bls.n	8003964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e009      	b.n	800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800398e:	2100      	movs	r1, #0
 8003990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	3301      	adds	r3, #1
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b18      	cmp	r3, #24
 800399e:	d9f2      	bls.n	8003986 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e00a      	b.n	80039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80039b0:	3304      	adds	r3, #4
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c2:	d3f0      	bcc.n	80039a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	e00a      	b.n	80039e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80039d4:	3304      	adds	r3, #4
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d3f0      	bcc.n	80039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a26:	461a      	mov	r2, r3
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	461a      	mov	r2, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6213      	str	r3, [r2, #32]
  }
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	0800a4d8 	.word	0x0800a4d8

08003a58 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	0800a51c 	.word	0x0800a51c

08003a78 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ffe5 	bl	8003a58 <_ZN3ros11Subscriber_C1Ev>
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3310      	adds	r3, #16
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f883 	bl	8002ba4 <_ZN13geometry_msgs5PointC1Ev>
    cb_(cb),
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
    endpoint_(endpoint)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
  };
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	0800a4c0 	.word	0x0800a4c0

08003ac0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ffc1 	bl	8003a58 <_ZN3ros11Subscriber_C1Ev>
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fd75 	bl	80035d0 <_ZN8std_msgs4Int8C1Ev>
    cb_(cb),
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]
  };
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	0800a4a8 	.word	0x0800a4a8

08003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe ff3d 	bl	8002994 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e018      	b.n	8003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	605a      	str	r2, [r3, #4]
        return true;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e006      	b.n	8003ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	dde3      	ble.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x10>
      }
    }
    return false;
 8003ba2:	2300      	movs	r3, #0
  }
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e018      	b.n	8003bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x42>
      if (subscribers[i] == 0) // empty slot
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10d      	bne.n	8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x3c>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	605a      	str	r2, [r3, #4]
        return true;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e006      	b.n	8003bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b18      	cmp	r3, #24
 8003bf6:	dde3      	ble.n	8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x10>
    return false;
 8003bf8:	2300      	movs	r3, #0
  }
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e01d      	b.n	8003c52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d111      	bne.n	8003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	60da      	str	r2, [r3, #12]
        return true;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e006      	b.n	8003c5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b18      	cmp	r3, #24
 8003c56:	ddde      	ble.n	8003c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8003c58:	2300      	movs	r3, #0
  }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe ff8a 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 8003c78:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d905      	bls.n	8003c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00e      	beq.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d906      	bls.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe ff57 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bf8c      	ite	hi
 8003cf0:	2301      	movhi	r3, #1
 8003cf2:	2300      	movls	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003cfa:	f06f 0301 	mvn.w	r3, #1
 8003cfe:	e226      	b.n	800414e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fe61 	bl	80029cc <_ZN13STM32Hardware4readEv>
 8003d0a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f2c0 81ff 	blt.w	8004112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1a:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d28:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d32:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003d36:	2b07      	cmp	r3, #7
 8003d38:	d12d      	bne.n	8003d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003d4c:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	b2d1      	uxtb	r1, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	460a      	mov	r2, r1
 8003d60:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d68:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d74:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1a0      	bne.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2308      	movs	r3, #8
 8003d90:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003d94:	e798      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d130      	bne.n	8003e06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2bff      	cmp	r3, #255	; 0xff
 8003da8:	d112      	bne.n	8003dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003db4:	3301      	adds	r3, #1
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dbc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dca:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8003dce:	e77b      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fed9 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bf8c      	ite	hi
 8003de8:	2301      	movhi	r3, #1
 8003dea:	2300      	movls	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f43f af6a 	beq.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8003e00:	f06f 0301 	mvn.w	r3, #1
 8003e04:	e1a3      	b.n	800414e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d121      	bne.n	8003e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2bfe      	cmp	r3, #254	; 0xfe
 8003e18:	d10b      	bne.n	8003e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003e24:	3301      	adds	r3, #1
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e2c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003e30:	e74a      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f af3c 	bne.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f98c 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003e56:	e737      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d120      	bne.n	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e94:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003ea6:	e70f      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d118      	bne.n	8003ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ecc:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003eda:	3301      	adds	r3, #1
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ee2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003ee6:	e6ef      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eee:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d11f      	bne.n	8003f36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f00:	425a      	negs	r2, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	bf58      	it	pl
 8003f08:	4253      	negpl	r3, r2
 8003f0a:	2bff      	cmp	r3, #255	; 0xff
 8003f0c:	d10b      	bne.n	8003f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003f18:	3301      	adds	r3, #1
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f20:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003f24:	e6d0      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003f34:	e6c8      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d119      	bne.n	8003f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f58:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f64:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003f76:	e6a7      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d123      	bne.n	8003fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	4413      	add	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f9c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2307      	movs	r3, #7
 8003faa:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f ae85 	bne.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003fcc:	e67c      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	f47f ae75 	bne.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ff6:	425a      	negs	r2, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	bf58      	it	pl
 8003ffe:	4253      	negpl	r3, r2
 8004000:	2bff      	cmp	r3, #255	; 0xff
 8004002:	f47f ae61 	bne.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8aa 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8c6 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004026:	461a      	mov	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	461a      	mov	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	e085      	b.n	800414e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004048:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800404c:	2b0a      	cmp	r3, #10
 800404e:	d108      	bne.n	8004062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f988 	bl	8004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004060:	e632      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004068:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800406c:	2b06      	cmp	r3, #6
 800406e:	d112      	bne.n	8004096 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8004076:	3314      	adds	r3, #20
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 800407e:	3204      	adds	r2, #4
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fa8f 	bl	80025a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004094:	e618      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80040a0:	2b0b      	cmp	r3, #11
 80040a2:	d106      	bne.n	80040b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80040b0:	e60a      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80040bc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80040c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f43f adfc 	beq.w	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80040da:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80040e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ee:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80040f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4790      	blx	r2
    while (true)
 8004110:	e5da      	b.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004112:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800411e:	2b00      	cmp	r3, #0
 8004120:	d014      	beq.n	800414c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004134:	4293      	cmp	r3, r2
 8004136:	d909      	bls.n	800414c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f818 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 800414c:	2300      	movs	r3, #0
  }
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
  }
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fd7a 	bl	8001c74 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f107 020c 	add.w	r2, r7, #12
 800418a:	210a      	movs	r1, #10
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe fcf9 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a2:	615a      	str	r2, [r3, #20]
  }
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80041ac:	b590      	push	{r4, r7, lr}
 80041ae:	b08b      	sub	sp, #44	; 0x2c
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fe4b 	bl	8001e54 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	e062      	b.n	800428a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d056      	beq.n	8004284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4608      	mov	r0, r1
 8004224:	4798      	blx	r3
 8004226:	4603      	mov	r3, r0
 8004228:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4608      	mov	r0, r1
 8004252:	4798      	blx	r3
 8004254:	4603      	mov	r3, r0
 8004256:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800425c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681c      	ldr	r4, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fb4f 	bl	8002916 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004278:	4601      	mov	r1, r0
 800427a:	f107 030c 	add.w	r3, r7, #12
 800427e:	461a      	mov	r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	3301      	adds	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b18      	cmp	r3, #24
 800428e:	dd99      	ble.n	80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	e05e      	b.n	8004354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800429e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d053      	beq.n	800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4608      	mov	r0, r1
 80042e8:	4798      	blx	r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4608      	mov	r0, r1
 800430e:	4798      	blx	r3
 8004310:	4603      	mov	r3, r0
 8004312:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004318:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681c      	ldr	r4, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004324:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3304      	adds	r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4608      	mov	r0, r1
 8004340:	4798      	blx	r3
 8004342:	4601      	mov	r1, r0
 8004344:	f107 030c 	add.w	r3, r7, #12
 8004348:	461a      	mov	r2, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	3301      	adds	r3, #1
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	2b18      	cmp	r3, #24
 8004358:	dd9d      	ble.n	8004296 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004366:	bf00      	nop
 8004368:	372c      	adds	r7, #44	; 0x2c
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
	...

08004370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fc78 	bl	8001c74 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fbff 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fcd6 	bl	8001d54 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4915      	ldr	r1, [pc, #84]	; (8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80043ae:	fba1 1303 	umull	r1, r3, r1, r3
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	4413      	add	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043c8:	fb00 f303 	mul.w	r3, r0, r3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	440b      	add	r3, r1
 80043d6:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80043d8:	f107 0308 	add.w	r3, r7, #8
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8bf 	bl	8004564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fbce 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	10624dd3 	.word	0x10624dd3
 8004408:	000f4240 	.word	0x000f4240

0800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b63      	cmp	r3, #99	; 0x63
 800441c:	dd0b      	ble.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004424:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004428:	f083 0301 	eor.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004432:	2300      	movs	r3, #0
 8004434:	e090      	b.n	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004442:	3304      	adds	r3, #4
 8004444:	3307      	adds	r3, #7
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4790      	blx	r2
 800444c:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004460:	22fe      	movs	r2, #254	; 0xfe
 8004462:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004470:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b29b      	uxth	r3, r3
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	b29b      	uxth	r3, r3
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448e:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 800449c:	4413      	add	r3, r2
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	b21b      	sxth	r3, r3
 80044c0:	121b      	asrs	r3, r3, #8
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80044d4:	2305      	movs	r3, #5
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e00d      	b.n	80044f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80044e4:	3304      	adds	r3, #4
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3306      	adds	r3, #6
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	ddec      	ble.n	80044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3307      	adds	r3, #7
 8004504:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	425a      	negs	r2, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	bf58      	it	pl
 8004510:	4253      	negpl	r3, r2
 8004512:	b2da      	uxtb	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1c59      	adds	r1, r3, #1
 8004518:	6179      	str	r1, [r7, #20]
 800451a:	43d2      	mvns	r2, r2
 800451c:	b2d1      	uxtb	r1, r2
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004526:	3304      	adds	r3, #4
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	dc0b      	bgt.n	800454c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1d18      	adds	r0, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800453e:	3304      	adds	r3, #4
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4619      	mov	r1, r3
 8004544:	f7fe fad8 	bl	8002af8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	e005      	b.n	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f84c 	bl	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	0800a41c 	.word	0x0800a41c

08004564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fb0a 	bl	8002b8c <_ZN13STM32Hardware4timeEv>
 8004578:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4917      	ldr	r1, [pc, #92]	; (80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004582:	fba1 1303 	umull	r1, r3, r1, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004592:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 800459c:	fba3 0302 	umull	r0, r3, r3, r2
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	1aca      	subs	r2, r1, r3
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 80045b6:	4413      	add	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045be:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	3318      	adds	r3, #24
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ce:	321c      	adds	r2, #28
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fc fc14 	bl	8000e00 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	10624dd3 	.word	0x10624dd3
 80045e4:	000f4240 	.word	0x000f4240
 80045e8:	3b9aca00 	.word	0x3b9aca00

080045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	2103      	movs	r1, #3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f804 	bl	8004608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	460b      	mov	r3, r1
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd fdde 	bl	80021dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004620:	7afb      	ldrb	r3, [r7, #11]
 8004622:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f107 0214 	add.w	r2, r7, #20
 8004632:	2107      	movs	r1, #7
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	4798      	blx	r3
  }
 8004638:	bf00      	nop
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_Z41__static_initialization_and_destruction_0ii>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d122      	bne.n	8004696 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004656:	4293      	cmp	r3, r2
 8004658:	d11d      	bne.n	8004696 <_Z41__static_initialization_and_destruction_0ii+0x56>
std_msgs::Int8 laji;
 800465a:	4811      	ldr	r0, [pc, #68]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800465c:	f7fe ffb8 	bl	80035d0 <_ZN8std_msgs4Int8C1Ev>
ros::NodeHandle nh;
 8004660:	4810      	ldr	r0, [pc, #64]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004662:	f7ff f95f 	bl	8003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Point> sub_angle("/cmd_angle", angle_callback);
 8004666:	2301      	movs	r3, #1
 8004668:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800466a:	4910      	ldr	r1, [pc, #64]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800466c:	4810      	ldr	r0, [pc, #64]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800466e:	f7ff fa03 	bl	8003a78 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_ori("/cmd_ori", ori_callback);
 8004672:	2301      	movs	r3, #1
 8004674:	4a0f      	ldr	r2, [pc, #60]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004676:	4910      	ldr	r1, [pc, #64]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004678:	4810      	ldr	r0, [pc, #64]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800467a:	f7ff fa21 	bl	8003ac0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> sub_laji("cmd_laji", laji_callback);
 800467e:	2301      	movs	r3, #1
 8004680:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004682:	4910      	ldr	r1, [pc, #64]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004684:	4810      	ldr	r0, [pc, #64]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004686:	f7ff fa1b 	bl	8003ac0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_laji("laji_ok", &laji);
 800468a:	2300      	movs	r3, #0
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800468e:	490f      	ldr	r1, [pc, #60]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004690:	480f      	ldr	r0, [pc, #60]	; (80046d0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004692:	f7fe f915 	bl	80028c0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200003f8 	.word	0x200003f8
 80046a4:	20000400 	.word	0x20000400
 80046a8:	080036a9 	.word	0x080036a9
 80046ac:	0800a458 	.word	0x0800a458
 80046b0:	20001940 	.word	0x20001940
 80046b4:	08003711 	.word	0x08003711
 80046b8:	0800a464 	.word	0x0800a464
 80046bc:	20001978 	.word	0x20001978
 80046c0:	080036ed 	.word	0x080036ed
 80046c4:	0800a470 	.word	0x0800a470
 80046c8:	20001994 	.word	0x20001994
 80046cc:	0800a47c 	.word	0x0800a47c
 80046d0:	200019b0 	.word	0x200019b0

080046d4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	330c      	adds	r3, #12
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe ffa3 	bl	8003630 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	320c      	adds	r2, #12
 80046f2:	4610      	mov	r0, r2
 80046f4:	4798      	blx	r3
  }
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
  }
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	330c      	adds	r3, #12
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe ffa4 	bl	8003670 <_ZN8std_msgs4Int87getTypeEv>
 8004728:	4603      	mov	r3, r0
  }
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	330c      	adds	r3, #12
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe ffa4 	bl	800368c <_ZN8std_msgs4Int86getMD5Ev>
 8004744:	4603      	mov	r3, r0
  }
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3310      	adds	r3, #16
 800475c:	6839      	ldr	r1, [r7, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fbbb 	bl	8002eda <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	3210      	adds	r2, #16
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
  }
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3310      	adds	r3, #16
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fefb 	bl	8003598 <_ZN13geometry_msgs5Point7getTypeEv>
 80047a2:	4603      	mov	r3, r0
  }
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3310      	adds	r3, #16
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fefb 	bl	80035b4 <_ZN13geometry_msgs5Point6getMD5Ev>
 80047be:	4603      	mov	r3, r0
  }
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
    return configured_;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_GLOBAL__sub_I_flag>:
 80047e6:	b580      	push	{r7, lr}
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047ee:	2001      	movs	r0, #1
 80047f0:	f7ff ff26 	bl	8004640 <_Z41__static_initialization_and_destruction_0ii>
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <_Z7shooterv>:
int return_value = 0;

int16_t enc_st = 0;
double angle_st = 0.0;

void shooter(){
 80047f8:	b598      	push	{r3, r4, r7, lr}
 80047fa:	af00      	add	r7, sp, #0

	//encoder -> angle
	enc_st = __HAL_TIM_GetCounter(&htim1);
 80047fc:	4ba6      	ldr	r3, [pc, #664]	; (8004a98 <_Z7shooterv+0x2a0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	b21a      	sxth	r2, r3
 8004804:	4ba5      	ldr	r3, [pc, #660]	; (8004a9c <_Z7shooterv+0x2a4>)
 8004806:	801a      	strh	r2, [r3, #0]
	angle_st += 360*((double)enc_st/(4*resolution_st*ratio_st));
 8004808:	4ba4      	ldr	r3, [pc, #656]	; (8004a9c <_Z7shooterv+0x2a4>)
 800480a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fe54 	bl	80004bc <__aeabi_i2d>
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	4ba1      	ldr	r3, [pc, #644]	; (8004aa0 <_Z7shooterv+0x2a8>)
 800481a:	f7fb ffe3 	bl	80007e4 <__aeabi_ddiv>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	4b9e      	ldr	r3, [pc, #632]	; (8004aa4 <_Z7shooterv+0x2ac>)
 800482c:	f7fb feb0 	bl	8000590 <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	4b9b      	ldr	r3, [pc, #620]	; (8004aa8 <_Z7shooterv+0x2b0>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fb fcf1 	bl	8000224 <__adddf3>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4998      	ldr	r1, [pc, #608]	; (8004aa8 <_Z7shooterv+0x2b0>)
 8004848:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim1, 0);
 800484c:	4b92      	ldr	r3, [pc, #584]	; (8004a98 <_Z7shooterv+0x2a0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2200      	movs	r2, #0
 8004852:	625a      	str	r2, [r3, #36]	; 0x24



	//transfer turns into lengths
	actual_length = (angle_st/360)*(2*M_PI*radius);
 8004854:	4b94      	ldr	r3, [pc, #592]	; (8004aa8 <_Z7shooterv+0x2b0>)
 8004856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	4b91      	ldr	r3, [pc, #580]	; (8004aa4 <_Z7shooterv+0x2ac>)
 8004860:	f7fb ffc0 	bl	80007e4 <__aeabi_ddiv>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	a388      	add	r3, pc, #544	; (adr r3, 8004a90 <_Z7shooterv+0x298>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fe8d 	bl	8000590 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	498c      	ldr	r1, [pc, #560]	; (8004aac <_Z7shooterv+0x2b4>)
 800487c:	e9c1 2300 	strd	r2, r3, [r1]

	//If got a new target
	if(target_length > 0){
 8004880:	4b8b      	ldr	r3, [pc, #556]	; (8004ab0 <_Z7shooterv+0x2b8>)
 8004882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	f7fc f90f 	bl	8000ab0 <__aeabi_dcmpgt>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d100      	bne.n	800489a <_Z7shooterv+0xa2>
					else	return_value = 0;
				}
			}
		}
	}
}
 8004898:	e17c      	b.n	8004b94 <_Z7shooterv+0x39c>
		switch(seat_mode){
 800489a:	4b86      	ldr	r3, [pc, #536]	; (8004ab4 <_Z7shooterv+0x2bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	f200 80bf 	bhi.w	8004a24 <_Z7shooterv+0x22c>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <_Z7shooterv+0xb4>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	08004957 	.word	0x08004957
 80048b4:	080049ed 	.word	0x080049ed
 80048b8:	08004a09 	.word	0x08004a09
				if(angle_seat > badminton){
 80048bc:	4b7e      	ldr	r3, [pc, #504]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80048be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	f7fc f8f1 	bl	8000ab0 <__aeabi_dcmpgt>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d031      	beq.n	8004938 <_Z7shooterv+0x140>
					angle_seat--;
 80048d4:	4b78      	ldr	r3, [pc, #480]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80048d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	4b77      	ldr	r3, [pc, #476]	; (8004abc <_Z7shooterv+0x2c4>)
 80048e0:	f7fb fc9e 	bl	8000220 <__aeabi_dsub>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4973      	ldr	r1, [pc, #460]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80048ea:	e9c1 2300 	strd	r2, r3, [r1]
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle_seat/ratio_seat);
 80048ee:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80048f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <_Z7shooterv+0x2c8>)
 80048fa:	f7fb fe49 	bl	8000590 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	4b6e      	ldr	r3, [pc, #440]	; (8004ac4 <_Z7shooterv+0x2cc>)
 800490c:	f7fb ff6a 	bl	80007e4 <__aeabi_ddiv>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <_Z7shooterv+0x2d0>)
 800491e:	f7fb fc81 	bl	8000224 <__adddf3>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4969      	ldr	r1, [pc, #420]	; (8004acc <_Z7shooterv+0x2d4>)
 8004928:	680c      	ldr	r4, [r1, #0]
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f7fc f8c9 	bl	8000ac4 <__aeabi_d2uiz>
 8004932:	4603      	mov	r3, r0
 8004934:	63a3      	str	r3, [r4, #56]	; 0x38
 8004936:	e00e      	b.n	8004956 <_Z7shooterv+0x15e>
				else if(angle_seat == badminton)	seat_ok = 1;
 8004938:	4b5f      	ldr	r3, [pc, #380]	; (8004ab8 <_Z7shooterv+0x2c0>)
 800493a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f7fc f88b 	bl	8000a60 <__aeabi_dcmpeq>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <_Z7shooterv+0x15e>
 8004950:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <_Z7shooterv+0x2d8>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]
				if(angle_seat < baseball){
 8004956:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <_Z7shooterv+0x2c0>)
 8004958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	4b5c      	ldr	r3, [pc, #368]	; (8004ad4 <_Z7shooterv+0x2dc>)
 8004962:	f7fc f887 	bl	8000a74 <__aeabi_dcmplt>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d031      	beq.n	80049d0 <_Z7shooterv+0x1d8>
					angle_seat++;
 800496c:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <_Z7shooterv+0x2c0>)
 800496e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	4b51      	ldr	r3, [pc, #324]	; (8004abc <_Z7shooterv+0x2c4>)
 8004978:	f7fb fc54 	bl	8000224 <__adddf3>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	494d      	ldr	r1, [pc, #308]	; (8004ab8 <_Z7shooterv+0x2c0>)
 8004982:	e9c1 2300 	strd	r2, r3, [r1]
					__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*angle_seat/ratio_seat);
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <_Z7shooterv+0x2c0>)
 8004988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	4b4b      	ldr	r3, [pc, #300]	; (8004ac0 <_Z7shooterv+0x2c8>)
 8004992:	f7fb fdfd 	bl	8000590 <__aeabi_dmul>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	4b48      	ldr	r3, [pc, #288]	; (8004ac4 <_Z7shooterv+0x2cc>)
 80049a4:	f7fb ff1e 	bl	80007e4 <__aeabi_ddiv>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	4b44      	ldr	r3, [pc, #272]	; (8004ac8 <_Z7shooterv+0x2d0>)
 80049b6:	f7fb fc35 	bl	8000224 <__adddf3>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4943      	ldr	r1, [pc, #268]	; (8004acc <_Z7shooterv+0x2d4>)
 80049c0:	680c      	ldr	r4, [r1, #0]
 80049c2:	4610      	mov	r0, r2
 80049c4:	4619      	mov	r1, r3
 80049c6:	f7fc f87d 	bl	8000ac4 <__aeabi_d2uiz>
 80049ca:	4603      	mov	r3, r0
 80049cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80049ce:	e00d      	b.n	80049ec <_Z7shooterv+0x1f4>
				else if(angle_seat == baseball)	seat_ok = 1;
 80049d0:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80049d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <_Z7shooterv+0x2dc>)
 80049dc:	f7fc f840 	bl	8000a60 <__aeabi_dcmpeq>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <_Z7shooterv+0x1f4>
 80049e6:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <_Z7shooterv+0x2d8>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*reload/ratio_seat);
 80049ec:	4b37      	ldr	r3, [pc, #220]	; (8004acc <_Z7shooterv+0x2d4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
				angle_seat = reload;
 80049f6:	4930      	ldr	r1, [pc, #192]	; (8004ab8 <_Z7shooterv+0x2c0>)
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <_Z7shooterv+0x2e0>)
 80049fe:	e9c1 2300 	strd	r2, r3, [r1]
				seat_ok = 1;
 8004a02:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <_Z7shooterv+0x2d8>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,600+10*reload/ratio_seat);
 8004a08:	4b30      	ldr	r3, [pc, #192]	; (8004acc <_Z7shooterv+0x2d4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
				angle_seat = reload;
 8004a12:	4929      	ldr	r1, [pc, #164]	; (8004ab8 <_Z7shooterv+0x2c0>)
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <_Z7shooterv+0x2e0>)
 8004a1a:	e9c1 2300 	strd	r2, r3, [r1]
				seat_ok = 1;
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <_Z7shooterv+0x2d8>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
		if(target_length > actual_length){
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <_Z7shooterv+0x2b8>)
 8004a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <_Z7shooterv+0x2b4>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fc f83e 	bl	8000ab0 <__aeabi_dcmpgt>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d058      	beq.n	8004aec <_Z7shooterv+0x2f4>
			if(check_hook == 0){
 8004a3a:	4b28      	ldr	r3, [pc, #160]	; (8004adc <_Z7shooterv+0x2e4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <_Z7shooterv+0x260>
				delay = 0;
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <_Z7shooterv+0x2e8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,600+10*hold); //Hook
 8004a48:	4b20      	ldr	r3, [pc, #128]	; (8004acc <_Z7shooterv+0x2d4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f240 228a 	movw	r2, #650	; 0x28a
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34
				check_hook = 1;
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <_Z7shooterv+0x2e4>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
			check_fire = 0;
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <_Z7shooterv+0x2ec>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
			if(delay <= 300) delay++;
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <_Z7shooterv+0x2e8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004a66:	dc05      	bgt.n	8004a74 <_Z7shooterv+0x27c>
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <_Z7shooterv+0x2e8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <_Z7shooterv+0x2e8>)
 8004a70:	6013      	str	r3, [r2, #0]
}
 8004a72:	e08f      	b.n	8004b94 <_Z7shooterv+0x39c>
			else if(delay > 300){
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <_Z7shooterv+0x2e8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004a7c:	f340 808a 	ble.w	8004b94 <_Z7shooterv+0x39c>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET); //Roll
 8004a80:	2201      	movs	r2, #1
 8004a82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a86:	4818      	ldr	r0, [pc, #96]	; (8004ae8 <_Z7shooterv+0x2f0>)
 8004a88:	f002 f8ce 	bl	8006c28 <HAL_GPIO_WritePin>
}
 8004a8c:	e082      	b.n	8004b94 <_Z7shooterv+0x39c>
 8004a8e:	bf00      	nop
 8004a90:	2955385e 	.word	0x2955385e
 8004a94:	404f6a7a 	.word	0x404f6a7a
 8004a98:	200000e4 	.word	0x200000e4
 8004a9c:	200019ec 	.word	0x200019ec
 8004aa0:	40af4000 	.word	0x40af4000
 8004aa4:	40768000 	.word	0x40768000
 8004aa8:	200019f0 	.word	0x200019f0
 8004aac:	200019d0 	.word	0x200019d0
 8004ab0:	200019c8 	.word	0x200019c8
 8004ab4:	20000010 	.word	0x20000010
 8004ab8:	20000008 	.word	0x20000008
 8004abc:	3ff00000 	.word	0x3ff00000
 8004ac0:	40240000 	.word	0x40240000
 8004ac4:	3ff80000 	.word	0x3ff80000
 8004ac8:	4082c000 	.word	0x4082c000
 8004acc:	200001bc 	.word	0x200001bc
 8004ad0:	200019d8 	.word	0x200019d8
 8004ad4:	40668000 	.word	0x40668000
 8004ad8:	40568000 	.word	0x40568000
 8004adc:	200019dc 	.word	0x200019dc
 8004ae0:	200019e4 	.word	0x200019e4
 8004ae4:	200019e0 	.word	0x200019e0
 8004ae8:	40020800 	.word	0x40020800
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET); //Stop
 8004aec:	2200      	movs	r2, #0
 8004aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004af2:	4829      	ldr	r0, [pc, #164]	; (8004b98 <_Z7shooterv+0x3a0>)
 8004af4:	f002 f898 	bl	8006c28 <HAL_GPIO_WritePin>
			if(ev_ok == 1 && hz_ok == 1 && seat_ok == 1){
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <_Z7shooterv+0x3a4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d149      	bne.n	8004b94 <_Z7shooterv+0x39c>
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <_Z7shooterv+0x3a8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d145      	bne.n	8004b94 <_Z7shooterv+0x39c>
 8004b08:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <_Z7shooterv+0x3ac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d141      	bne.n	8004b94 <_Z7shooterv+0x39c>
				if(check_fire == 0){
 8004b10:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <_Z7shooterv+0x3b0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <_Z7shooterv+0x344>
					delay++;
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <_Z7shooterv+0x3b4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4a23      	ldr	r2, [pc, #140]	; (8004bac <_Z7shooterv+0x3b4>)
 8004b20:	6013      	str	r3, [r2, #0]
					if(delay > 600){
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <_Z7shooterv+0x3b4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b2a:	dd07      	ble.n	8004b3c <_Z7shooterv+0x344>
						__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,600+10*fire);//Fire
 8004b2c:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <_Z7shooterv+0x3b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8004b34:	635a      	str	r2, [r3, #52]	; 0x34
						check_fire = 1;
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <_Z7shooterv+0x3b0>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
				if(check_fire == 1){
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <_Z7shooterv+0x3b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d127      	bne.n	8004b94 <_Z7shooterv+0x39c>
					check_hook = 0;
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <_Z7shooterv+0x3bc>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
					target_length = 0.0;
 8004b4a:	491b      	ldr	r1, [pc, #108]	; (8004bb8 <_Z7shooterv+0x3c0>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9c1 2300 	strd	r2, r3, [r1]
					actual_length = 0.0;
 8004b58:	4918      	ldr	r1, [pc, #96]	; (8004bbc <_Z7shooterv+0x3c4>)
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9c1 2300 	strd	r2, r3, [r1]
					angle_st = 0.0;
 8004b66:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <_Z7shooterv+0x3c8>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9c1 2300 	strd	r2, r3, [r1]
					seat_ok = 0;
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <_Z7shooterv+0x3ac>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
					if(return_value < 8 )	return_value ++;
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <_Z7shooterv+0x3cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b07      	cmp	r3, #7
 8004b80:	dc05      	bgt.n	8004b8e <_Z7shooterv+0x396>
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <_Z7shooterv+0x3cc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <_Z7shooterv+0x3cc>)
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	e002      	b.n	8004b94 <_Z7shooterv+0x39c>
					else	return_value = 0;
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <_Z7shooterv+0x3cc>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	bd98      	pop	{r3, r4, r7, pc}
 8004b98:	40020800 	.word	0x40020800
 8004b9c:	20001a14 	.word	0x20001a14
 8004ba0:	20001a10 	.word	0x20001a10
 8004ba4:	200019d8 	.word	0x200019d8
 8004ba8:	200019e0 	.word	0x200019e0
 8004bac:	200019e4 	.word	0x200019e4
 8004bb0:	200001bc 	.word	0x200001bc
 8004bb4:	200019dc 	.word	0x200019dc
 8004bb8:	200019c8 	.word	0x200019c8
 8004bbc:	200019d0 	.word	0x200019d0
 8004bc0:	200019f0 	.word	0x200019f0
 8004bc4:	200019e8 	.word	0x200019e8

08004bc8 <_Z12shooter_basev>:

//double P_ev = 0.3;
//double I_ev = 0.0;
//double D_ev = 0.007;

void shooter_base(){
 8004bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	af00      	add	r7, sp, #0

//horizontal angle
	enc_hz = __HAL_TIM_GetCounter(&htim2);
 8004bce:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <_Z12shooter_basev+0x218>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	b21a      	sxth	r2, r3
 8004bd6:	4b83      	ldr	r3, [pc, #524]	; (8004de4 <_Z12shooter_basev+0x21c>)
 8004bd8:	801a      	strh	r2, [r3, #0]
	angle_hz += 360*((double)enc_hz/(4*resolution_hz*ratio_hz))*2;	//PV
 8004bda:	4b82      	ldr	r3, [pc, #520]	; (8004de4 <_Z12shooter_basev+0x21c>)
 8004bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fb fc6b 	bl	80004bc <__aeabi_i2d>
 8004be6:	a372      	add	r3, pc, #456	; (adr r3, 8004db0 <_Z12shooter_basev+0x1e8>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fdfa 	bl	80007e4 <__aeabi_ddiv>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	4b7a      	ldr	r3, [pc, #488]	; (8004de8 <_Z12shooter_basev+0x220>)
 8004bfe:	f7fb fcc7 	bl	8000590 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	f7fb fb09 	bl	8000224 <__adddf3>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4b74      	ldr	r3, [pc, #464]	; (8004dec <_Z12shooter_basev+0x224>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fb00 	bl	8000224 <__adddf3>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4970      	ldr	r1, [pc, #448]	; (8004dec <_Z12shooter_basev+0x224>)
 8004c2a:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim2, 0);
 8004c2e:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <_Z12shooter_basev+0x218>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

	//et
	et_hz = target_hz - angle_hz;
 8004c36:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <_Z12shooter_basev+0x228>)
 8004c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <_Z12shooter_basev+0x224>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb faed 	bl	8000220 <__aeabi_dsub>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	496a      	ldr	r1, [pc, #424]	; (8004df4 <_Z12shooter_basev+0x22c>)
 8004c4c:	e9c1 2300 	strd	r2, r3, [r1]
	sigma_et_hz += et_hz;
 8004c50:	4b69      	ldr	r3, [pc, #420]	; (8004df8 <_Z12shooter_basev+0x230>)
 8004c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c56:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <_Z12shooter_basev+0x22c>)
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f7fb fae2 	bl	8000224 <__adddf3>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4964      	ldr	r1, [pc, #400]	; (8004df8 <_Z12shooter_basev+0x230>)
 8004c66:	e9c1 2300 	strd	r2, r3, [r1]

	//ut -> pulse
	ut_hz = P_hz*et_hz + I_hz*sigma_et_hz*span_hz + D_hz*(et_hz-last_et_hz)/span_hz;	//PID Control
 8004c6a:	4b62      	ldr	r3, [pc, #392]	; (8004df4 <_Z12shooter_basev+0x22c>)
 8004c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <_Z12shooter_basev+0x234>)
 8004c76:	f7fb fc8b 	bl	8000590 <__aeabi_dmul>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4692      	mov	sl, r2
 8004c80:	469b      	mov	fp, r3
 8004c82:	4b5d      	ldr	r3, [pc, #372]	; (8004df8 <_Z12shooter_basev+0x230>)
 8004c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c88:	a34b      	add	r3, pc, #300	; (adr r3, 8004db8 <_Z12shooter_basev+0x1f0>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb fc7f 	bl	8000590 <__aeabi_dmul>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4610      	mov	r0, r2
 8004c98:	4619      	mov	r1, r3
 8004c9a:	a349      	add	r3, pc, #292	; (adr r3, 8004dc0 <_Z12shooter_basev+0x1f8>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f7fb fc76 	bl	8000590 <__aeabi_dmul>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4650      	mov	r0, sl
 8004caa:	4659      	mov	r1, fp
 8004cac:	f7fb faba 	bl	8000224 <__adddf3>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4692      	mov	sl, r2
 8004cb6:	469b      	mov	fp, r3
 8004cb8:	4b4e      	ldr	r3, [pc, #312]	; (8004df4 <_Z12shooter_basev+0x22c>)
 8004cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cbe:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <_Z12shooter_basev+0x238>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb faac 	bl	8000220 <__aeabi_dsub>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	a33d      	add	r3, pc, #244	; (adr r3, 8004dc8 <_Z12shooter_basev+0x200>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f7fb fc5b 	bl	8000590 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	a337      	add	r3, pc, #220	; (adr r3, 8004dc0 <_Z12shooter_basev+0x1f8>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb fd7c 	bl	80007e4 <__aeabi_ddiv>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	f7fb fa96 	bl	8000224 <__adddf3>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4941      	ldr	r1, [pc, #260]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004cfe:	e9c1 2300 	strd	r2, r3, [r1]
	if(ut_hz > 0.2) ut_hz = 0.2;
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d08:	a331      	add	r3, pc, #196	; (adr r3, 8004dd0 <_Z12shooter_basev+0x208>)
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f7fb fecf 	bl	8000ab0 <__aeabi_dcmpgt>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <_Z12shooter_basev+0x15e>
 8004d18:	493a      	ldr	r1, [pc, #232]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d1a:	a32d      	add	r3, pc, #180	; (adr r3, 8004dd0 <_Z12shooter_basev+0x208>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	e9c1 2300 	strd	r2, r3, [r1]
 8004d24:	e010      	b.n	8004d48 <_Z12shooter_basev+0x180>
	else if(ut_hz < -0.2) ut_hz = -0.2;
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d2c:	a32a      	add	r3, pc, #168	; (adr r3, 8004dd8 <_Z12shooter_basev+0x210>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f7fb fe9f 	bl	8000a74 <__aeabi_dcmplt>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <_Z12shooter_basev+0x180>
 8004d3c:	4931      	ldr	r1, [pc, #196]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d3e:	a326      	add	r3, pc, #152	; (adr r3, 8004dd8 <_Z12shooter_basev+0x210>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	e9c1 2300 	strd	r2, r3, [r1]

	if(ut_hz>0){
 8004d48:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	f7fb feab 	bl	8000ab0 <__aeabi_dcmpgt>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <_Z12shooter_basev+0x1b2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004d60:	2201      	movs	r2, #1
 8004d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d66:	4828      	ldr	r0, [pc, #160]	; (8004e08 <_Z12shooter_basev+0x240>)
 8004d68:	f001 ff5e 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d72:	4825      	ldr	r0, [pc, #148]	; (8004e08 <_Z12shooter_basev+0x240>)
 8004d74:	f001 ff58 	bl	8006c28 <HAL_GPIO_WritePin>
 8004d78:	e060      	b.n	8004e3c <_Z12shooter_basev+0x274>
	}
	else if(ut_hz<0){
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <_Z12shooter_basev+0x23c>)
 8004d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	f7fb fe74 	bl	8000a74 <__aeabi_dcmplt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d03c      	beq.n	8004e0c <_Z12shooter_basev+0x244>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d98:	481b      	ldr	r0, [pc, #108]	; (8004e08 <_Z12shooter_basev+0x240>)
 8004d9a:	f001 ff45 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004da4:	4818      	ldr	r0, [pc, #96]	; (8004e08 <_Z12shooter_basev+0x240>)
 8004da6:	f001 ff3f 	bl	8006c28 <HAL_GPIO_WritePin>
 8004daa:	e047      	b.n	8004e3c <_Z12shooter_basev+0x274>
 8004dac:	f3af 8000 	nop.w
 8004db0:	00000000 	.word	0x00000000
 8004db4:	40d77000 	.word	0x40d77000
 8004db8:	bc6a7efa 	.word	0xbc6a7efa
 8004dbc:	3f689374 	.word	0x3f689374
 8004dc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004dc4:	3f50624d 	.word	0x3f50624d
 8004dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004dcc:	3f70624d 	.word	0x3f70624d
 8004dd0:	9999999a 	.word	0x9999999a
 8004dd4:	3fc99999 	.word	0x3fc99999
 8004dd8:	9999999a 	.word	0x9999999a
 8004ddc:	bfc99999 	.word	0xbfc99999
 8004de0:	2000012c 	.word	0x2000012c
 8004de4:	200019f8 	.word	0x200019f8
 8004de8:	40768000 	.word	0x40768000
 8004dec:	200000b0 	.word	0x200000b0
 8004df0:	20001a00 	.word	0x20001a00
 8004df4:	20001a18 	.word	0x20001a18
 8004df8:	20001a28 	.word	0x20001a28
 8004dfc:	3fd00000 	.word	0x3fd00000
 8004e00:	20001a48 	.word	0x20001a48
 8004e04:	20001a38 	.word	0x20001a38
 8004e08:	40020400 	.word	0x40020400
	}
	else if(ut_hz==0){
 8004e0c:	4bb6      	ldr	r3, [pc, #728]	; (80050e8 <_Z12shooter_basev+0x520>)
 8004e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	f7fb fe21 	bl	8000a60 <__aeabi_dcmpeq>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <_Z12shooter_basev+0x274>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e24:	2200      	movs	r2, #0
 8004e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e2a:	48b0      	ldr	r0, [pc, #704]	; (80050ec <_Z12shooter_basev+0x524>)
 8004e2c:	f001 fefc 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e36:	48ad      	ldr	r0, [pc, #692]	; (80050ec <_Z12shooter_basev+0x524>)
 8004e38:	f001 fef6 	bl	8006c28 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,fabs(ut_hz)*20000);
 8004e3c:	4baa      	ldr	r3, [pc, #680]	; (80050e8 <_Z12shooter_basev+0x520>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	4690      	mov	r8, r2
 8004e44:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004e48:	a39d      	add	r3, pc, #628	; (adr r3, 80050c0 <_Z12shooter_basev+0x4f8>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4649      	mov	r1, r9
 8004e52:	f7fb fb9d 	bl	8000590 <__aeabi_dmul>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	49a5      	ldr	r1, [pc, #660]	; (80050f0 <_Z12shooter_basev+0x528>)
 8004e5c:	680e      	ldr	r6, [r1, #0]
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fb fe2f 	bl	8000ac4 <__aeabi_d2uiz>
 8004e66:	4603      	mov	r3, r0
 8004e68:	63b3      	str	r3, [r6, #56]	; 0x38

	//record et
	last_et_hz = et_hz;
 8004e6a:	4ba2      	ldr	r3, [pc, #648]	; (80050f4 <_Z12shooter_basev+0x52c>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	49a1      	ldr	r1, [pc, #644]	; (80050f8 <_Z12shooter_basev+0x530>)
 8004e72:	e9c1 2300 	strd	r2, r3, [r1]

//elevation angle
	enc_ev = __HAL_TIM_GetCounter(&htim3);
 8004e76:	4ba1      	ldr	r3, [pc, #644]	; (80050fc <_Z12shooter_basev+0x534>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b21a      	sxth	r2, r3
 8004e7e:	4ba0      	ldr	r3, [pc, #640]	; (8005100 <_Z12shooter_basev+0x538>)
 8004e80:	801a      	strh	r2, [r3, #0]
	angle_ev += 360*((double)enc_ev/(4*resolution_ev*ratio_ev))*2;	//PV
 8004e82:	4b9f      	ldr	r3, [pc, #636]	; (8005100 <_Z12shooter_basev+0x538>)
 8004e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb fb17 	bl	80004bc <__aeabi_i2d>
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4b9c      	ldr	r3, [pc, #624]	; (8005104 <_Z12shooter_basev+0x53c>)
 8004e94:	f7fb fca6 	bl	80007e4 <__aeabi_ddiv>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	4b98      	ldr	r3, [pc, #608]	; (8005108 <_Z12shooter_basev+0x540>)
 8004ea6:	f7fb fb73 	bl	8000590 <__aeabi_dmul>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	f7fb f9b5 	bl	8000224 <__adddf3>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4b92      	ldr	r3, [pc, #584]	; (800510c <_Z12shooter_basev+0x544>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb f9ac 	bl	8000224 <__adddf3>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	498e      	ldr	r1, [pc, #568]	; (800510c <_Z12shooter_basev+0x544>)
 8004ed2:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCounter(&htim3, 0);
 8004ed6:	4b89      	ldr	r3, [pc, #548]	; (80050fc <_Z12shooter_basev+0x534>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

	//et
	et_ev = target_ev - angle_ev;
 8004ede:	4b8c      	ldr	r3, [pc, #560]	; (8005110 <_Z12shooter_basev+0x548>)
 8004ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ee4:	4b89      	ldr	r3, [pc, #548]	; (800510c <_Z12shooter_basev+0x544>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f7fb f999 	bl	8000220 <__aeabi_dsub>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4988      	ldr	r1, [pc, #544]	; (8005114 <_Z12shooter_basev+0x54c>)
 8004ef4:	e9c1 2300 	strd	r2, r3, [r1]
	sigma_et_ev += et_ev;
 8004ef8:	4b87      	ldr	r3, [pc, #540]	; (8005118 <_Z12shooter_basev+0x550>)
 8004efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004efe:	4b85      	ldr	r3, [pc, #532]	; (8005114 <_Z12shooter_basev+0x54c>)
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f7fb f98e 	bl	8000224 <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4982      	ldr	r1, [pc, #520]	; (8005118 <_Z12shooter_basev+0x550>)
 8004f0e:	e9c1 2300 	strd	r2, r3, [r1]

	//ut -> pulse
	ut_ev = P_ev*et_ev + I_ev*sigma_et_ev*span_ev + D_ev*(et_ev-last_et_ev)/span_ev;	//PID Control
 8004f12:	4b80      	ldr	r3, [pc, #512]	; (8005114 <_Z12shooter_basev+0x54c>)
 8004f14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f18:	a36b      	add	r3, pc, #428	; (adr r3, 80050c8 <_Z12shooter_basev+0x500>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fb37 	bl	8000590 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4690      	mov	r8, r2
 8004f28:	4699      	mov	r9, r3
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <_Z12shooter_basev+0x550>)
 8004f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	f7fb fb2a 	bl	8000590 <__aeabi_dmul>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	a362      	add	r3, pc, #392	; (adr r3, 80050d0 <_Z12shooter_basev+0x508>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f7fb fb21 	bl	8000590 <__aeabi_dmul>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4640      	mov	r0, r8
 8004f54:	4649      	mov	r1, r9
 8004f56:	f7fb f965 	bl	8000224 <__adddf3>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4690      	mov	r8, r2
 8004f60:	4699      	mov	r9, r3
 8004f62:	4b6c      	ldr	r3, [pc, #432]	; (8005114 <_Z12shooter_basev+0x54c>)
 8004f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f68:	4b6c      	ldr	r3, [pc, #432]	; (800511c <_Z12shooter_basev+0x554>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb f957 	bl	8000220 <__aeabi_dsub>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	a357      	add	r3, pc, #348	; (adr r3, 80050d8 <_Z12shooter_basev+0x510>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb fb06 	bl	8000590 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	a350      	add	r3, pc, #320	; (adr r3, 80050d0 <_Z12shooter_basev+0x508>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb fc27 	bl	80007e4 <__aeabi_ddiv>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb f941 	bl	8000224 <__adddf3>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	495e      	ldr	r1, [pc, #376]	; (8005120 <_Z12shooter_basev+0x558>)
 8004fa8:	e9c1 2300 	strd	r2, r3, [r1]
	if(ut_ev > 0.3) ut_ev = 0.3;
 8004fac:	4b5c      	ldr	r3, [pc, #368]	; (8005120 <_Z12shooter_basev+0x558>)
 8004fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb2:	a345      	add	r3, pc, #276	; (adr r3, 80050c8 <_Z12shooter_basev+0x500>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb fd7a 	bl	8000ab0 <__aeabi_dcmpgt>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <_Z12shooter_basev+0x408>
 8004fc2:	4957      	ldr	r1, [pc, #348]	; (8005120 <_Z12shooter_basev+0x558>)
 8004fc4:	a340      	add	r3, pc, #256	; (adr r3, 80050c8 <_Z12shooter_basev+0x500>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	e9c1 2300 	strd	r2, r3, [r1]
 8004fce:	e010      	b.n	8004ff2 <_Z12shooter_basev+0x42a>
	else if(ut_ev < -0.3) ut_ev = -0.3;
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <_Z12shooter_basev+0x558>)
 8004fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fd6:	a342      	add	r3, pc, #264	; (adr r3, 80050e0 <_Z12shooter_basev+0x518>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f7fb fd4a 	bl	8000a74 <__aeabi_dcmplt>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <_Z12shooter_basev+0x42a>
 8004fe6:	494e      	ldr	r1, [pc, #312]	; (8005120 <_Z12shooter_basev+0x558>)
 8004fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80050e0 <_Z12shooter_basev+0x518>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	e9c1 2300 	strd	r2, r3, [r1]

	if(ut_ev>0){
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <_Z12shooter_basev+0x558>)
 8004ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	f7fb fd56 	bl	8000ab0 <__aeabi_dcmpgt>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <_Z12shooter_basev+0x458>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800500a:	2201      	movs	r2, #1
 800500c:	2101      	movs	r1, #1
 800500e:	4845      	ldr	r0, [pc, #276]	; (8005124 <_Z12shooter_basev+0x55c>)
 8005010:	f001 fe0a 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8005014:	2200      	movs	r2, #0
 8005016:	2102      	movs	r1, #2
 8005018:	4842      	ldr	r0, [pc, #264]	; (8005124 <_Z12shooter_basev+0x55c>)
 800501a:	f001 fe05 	bl	8006c28 <HAL_GPIO_WritePin>
 800501e:	e02c      	b.n	800507a <_Z12shooter_basev+0x4b2>
	}
	else if(ut_ev<0){
 8005020:	4b3f      	ldr	r3, [pc, #252]	; (8005120 <_Z12shooter_basev+0x558>)
 8005022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f7fb fd21 	bl	8000a74 <__aeabi_dcmplt>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <_Z12shooter_basev+0x486>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005038:	2200      	movs	r2, #0
 800503a:	2101      	movs	r1, #1
 800503c:	4839      	ldr	r0, [pc, #228]	; (8005124 <_Z12shooter_basev+0x55c>)
 800503e:	f001 fdf3 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8005042:	2201      	movs	r2, #1
 8005044:	2102      	movs	r1, #2
 8005046:	4837      	ldr	r0, [pc, #220]	; (8005124 <_Z12shooter_basev+0x55c>)
 8005048:	f001 fdee 	bl	8006c28 <HAL_GPIO_WritePin>
 800504c:	e015      	b.n	800507a <_Z12shooter_basev+0x4b2>
	}
	else if(ut_ev==0){
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <_Z12shooter_basev+0x558>)
 8005050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	f7fb fd00 	bl	8000a60 <__aeabi_dcmpeq>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <_Z12shooter_basev+0x4b2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005066:	2200      	movs	r2, #0
 8005068:	2101      	movs	r1, #1
 800506a:	482e      	ldr	r0, [pc, #184]	; (8005124 <_Z12shooter_basev+0x55c>)
 800506c:	f001 fddc 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8005070:	2200      	movs	r2, #0
 8005072:	2102      	movs	r1, #2
 8005074:	482b      	ldr	r0, [pc, #172]	; (8005124 <_Z12shooter_basev+0x55c>)
 8005076:	f001 fdd7 	bl	8006c28 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,fabs(ut_ev)*20000);
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <_Z12shooter_basev+0x558>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	4614      	mov	r4, r2
 8005082:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005086:	a30e      	add	r3, pc, #56	; (adr r3, 80050c0 <_Z12shooter_basev+0x4f8>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4620      	mov	r0, r4
 800508e:	4629      	mov	r1, r5
 8005090:	f7fb fa7e 	bl	8000590 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4915      	ldr	r1, [pc, #84]	; (80050f0 <_Z12shooter_basev+0x528>)
 800509a:	680c      	ldr	r4, [r1, #0]
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	f7fb fd10 	bl	8000ac4 <__aeabi_d2uiz>
 80050a4:	4603      	mov	r3, r0
 80050a6:	6363      	str	r3, [r4, #52]	; 0x34

	//record et
	last_et_ev = et_ev;
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <_Z12shooter_basev+0x54c>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	491b      	ldr	r1, [pc, #108]	; (800511c <_Z12shooter_basev+0x554>)
 80050b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80050b4:	bf00      	nop
 80050b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	00000000 	.word	0x00000000
 80050c4:	40d38800 	.word	0x40d38800
 80050c8:	33333333 	.word	0x33333333
 80050cc:	3fd33333 	.word	0x3fd33333
 80050d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050d4:	3f50624d 	.word	0x3f50624d
 80050d8:	3126e979 	.word	0x3126e979
 80050dc:	3f7cac08 	.word	0x3f7cac08
 80050e0:	33333333 	.word	0x33333333
 80050e4:	bfd33333 	.word	0xbfd33333
 80050e8:	20001a38 	.word	0x20001a38
 80050ec:	40020400 	.word	0x40020400
 80050f0:	20000294 	.word	0x20000294
 80050f4:	20001a18 	.word	0x20001a18
 80050f8:	20001a48 	.word	0x20001a48
 80050fc:	20000174 	.word	0x20000174
 8005100:	200019fa 	.word	0x200019fa
 8005104:	40af4000 	.word	0x40af4000
 8005108:	40768000 	.word	0x40768000
 800510c:	200000b8 	.word	0x200000b8
 8005110:	20001a08 	.word	0x20001a08
 8005114:	20001a20 	.word	0x20001a20
 8005118:	20001a30 	.word	0x20001a30
 800511c:	20001a50 	.word	0x20001a50
 8005120:	20001a40 	.word	0x20001a40
 8005124:	40020800 	.word	0x40020800

08005128 <_Z5Resetv>:
int ev_origin = 0;	//vertical
double hz_pos_limit = 60;
double hz_neg_limit = -60;
double ev_limit = 90;

void Reset(){
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	hz_origin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800512c:	2110      	movs	r1, #16
 800512e:	485a      	ldr	r0, [pc, #360]	; (8005298 <_Z5Resetv+0x170>)
 8005130:	f001 fd62 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	4b58      	ldr	r3, [pc, #352]	; (800529c <_Z5Resetv+0x174>)
 800513a:	601a      	str	r2, [r3, #0]
	ev_origin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800513c:	2120      	movs	r1, #32
 800513e:	4856      	ldr	r0, [pc, #344]	; (8005298 <_Z5Resetv+0x170>)
 8005140:	f001 fd5a 	bl	8006bf8 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <_Z5Resetv+0x178>)
 800514a:	601a      	str	r2, [r3, #0]

	if(ev_origin != 1){
 800514c:	4b54      	ldr	r3, [pc, #336]	; (80052a0 <_Z5Resetv+0x178>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d00a      	beq.n	800516a <_Z5Resetv+0x42>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8005154:	2201      	movs	r2, #1
 8005156:	2101      	movs	r1, #1
 8005158:	4852      	ldr	r0, [pc, #328]	; (80052a4 <_Z5Resetv+0x17c>)
 800515a:	f001 fd65 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800515e:	2200      	movs	r2, #0
 8005160:	2102      	movs	r1, #2
 8005162:	4850      	ldr	r0, [pc, #320]	; (80052a4 <_Z5Resetv+0x17c>)
 8005164:	f001 fd60 	bl	8006c28 <HAL_GPIO_WritePin>
 8005168:	e010      	b.n	800518c <_Z5Resetv+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	2101      	movs	r1, #1
 800516e:	484d      	ldr	r0, [pc, #308]	; (80052a4 <_Z5Resetv+0x17c>)
 8005170:	f001 fd5a 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	2102      	movs	r1, #2
 8005178:	484a      	ldr	r0, [pc, #296]	; (80052a4 <_Z5Resetv+0x17c>)
 800517a:	f001 fd55 	bl	8006c28 <HAL_GPIO_WritePin>
		angle_ev = 0;
 800517e:	494a      	ldr	r1, [pc, #296]	; (80052a8 <_Z5Resetv+0x180>)
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(hz_origin != 1){
 800518c:	4b43      	ldr	r3, [pc, #268]	; (800529c <_Z5Resetv+0x174>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d061      	beq.n	8005258 <_Z5Resetv+0x130>
		if(angle_hz > 0){
 8005194:	4b45      	ldr	r3, [pc, #276]	; (80052ac <_Z5Resetv+0x184>)
 8005196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f7fb fc85 	bl	8000ab0 <__aeabi_dcmpgt>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <_Z5Resetv+0x9e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 80051ac:	2201      	movs	r2, #1
 80051ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051b2:	4839      	ldr	r0, [pc, #228]	; (8005298 <_Z5Resetv+0x170>)
 80051b4:	f001 fd38 	bl	8006c28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80051b8:	2200      	movs	r2, #0
 80051ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051be:	4836      	ldr	r0, [pc, #216]	; (8005298 <_Z5Resetv+0x170>)
 80051c0:	f001 fd32 	bl	8006c28 <HAL_GPIO_WritePin>
 80051c4:	e05b      	b.n	800527e <_Z5Resetv+0x156>
		}
		else if(angle_hz < 0){
 80051c6:	4b39      	ldr	r3, [pc, #228]	; (80052ac <_Z5Resetv+0x184>)
 80051c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	f7fb fc4e 	bl	8000a74 <__aeabi_dcmplt>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <_Z5Resetv+0xd0>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051e4:	482c      	ldr	r0, [pc, #176]	; (8005298 <_Z5Resetv+0x170>)
 80051e6:	f001 fd1f 	bl	8006c28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80051ea:	2201      	movs	r2, #1
 80051ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051f0:	4829      	ldr	r0, [pc, #164]	; (8005298 <_Z5Resetv+0x170>)
 80051f2:	f001 fd19 	bl	8006c28 <HAL_GPIO_WritePin>
 80051f6:	e042      	b.n	800527e <_Z5Resetv+0x156>
		}
		else if(angle_hz == hz_pos_limit){
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <_Z5Resetv+0x184>)
 80051fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <_Z5Resetv+0x188>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb fc2c 	bl	8000a60 <__aeabi_dcmpeq>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <_Z5Resetv+0x100>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 800520e:	2201      	movs	r2, #1
 8005210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005214:	4820      	ldr	r0, [pc, #128]	; (8005298 <_Z5Resetv+0x170>)
 8005216:	f001 fd07 	bl	8006c28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 800521a:	2200      	movs	r2, #0
 800521c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005220:	481d      	ldr	r0, [pc, #116]	; (8005298 <_Z5Resetv+0x170>)
 8005222:	f001 fd01 	bl	8006c28 <HAL_GPIO_WritePin>
 8005226:	e02a      	b.n	800527e <_Z5Resetv+0x156>
		}
		else if(angle_hz == hz_neg_limit){
 8005228:	4b20      	ldr	r3, [pc, #128]	; (80052ac <_Z5Resetv+0x184>)
 800522a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <_Z5Resetv+0x18c>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fb fc14 	bl	8000a60 <__aeabi_dcmpeq>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01f      	beq.n	800527e <_Z5Resetv+0x156>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 800523e:	2200      	movs	r2, #0
 8005240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005244:	4814      	ldr	r0, [pc, #80]	; (8005298 <_Z5Resetv+0x170>)
 8005246:	f001 fcef 	bl	8006c28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 800524a:	2201      	movs	r2, #1
 800524c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005250:	4811      	ldr	r0, [pc, #68]	; (8005298 <_Z5Resetv+0x170>)
 8005252:	f001 fce9 	bl	8006c28 <HAL_GPIO_WritePin>
 8005256:	e012      	b.n	800527e <_Z5Resetv+0x156>
		}
	}
	else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800525e:	480e      	ldr	r0, [pc, #56]	; (8005298 <_Z5Resetv+0x170>)
 8005260:	f001 fce2 	bl	8006c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8005264:	2200      	movs	r2, #0
 8005266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800526a:	480b      	ldr	r0, [pc, #44]	; (8005298 <_Z5Resetv+0x170>)
 800526c:	f001 fcdc 	bl	8006c28 <HAL_GPIO_WritePin>
		angle_hz = 0;
 8005270:	490e      	ldr	r1, [pc, #56]	; (80052ac <_Z5Resetv+0x184>)
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(hz_origin == 1 && ev_origin == 1)	reset = 0;
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <_Z5Resetv+0x174>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d106      	bne.n	8005294 <_Z5Resetv+0x16c>
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <_Z5Resetv+0x178>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <_Z5Resetv+0x16c>
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <_Z5Resetv+0x190>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40020400 	.word	0x40020400
 800529c:	20001a58 	.word	0x20001a58
 80052a0:	20001a5c 	.word	0x20001a5c
 80052a4:	40020800 	.word	0x40020800
 80052a8:	200000b8 	.word	0x200000b8
 80052ac:	200000b0 	.word	0x200000b0
 80052b0:	20000018 	.word	0x20000018
 80052b4:	20000020 	.word	0x20000020
 80052b8:	20000014 	.word	0x20000014

080052bc <_Z10base_limitv>:


void base_limit(){
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
	//elevation angle limit
	if(target_ev <= 0)	target_ev = 0;
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <_Z10base_limitv+0x9c>)
 80052c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	f7fb fbdb 	bl	8000a88 <__aeabi_dcmple>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <_Z10base_limitv+0x2c>
 80052d8:	491f      	ldr	r1, [pc, #124]	; (8005358 <_Z10base_limitv+0x9c>)
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9c1 2300 	strd	r2, r3, [r1]
 80052e6:	e010      	b.n	800530a <_Z10base_limitv+0x4e>
	else if (target_ev >= ev_limit)	target_ev = ev_limit;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <_Z10base_limitv+0x9c>)
 80052ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <_Z10base_limitv+0xa0>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fb fbd2 	bl	8000a9c <__aeabi_dcmpge>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <_Z10base_limitv+0x4e>
 80052fe:	4b17      	ldr	r3, [pc, #92]	; (800535c <_Z10base_limitv+0xa0>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4914      	ldr	r1, [pc, #80]	; (8005358 <_Z10base_limitv+0x9c>)
 8005306:	e9c1 2300 	strd	r2, r3, [r1]
	//horizontal angle limit
	if(target_hz >= hz_pos_limit)	target_hz = hz_pos_limit;
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <_Z10base_limitv+0xa4>)
 800530c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005310:	4b14      	ldr	r3, [pc, #80]	; (8005364 <_Z10base_limitv+0xa8>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f7fb fbc1 	bl	8000a9c <__aeabi_dcmpge>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <_Z10base_limitv+0x72>
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <_Z10base_limitv+0xa8>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	490e      	ldr	r1, [pc, #56]	; (8005360 <_Z10base_limitv+0xa4>)
 8005328:	e9c1 2300 	strd	r2, r3, [r1]
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
}
 800532c:	e011      	b.n	8005352 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <_Z10base_limitv+0xa4>)
 8005330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <_Z10base_limitv+0xac>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb fba5 	bl	8000a88 <__aeabi_dcmple>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d100      	bne.n	8005346 <_Z10base_limitv+0x8a>
}
 8005344:	e005      	b.n	8005352 <_Z10base_limitv+0x96>
	else if(target_hz <= hz_neg_limit)	target_hz = hz_neg_limit;
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <_Z10base_limitv+0xac>)
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	4904      	ldr	r1, [pc, #16]	; (8005360 <_Z10base_limitv+0xa4>)
 800534e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20001a08 	.word	0x20001a08
 800535c:	20000028 	.word	0x20000028
 8005360:	20001a00 	.word	0x20001a00
 8005364:	20000018 	.word	0x20000018
 8005368:	20000020 	.word	0x20000020

0800536c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_MspInit+0x4c>)
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <HAL_MspInit+0x4c>)
 800537c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005380:	6453      	str	r3, [r2, #68]	; 0x44
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <HAL_MspInit+0x4c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_MspInit+0x4c>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <HAL_MspInit+0x4c>)
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6413      	str	r3, [r2, #64]	; 0x40
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_MspInit+0x4c>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40023800 	.word	0x40023800

080053bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08e      	sub	sp, #56	; 0x38
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	605a      	str	r2, [r3, #4]
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	60da      	str	r2, [r3, #12]
 80053d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a4f      	ldr	r2, [pc, #316]	; (8005518 <HAL_TIM_Encoder_MspInit+0x15c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d135      	bne.n	800544a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	4b4e      	ldr	r3, [pc, #312]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	4a4d      	ldr	r2, [pc, #308]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	6453      	str	r3, [r2, #68]	; 0x44
 80053ee:	4b4b      	ldr	r3, [pc, #300]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4a46      	ldr	r2, [pc, #280]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	6313      	str	r3, [r2, #48]	; 0x30
 800540a:	4b44      	ldr	r3, [pc, #272]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541c:	2302      	movs	r3, #2
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005424:	2300      	movs	r3, #0
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005428:	2301      	movs	r3, #1
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005430:	4619      	mov	r1, r3
 8005432:	483b      	ldr	r0, [pc, #236]	; (8005520 <HAL_TIM_Encoder_MspInit+0x164>)
 8005434:	f001 f958 	bl	80066e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005438:	2200      	movs	r2, #0
 800543a:	2100      	movs	r1, #0
 800543c:	2018      	movs	r0, #24
 800543e:	f000 fcae 	bl	8005d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005442:	2018      	movs	r0, #24
 8005444:	f000 fcc7 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005448:	e062      	b.n	8005510 <HAL_TIM_Encoder_MspInit+0x154>
  else if(htim_encoder->Instance==TIM2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d12c      	bne.n	80054ae <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	4a2f      	ldr	r2, [pc, #188]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	6413      	str	r3, [r2, #64]	; 0x40
 8005464:	4b2d      	ldr	r3, [pc, #180]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	4b29      	ldr	r3, [pc, #164]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4a28      	ldr	r2, [pc, #160]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6313      	str	r3, [r2, #48]	; 0x30
 8005480:	4b26      	ldr	r3, [pc, #152]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800548c:	2322      	movs	r3, #34	; 0x22
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005490:	2302      	movs	r3, #2
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005498:	2300      	movs	r3, #0
 800549a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800549c:	2301      	movs	r3, #1
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a4:	4619      	mov	r1, r3
 80054a6:	481e      	ldr	r0, [pc, #120]	; (8005520 <HAL_TIM_Encoder_MspInit+0x164>)
 80054a8:	f001 f91e 	bl	80066e8 <HAL_GPIO_Init>
}
 80054ac:	e030      	b.n	8005510 <HAL_TIM_Encoder_MspInit+0x154>
  else if(htim_encoder->Instance==TIM3)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_TIM_Encoder_MspInit+0x168>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d12b      	bne.n	8005510 <HAL_TIM_Encoder_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6413      	str	r3, [r2, #64]	; 0x40
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6313      	str	r3, [r2, #48]	; 0x30
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <HAL_TIM_Encoder_MspInit+0x160>)
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054f0:	23c0      	movs	r3, #192	; 0xc0
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fc:	2300      	movs	r3, #0
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005500:	2302      	movs	r3, #2
 8005502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005508:	4619      	mov	r1, r3
 800550a:	4805      	ldr	r0, [pc, #20]	; (8005520 <HAL_TIM_Encoder_MspInit+0x164>)
 800550c:	f001 f8ec 	bl	80066e8 <HAL_GPIO_Init>
}
 8005510:	bf00      	nop
 8005512:	3738      	adds	r7, #56	; 0x38
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40010000 	.word	0x40010000
 800551c:	40023800 	.word	0x40023800
 8005520:	40020000 	.word	0x40020000
 8005524:	40000400 	.word	0x40000400

08005528 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <HAL_TIM_PWM_MspInit+0xa8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005556:	e036      	b.n	80055c6 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM8)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_TIM_PWM_MspInit+0xb0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d116      	bne.n	8005590 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	6453      	str	r3, [r2, #68]	; 0x44
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800557e:	2200      	movs	r2, #0
 8005580:	2100      	movs	r1, #0
 8005582:	202b      	movs	r0, #43	; 0x2b
 8005584:	f000 fc0b 	bl	8005d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005588:	202b      	movs	r0, #43	; 0x2b
 800558a:	f000 fc24 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
}
 800558e:	e01a      	b.n	80055c6 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a11      	ldr	r2, [pc, #68]	; (80055dc <HAL_TIM_PWM_MspInit+0xb4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d115      	bne.n	80055c6 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 80055a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a8:	6413      	str	r3, [r2, #64]	; 0x40
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_TIM_PWM_MspInit+0xac>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2100      	movs	r1, #0
 80055ba:	202b      	movs	r0, #43	; 0x2b
 80055bc:	f000 fbef 	bl	8005d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80055c0:	202b      	movs	r0, #43	; 0x2b
 80055c2:	f000 fc08 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40001800 	.word	0x40001800

080055e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <HAL_TIM_Base_MspInit+0x48>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d115      	bne.n	800561e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <HAL_TIM_Base_MspInit+0x4c>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <HAL_TIM_Base_MspInit+0x4c>)
 80055fc:	f043 0308 	orr.w	r3, r3, #8
 8005600:	6413      	str	r3, [r2, #64]	; 0x40
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_TIM_Base_MspInit+0x4c>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	2032      	movs	r0, #50	; 0x32
 8005614:	f000 fbc3 	bl	8005d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005618:	2032      	movs	r0, #50	; 0x32
 800561a:	f000 fbdc 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40023800 	.word	0x40023800

08005630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a36      	ldr	r2, [pc, #216]	; (8005728 <HAL_TIM_MspPostInit+0xf8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d11e      	bne.n	8005690 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	4b35      	ldr	r3, [pc, #212]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	4a34      	ldr	r2, [pc, #208]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	6313      	str	r3, [r2, #48]	; 0x30
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800566e:	23c0      	movs	r3, #192	; 0xc0
 8005670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005672:	2302      	movs	r3, #2
 8005674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800567e:	2302      	movs	r3, #2
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005682:	f107 0314 	add.w	r3, r7, #20
 8005686:	4619      	mov	r1, r3
 8005688:	4829      	ldr	r0, [pc, #164]	; (8005730 <HAL_TIM_MspPostInit+0x100>)
 800568a:	f001 f82d 	bl	80066e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800568e:	e047      	b.n	8005720 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a27      	ldr	r2, [pc, #156]	; (8005734 <HAL_TIM_MspPostInit+0x104>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d11e      	bne.n	80056d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	4b23      	ldr	r3, [pc, #140]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056a4:	f043 0304 	orr.w	r3, r3, #4
 80056a8:	6313      	str	r3, [r2, #48]	; 0x30
 80056aa:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056b6:	2340      	movs	r3, #64	; 0x40
 80056b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ba:	2302      	movs	r3, #2
 80056bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80056c6:	2303      	movs	r3, #3
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ca:	f107 0314 	add.w	r3, r7, #20
 80056ce:	4619      	mov	r1, r3
 80056d0:	4819      	ldr	r0, [pc, #100]	; (8005738 <HAL_TIM_MspPostInit+0x108>)
 80056d2:	f001 f809 	bl	80066e8 <HAL_GPIO_Init>
}
 80056d6:	e023      	b.n	8005720 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM12)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <HAL_TIM_MspPostInit+0x10c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d11e      	bne.n	8005720 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	6313      	str	r3, [r2, #48]	; 0x30
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <HAL_TIM_MspPostInit+0xfc>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80056fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005704:	2302      	movs	r3, #2
 8005706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005710:	2309      	movs	r3, #9
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005714:	f107 0314 	add.w	r3, r7, #20
 8005718:	4619      	mov	r1, r3
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <HAL_TIM_MspPostInit+0x100>)
 800571c:	f000 ffe4 	bl	80066e8 <HAL_GPIO_Init>
}
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40000800 	.word	0x40000800
 800572c:	40023800 	.word	0x40023800
 8005730:	40020400 	.word	0x40020400
 8005734:	40010400 	.word	0x40010400
 8005738:	40020800 	.word	0x40020800
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a4d      	ldr	r2, [pc, #308]	; (8005894 <HAL_UART_MspInit+0x154>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f040 8093 	bne.w	800588a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_UART_MspInit+0x158>)
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	4a4a      	ldr	r2, [pc, #296]	; (8005898 <HAL_UART_MspInit+0x158>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	6413      	str	r3, [r2, #64]	; 0x40
 8005774:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_UART_MspInit+0x158>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	4b44      	ldr	r3, [pc, #272]	; (8005898 <HAL_UART_MspInit+0x158>)
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	4a43      	ldr	r2, [pc, #268]	; (8005898 <HAL_UART_MspInit+0x158>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6313      	str	r3, [r2, #48]	; 0x30
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_UART_MspInit+0x158>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800579c:	230c      	movs	r3, #12
 800579e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a0:	2302      	movs	r3, #2
 80057a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a8:	2303      	movs	r3, #3
 80057aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057ac:	2307      	movs	r3, #7
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4619      	mov	r1, r3
 80057b6:	4839      	ldr	r0, [pc, #228]	; (800589c <HAL_UART_MspInit+0x15c>)
 80057b8:	f000 ff96 	bl	80066e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80057bc:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057be:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <HAL_UART_MspInit+0x164>)
 80057c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ca:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057d0:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057d6:	4b32      	ldr	r3, [pc, #200]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057de:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057e4:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_UART_MspInit+0x160>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005800:	4827      	ldr	r0, [pc, #156]	; (80058a0 <HAL_UART_MspInit+0x160>)
 8005802:	f000 fb11 	bl	8005e28 <HAL_DMA_Init>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800580c:	f7fc f98e 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a23      	ldr	r2, [pc, #140]	; (80058a0 <HAL_UART_MspInit+0x160>)
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_UART_MspInit+0x160>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800581c:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_UART_MspInit+0x168>)
 800581e:	4a23      	ldr	r2, [pc, #140]	; (80058ac <HAL_UART_MspInit+0x16c>)
 8005820:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005822:	4b21      	ldr	r3, [pc, #132]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005824:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005828:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800582a:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <HAL_UART_MspInit+0x168>)
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005836:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800583c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800583e:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005840:	2200      	movs	r2, #0
 8005842:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005844:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <HAL_UART_MspInit+0x168>)
 800584c:	2200      	movs	r2, #0
 800584e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005856:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <HAL_UART_MspInit+0x168>)
 800585a:	2200      	movs	r2, #0
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800585e:	4812      	ldr	r0, [pc, #72]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005860:	f000 fae2 	bl	8005e28 <HAL_DMA_Init>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800586a:	f7fc f95f 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a0d      	ldr	r2, [pc, #52]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005872:	635a      	str	r2, [r3, #52]	; 0x34
 8005874:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <HAL_UART_MspInit+0x168>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800587a:	2200      	movs	r2, #0
 800587c:	2100      	movs	r1, #0
 800587e:	2026      	movs	r0, #38	; 0x26
 8005880:	f000 fa8d 	bl	8005d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005884:	2026      	movs	r0, #38	; 0x26
 8005886:	f000 faa6 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800588a:	bf00      	nop
 800588c:	3728      	adds	r7, #40	; 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40004400 	.word	0x40004400
 8005898:	40023800 	.word	0x40023800
 800589c:	40020000 	.word	0x40020000
 80058a0:	20000320 	.word	0x20000320
 80058a4:	40026088 	.word	0x40026088
 80058a8:	20000380 	.word	0x20000380
 80058ac:	400260a0 	.word	0x400260a0

080058b0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_UART_MspDeInit+0x48>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d116      	bne.n	80058f0 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80058c2:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <HAL_UART_MspDeInit+0x4c>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <HAL_UART_MspDeInit+0x4c>)
 80058c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80058ce:	210c      	movs	r1, #12
 80058d0:	480b      	ldr	r0, [pc, #44]	; (8005900 <HAL_UART_MspDeInit+0x50>)
 80058d2:	f001 f89d 	bl	8006a10 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fb52 	bl	8005f84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fb4d 	bl	8005f84 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80058ea:	2026      	movs	r0, #38	; 0x26
 80058ec:	f000 fa81 	bl	8005df2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40023800 	.word	0x40023800
 8005900:	40020000 	.word	0x40020000

08005904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005908:	e7fe      	b.n	8005908 <NMI_Handler+0x4>

0800590a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800590e:	e7fe      	b.n	800590e <HardFault_Handler+0x4>

08005910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005914:	e7fe      	b.n	8005914 <MemManage_Handler+0x4>

08005916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800591a:	e7fe      	b.n	800591a <BusFault_Handler+0x4>

0800591c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005920:	e7fe      	b.n	8005920 <UsageFault_Handler+0x4>

08005922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005950:	f000 f906 	bl	8005b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005954:	bf00      	nop
 8005956:	bd80      	pop	{r7, pc}

08005958 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <DMA1_Stream5_IRQHandler+0x10>)
 800595e:	f000 fc59 	bl	8006214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000320 	.word	0x20000320

0800596c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <DMA1_Stream6_IRQHandler+0x10>)
 8005972:	f000 fc4f 	bl	8006214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000380 	.word	0x20000380

08005980 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005984:	4802      	ldr	r0, [pc, #8]	; (8005990 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005986:	f002 fa5d 	bl	8007e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200000e4 	.word	0x200000e4

08005994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005998:	4802      	ldr	r0, [pc, #8]	; (80059a4 <USART2_IRQHandler+0x10>)
 800599a:	f003 fa29 	bl	8008df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800599e:	bf00      	nop
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200002dc 	.word	0x200002dc

080059a8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80059ac:	4803      	ldr	r0, [pc, #12]	; (80059bc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80059ae:	f002 fa49 	bl	8007e44 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80059b2:	4803      	ldr	r0, [pc, #12]	; (80059c0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80059b4:	f002 fa46 	bl	8007e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2000024c 	.word	0x2000024c
 80059c0:	20000294 	.word	0x20000294

080059c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80059c8:	4802      	ldr	r0, [pc, #8]	; (80059d4 <TIM5_IRQHandler+0x10>)
 80059ca:	f002 fa3b 	bl	8007e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80059ce:	bf00      	nop
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000204 	.word	0x20000204

080059d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <_sbrk+0x5c>)
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <_sbrk+0x60>)
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059ec:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <_sbrk+0x64>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <_sbrk+0x64>)
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <_sbrk+0x68>)
 80059f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <_sbrk+0x64>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d207      	bcs.n	8005a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a08:	f004 fb12 	bl	800a030 <__errno>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	220c      	movs	r2, #12
 8005a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e009      	b.n	8005a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <_sbrk+0x64>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <_sbrk+0x64>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <_sbrk+0x64>)
 8005a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20020000 	.word	0x20020000
 8005a38:	00000400 	.word	0x00000400
 8005a3c:	20001a60 	.word	0x20001a60
 8005a40:	20001bb0 	.word	0x20001bb0

08005a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <SystemInit+0x20>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <SystemInit+0x20>)
 8005a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a6c:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a6e:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a70:	4a0e      	ldr	r2, [pc, #56]	; (8005aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a74:	e002      	b.n	8005a7c <LoopCopyDataInit>

08005a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7a:	3304      	adds	r3, #4

08005a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a80:	d3f9      	bcc.n	8005a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a82:	4a0b      	ldr	r2, [pc, #44]	; (8005ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a84:	4c0b      	ldr	r4, [pc, #44]	; (8005ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a88:	e001      	b.n	8005a8e <LoopFillZerobss>

08005a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a8c:	3204      	adds	r2, #4

08005a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a90:	d3fb      	bcc.n	8005a8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a92:	f7ff ffd7 	bl	8005a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a96:	f004 fad1 	bl	800a03c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a9a:	f7fb fc2d 	bl	80012f8 <main>
  bx  lr    
 8005a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005aac:	0800a5ec 	.word	0x0800a5ec
  ldr r2, =_sbss
 8005ab0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005ab4:	20001bb0 	.word	0x20001bb0

08005ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ab8:	e7fe      	b.n	8005ab8 <ADC_IRQHandler>
	...

08005abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_Init+0x40>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_Init+0x40>)
 8005ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_Init+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <HAL_Init+0x40>)
 8005ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_Init+0x40>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a07      	ldr	r2, [pc, #28]	; (8005afc <HAL_Init+0x40>)
 8005ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ae4:	2003      	movs	r0, #3
 8005ae6:	f000 f94f 	bl	8005d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005aea:	200f      	movs	r0, #15
 8005aec:	f000 f808 	bl	8005b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005af0:	f7ff fc3c 	bl	800536c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40023c00 	.word	0x40023c00

08005b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <HAL_InitTick+0x54>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_InitTick+0x58>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f975 	bl	8005e0e <HAL_SYSTICK_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00e      	b.n	8005b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d80a      	bhi.n	8005b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b34:	2200      	movs	r2, #0
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	f000 f92f 	bl	8005d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b40:	4a06      	ldr	r2, [pc, #24]	; (8005b5c <HAL_InitTick+0x5c>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e000      	b.n	8005b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000030 	.word	0x20000030
 8005b58:	20000038 	.word	0x20000038
 8005b5c:	20000034 	.word	0x20000034

08005b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_IncTick+0x20>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_IncTick+0x24>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <HAL_IncTick+0x24>)
 8005b72:	6013      	str	r3, [r2, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000038 	.word	0x20000038
 8005b84:	20001a64 	.word	0x20001a64

08005b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_GetTick+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20001a64 	.word	0x20001a64

08005ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bd2:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <__NVIC_SetPriorityGrouping+0x44>)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	60d3      	str	r3, [r2, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <__NVIC_GetPriorityGrouping+0x18>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 0307 	and.w	r3, r3, #7
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	e000ed00 	.word	0xe000ed00

08005c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	db0b      	blt.n	8005c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	f003 021f 	and.w	r2, r3, #31
 8005c1c:	4907      	ldr	r1, [pc, #28]	; (8005c3c <__NVIC_EnableIRQ+0x38>)
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	2001      	movs	r0, #1
 8005c26:	fa00 f202 	lsl.w	r2, r0, r2
 8005c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e100 	.word	0xe000e100

08005c40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db12      	blt.n	8005c78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f003 021f 	and.w	r2, r3, #31
 8005c58:	490a      	ldr	r1, [pc, #40]	; (8005c84 <__NVIC_DisableIRQ+0x44>)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2001      	movs	r0, #1
 8005c62:	fa00 f202 	lsl.w	r2, r0, r2
 8005c66:	3320      	adds	r3, #32
 8005c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005c6c:	f3bf 8f4f 	dsb	sy
}
 8005c70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c72:	f3bf 8f6f 	isb	sy
}
 8005c76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	e000e100 	.word	0xe000e100

08005c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	db0a      	blt.n	8005cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	490c      	ldr	r1, [pc, #48]	; (8005cd4 <__NVIC_SetPriority+0x4c>)
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	0112      	lsls	r2, r2, #4
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	440b      	add	r3, r1
 8005cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cb0:	e00a      	b.n	8005cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	4908      	ldr	r1, [pc, #32]	; (8005cd8 <__NVIC_SetPriority+0x50>)
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	3b04      	subs	r3, #4
 8005cc0:	0112      	lsls	r2, r2, #4
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	761a      	strb	r2, [r3, #24]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	e000e100 	.word	0xe000e100
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f1c3 0307 	rsb	r3, r3, #7
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	bf28      	it	cs
 8005cfa:	2304      	movcs	r3, #4
 8005cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3304      	adds	r3, #4
 8005d02:	2b06      	cmp	r3, #6
 8005d04:	d902      	bls.n	8005d0c <NVIC_EncodePriority+0x30>
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	3b03      	subs	r3, #3
 8005d0a:	e000      	b.n	8005d0e <NVIC_EncodePriority+0x32>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d10:	f04f 32ff 	mov.w	r2, #4294967295
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	43da      	mvns	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	401a      	ands	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d24:	f04f 31ff 	mov.w	r1, #4294967295
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2e:	43d9      	mvns	r1, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d34:	4313      	orrs	r3, r2
         );
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3724      	adds	r7, #36	; 0x24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d54:	d301      	bcc.n	8005d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d56:	2301      	movs	r3, #1
 8005d58:	e00f      	b.n	8005d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <SysTick_Config+0x40>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d62:	210f      	movs	r1, #15
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	f7ff ff8e 	bl	8005c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <SysTick_Config+0x40>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <SysTick_Config+0x40>)
 8005d74:	2207      	movs	r2, #7
 8005d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	e000e010 	.word	0xe000e010

08005d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff05 	bl	8005ba0 <__NVIC_SetPriorityGrouping>
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	4603      	mov	r3, r0
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005db0:	f7ff ff1a 	bl	8005be8 <__NVIC_GetPriorityGrouping>
 8005db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	6978      	ldr	r0, [r7, #20]
 8005dbc:	f7ff ff8e 	bl	8005cdc <NVIC_EncodePriority>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ff5d 	bl	8005c88 <__NVIC_SetPriority>
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	4603      	mov	r3, r0
 8005dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff0d 	bl	8005c04 <__NVIC_EnableIRQ>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff1d 	bl	8005c40 <__NVIC_DisableIRQ>
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ff94 	bl	8005d44 <SysTick_Config>
 8005e1c:	4603      	mov	r3, r0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7ff fea8 	bl	8005b88 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e099      	b.n	8005f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e64:	e00f      	b.n	8005e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e66:	f7ff fe8f 	bl	8005b88 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d908      	bls.n	8005e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e078      	b.n	8005f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e8      	bne.n	8005e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4b38      	ldr	r3, [pc, #224]	; (8005f80 <HAL_DMA_Init+0x158>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d107      	bne.n	8005ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d117      	bne.n	8005f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fb5f 	bl	80065f0 <DMA_CheckFifoParam>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2240      	movs	r2, #64	; 0x40
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f46:	2301      	movs	r3, #1
 8005f48:	e016      	b.n	8005f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb16 	bl	8006584 <DMA_CalcBaseAndBitshift>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	223f      	movs	r2, #63	; 0x3f
 8005f62:	409a      	lsls	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	f010803f 	.word	0xf010803f

08005f84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e050      	b.n	8006038 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e048      	b.n	8006038 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2221      	movs	r2, #33	; 0x21
 8005fe4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 facc 	bl	8006584 <DMA_CalcBaseAndBitshift>
 8005fec:	4603      	mov	r3, r0
 8005fee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	223f      	movs	r2, #63	; 0x3f
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_DMA_Start_IT+0x26>
 8006062:	2302      	movs	r3, #2
 8006064:	e040      	b.n	80060e8 <HAL_DMA_Start_IT+0xa8>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d12f      	bne.n	80060da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fa4a 	bl	8006528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006098:	223f      	movs	r2, #63	; 0x3f
 800609a:	409a      	lsls	r2, r3
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0216 	orr.w	r2, r2, #22
 80060ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e005      	b.n	80060e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
 80060e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060fe:	f7ff fd43 	bl	8005b88 <HAL_GetTick>
 8006102:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d008      	beq.n	8006122 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e052      	b.n	80061c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0216 	bic.w	r2, r2, #22
 8006130:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006140:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_DMA_Abort+0x62>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0208 	bic.w	r2, r2, #8
 8006160:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006172:	e013      	b.n	800619c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006174:	f7ff fd08 	bl	8005b88 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b05      	cmp	r3, #5
 8006180:	d90c      	bls.n	800619c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2203      	movs	r2, #3
 800618c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e015      	b.n	80061c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e4      	bne.n	8006174 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	223f      	movs	r2, #63	; 0x3f
 80061b0:	409a      	lsls	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d004      	beq.n	80061ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2280      	movs	r2, #128	; 0x80
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e00c      	b.n	8006208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2205      	movs	r2, #5
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006220:	4b8e      	ldr	r3, [pc, #568]	; (800645c <HAL_DMA_IRQHandler+0x248>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a8e      	ldr	r2, [pc, #568]	; (8006460 <HAL_DMA_IRQHandler+0x24c>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	0a9b      	lsrs	r3, r3, #10
 800622c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623e:	2208      	movs	r2, #8
 8006240:	409a      	lsls	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01a      	beq.n	8006280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0204 	bic.w	r2, r2, #4
 8006266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626c:	2208      	movs	r2, #8
 800626e:	409a      	lsls	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	f043 0201 	orr.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006284:	2201      	movs	r2, #1
 8006286:	409a      	lsls	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a2:	2201      	movs	r2, #1
 80062a4:	409a      	lsls	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	f043 0202 	orr.w	r2, r3, #2
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	2204      	movs	r2, #4
 80062bc:	409a      	lsls	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d012      	beq.n	80062ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	2204      	movs	r2, #4
 80062da:	409a      	lsls	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	f043 0204 	orr.w	r2, r3, #4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f0:	2210      	movs	r2, #16
 80062f2:	409a      	lsls	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d043      	beq.n	8006384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03c      	beq.n	8006384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	2210      	movs	r2, #16
 8006310:	409a      	lsls	r2, r3
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d018      	beq.n	8006356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d108      	bne.n	8006344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d024      	beq.n	8006384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
 8006342:	e01f      	b.n	8006384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
 8006354:	e016      	b.n	8006384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0208 	bic.w	r2, r2, #8
 8006372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	2220      	movs	r2, #32
 800638a:	409a      	lsls	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 808f 	beq.w	80064b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8087 	beq.w	80064b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063aa:	2220      	movs	r2, #32
 80063ac:	409a      	lsls	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	d136      	bne.n	800642c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0216 	bic.w	r2, r2, #22
 80063cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <HAL_DMA_IRQHandler+0x1da>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0208 	bic.w	r2, r2, #8
 80063fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006402:	223f      	movs	r2, #63	; 0x3f
 8006404:	409a      	lsls	r2, r3
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d07e      	beq.n	8006520 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	4798      	blx	r3
        }
        return;
 800642a:	e079      	b.n	8006520 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01d      	beq.n	8006476 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10d      	bne.n	8006464 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	2b00      	cmp	r3, #0
 800644e:	d031      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
 8006458:	e02c      	b.n	80064b4 <HAL_DMA_IRQHandler+0x2a0>
 800645a:	bf00      	nop
 800645c:	20000030 	.word	0x20000030
 8006460:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d023      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
 8006474:	e01e      	b.n	80064b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10f      	bne.n	80064a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0210 	bic.w	r2, r2, #16
 8006492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d032      	beq.n	8006522 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d022      	beq.n	800650e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2205      	movs	r2, #5
 80064cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d307      	bcc.n	80064fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f2      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x2cc>
 80064fa:	e000      	b.n	80064fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80064fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	e000      	b.n	8006522 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006520:	bf00      	nop
    }
  }
}
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d108      	bne.n	8006568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006566:	e007      	b.n	8006578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	60da      	str	r2, [r3, #12]
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	3b10      	subs	r3, #16
 8006594:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <DMA_CalcBaseAndBitshift+0x64>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800659e:	4a13      	ldr	r2, [pc, #76]	; (80065ec <DMA_CalcBaseAndBitshift+0x68>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d909      	bls.n	80065c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	1d1a      	adds	r2, r3, #4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	659a      	str	r2, [r3, #88]	; 0x58
 80065c4:	e007      	b.n	80065d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	aaaaaaab 	.word	0xaaaaaaab
 80065ec:	0800a5d0 	.word	0x0800a5d0

080065f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11f      	bne.n	800664a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d856      	bhi.n	80066be <DMA_CheckFifoParam+0xce>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <DMA_CheckFifoParam+0x28>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006629 	.word	0x08006629
 800661c:	0800663b 	.word	0x0800663b
 8006620:	08006629 	.word	0x08006629
 8006624:	080066bf 	.word	0x080066bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d046      	beq.n	80066c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006638:	e043      	b.n	80066c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006642:	d140      	bne.n	80066c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006648:	e03d      	b.n	80066c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006652:	d121      	bne.n	8006698 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d837      	bhi.n	80066ca <DMA_CheckFifoParam+0xda>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <DMA_CheckFifoParam+0x70>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006671 	.word	0x08006671
 8006664:	08006677 	.word	0x08006677
 8006668:	08006671 	.word	0x08006671
 800666c:	08006689 	.word	0x08006689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e030      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d025      	beq.n	80066ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006686:	e022      	b.n	80066ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006690:	d11f      	bne.n	80066d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006696:	e01c      	b.n	80066d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d903      	bls.n	80066a6 <DMA_CheckFifoParam+0xb6>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d003      	beq.n	80066ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066a4:	e018      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
      break;
 80066aa:	e015      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e00b      	b.n	80066d6 <DMA_CheckFifoParam+0xe6>
      break;
 80066be:	bf00      	nop
 80066c0:	e00a      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;
 80066c2:	bf00      	nop
 80066c4:	e008      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;
 80066c6:	bf00      	nop
 80066c8:	e006      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;
 80066ca:	bf00      	nop
 80066cc:	e004      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <DMA_CheckFifoParam+0xe8>
      break;
 80066d6:	bf00      	nop
    }
  } 
  
  return status; 
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop

080066e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	e165      	b.n	80069d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006704:	2201      	movs	r2, #1
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	429a      	cmp	r2, r3
 800671e:	f040 8154 	bne.w	80069ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d005      	beq.n	800673a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006736:	2b02      	cmp	r3, #2
 8006738:	d130      	bne.n	800679c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	2203      	movs	r2, #3
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4013      	ands	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006770:	2201      	movs	r2, #1
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 0201 	and.w	r2, r3, #1
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4313      	orrs	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d017      	beq.n	80067d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d123      	bne.n	800682c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	08da      	lsrs	r2, r3, #3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3208      	adds	r2, #8
 80067ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	220f      	movs	r2, #15
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	43db      	mvns	r3, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4013      	ands	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4313      	orrs	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	08da      	lsrs	r2, r3, #3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3208      	adds	r2, #8
 8006826:	69b9      	ldr	r1, [r7, #24]
 8006828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	2203      	movs	r2, #3
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	43db      	mvns	r3, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 0203 	and.w	r2, r3, #3
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	4313      	orrs	r3, r2
 8006858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80ae 	beq.w	80069ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	4b5d      	ldr	r3, [pc, #372]	; (80069e8 <HAL_GPIO_Init+0x300>)
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	4a5c      	ldr	r2, [pc, #368]	; (80069e8 <HAL_GPIO_Init+0x300>)
 8006878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800687c:	6453      	str	r3, [r2, #68]	; 0x44
 800687e:	4b5a      	ldr	r3, [pc, #360]	; (80069e8 <HAL_GPIO_Init+0x300>)
 8006880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800688a:	4a58      	ldr	r2, [pc, #352]	; (80069ec <HAL_GPIO_Init+0x304>)
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	3302      	adds	r3, #2
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	220f      	movs	r2, #15
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43db      	mvns	r3, r3
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4013      	ands	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a4f      	ldr	r2, [pc, #316]	; (80069f0 <HAL_GPIO_Init+0x308>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d025      	beq.n	8006902 <HAL_GPIO_Init+0x21a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a4e      	ldr	r2, [pc, #312]	; (80069f4 <HAL_GPIO_Init+0x30c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01f      	beq.n	80068fe <HAL_GPIO_Init+0x216>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a4d      	ldr	r2, [pc, #308]	; (80069f8 <HAL_GPIO_Init+0x310>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d019      	beq.n	80068fa <HAL_GPIO_Init+0x212>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a4c      	ldr	r2, [pc, #304]	; (80069fc <HAL_GPIO_Init+0x314>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_GPIO_Init+0x20e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a4b      	ldr	r2, [pc, #300]	; (8006a00 <HAL_GPIO_Init+0x318>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00d      	beq.n	80068f2 <HAL_GPIO_Init+0x20a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a4a      	ldr	r2, [pc, #296]	; (8006a04 <HAL_GPIO_Init+0x31c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <HAL_GPIO_Init+0x206>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a49      	ldr	r2, [pc, #292]	; (8006a08 <HAL_GPIO_Init+0x320>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_GPIO_Init+0x202>
 80068e6:	2306      	movs	r3, #6
 80068e8:	e00c      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068ea:	2307      	movs	r3, #7
 80068ec:	e00a      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068ee:	2305      	movs	r3, #5
 80068f0:	e008      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068f2:	2304      	movs	r3, #4
 80068f4:	e006      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068f6:	2303      	movs	r3, #3
 80068f8:	e004      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e002      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_GPIO_Init+0x21c>
 8006902:	2300      	movs	r3, #0
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	f002 0203 	and.w	r2, r2, #3
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	4093      	lsls	r3, r2
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006914:	4935      	ldr	r1, [pc, #212]	; (80069ec <HAL_GPIO_Init+0x304>)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	089b      	lsrs	r3, r3, #2
 800691a:	3302      	adds	r3, #2
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006922:	4b3a      	ldr	r3, [pc, #232]	; (8006a0c <HAL_GPIO_Init+0x324>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	43db      	mvns	r3, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4013      	ands	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006946:	4a31      	ldr	r2, [pc, #196]	; (8006a0c <HAL_GPIO_Init+0x324>)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800694c:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <HAL_GPIO_Init+0x324>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006970:	4a26      	ldr	r2, [pc, #152]	; (8006a0c <HAL_GPIO_Init+0x324>)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006976:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <HAL_GPIO_Init+0x324>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	43db      	mvns	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4013      	ands	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800699a:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <HAL_GPIO_Init+0x324>)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <HAL_GPIO_Init+0x324>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	43db      	mvns	r3, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069c4:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <HAL_GPIO_Init+0x324>)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	f67f ae96 	bls.w	8006704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3724      	adds	r7, #36	; 0x24
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40013800 	.word	0x40013800
 80069f0:	40020000 	.word	0x40020000
 80069f4:	40020400 	.word	0x40020400
 80069f8:	40020800 	.word	0x40020800
 80069fc:	40020c00 	.word	0x40020c00
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40021400 	.word	0x40021400
 8006a08:	40021800 	.word	0x40021800
 8006a0c:	40013c00 	.word	0x40013c00

08006a10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e0c7      	b.n	8006bbc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f040 80b7 	bne.w	8006bb6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006a48:	4a62      	ldr	r2, [pc, #392]	; (8006bd4 <HAL_GPIO_DeInit+0x1c4>)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	089b      	lsrs	r3, r3, #2
 8006a4e:	3302      	adds	r3, #2
 8006a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a54:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	220f      	movs	r2, #15
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a5a      	ldr	r2, [pc, #360]	; (8006bd8 <HAL_GPIO_DeInit+0x1c8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d025      	beq.n	8006abe <HAL_GPIO_DeInit+0xae>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a59      	ldr	r2, [pc, #356]	; (8006bdc <HAL_GPIO_DeInit+0x1cc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01f      	beq.n	8006aba <HAL_GPIO_DeInit+0xaa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a58      	ldr	r2, [pc, #352]	; (8006be0 <HAL_GPIO_DeInit+0x1d0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d019      	beq.n	8006ab6 <HAL_GPIO_DeInit+0xa6>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a57      	ldr	r2, [pc, #348]	; (8006be4 <HAL_GPIO_DeInit+0x1d4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_GPIO_DeInit+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a56      	ldr	r2, [pc, #344]	; (8006be8 <HAL_GPIO_DeInit+0x1d8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00d      	beq.n	8006aae <HAL_GPIO_DeInit+0x9e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a55      	ldr	r2, [pc, #340]	; (8006bec <HAL_GPIO_DeInit+0x1dc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <HAL_GPIO_DeInit+0x9a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a54      	ldr	r2, [pc, #336]	; (8006bf0 <HAL_GPIO_DeInit+0x1e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <HAL_GPIO_DeInit+0x96>
 8006aa2:	2306      	movs	r3, #6
 8006aa4:	e00c      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006aa6:	2307      	movs	r3, #7
 8006aa8:	e00a      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006aaa:	2305      	movs	r3, #5
 8006aac:	e008      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	e006      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e004      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e002      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_GPIO_DeInit+0xb0>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	f002 0203 	and.w	r2, r2, #3
 8006ac6:	0092      	lsls	r2, r2, #2
 8006ac8:	4093      	lsls	r3, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d132      	bne.n	8006b36 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ad0:	4b48      	ldr	r3, [pc, #288]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	4946      	ldr	r1, [pc, #280]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006ade:	4b45      	ldr	r3, [pc, #276]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	4943      	ldr	r1, [pc, #268]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006aec:	4b41      	ldr	r3, [pc, #260]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43db      	mvns	r3, r3
 8006af4:	493f      	ldr	r1, [pc, #252]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006afa:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	493c      	ldr	r1, [pc, #240]	; (8006bf4 <HAL_GPIO_DeInit+0x1e4>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	220f      	movs	r2, #15
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006b18:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <HAL_GPIO_DeInit+0x1c4>)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	089b      	lsrs	r3, r3, #2
 8006b1e:	3302      	adds	r3, #2
 8006b20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	43da      	mvns	r2, r3
 8006b28:	482a      	ldr	r0, [pc, #168]	; (8006bd4 <HAL_GPIO_DeInit+0x1c4>)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	089b      	lsrs	r3, r3, #2
 8006b2e:	400a      	ands	r2, r1
 8006b30:	3302      	adds	r3, #2
 8006b32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	2103      	movs	r1, #3
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	401a      	ands	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	08da      	lsrs	r2, r3, #3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3208      	adds	r2, #8
 8006b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	220f      	movs	r2, #15
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	08d2      	lsrs	r2, r2, #3
 8006b6c:	4019      	ands	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3208      	adds	r2, #8
 8006b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	2103      	movs	r1, #3
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	43db      	mvns	r3, r3
 8006b86:	401a      	ands	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	2101      	movs	r1, #1
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	2103      	movs	r1, #3
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	401a      	ands	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b0f      	cmp	r3, #15
 8006bc0:	f67f af34 	bls.w	8006a2c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40013800 	.word	0x40013800
 8006bd8:	40020000 	.word	0x40020000
 8006bdc:	40020400 	.word	0x40020400
 8006be0:	40020800 	.word	0x40020800
 8006be4:	40020c00 	.word	0x40020c00
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40021400 	.word	0x40021400
 8006bf0:	40021800 	.word	0x40021800
 8006bf4:	40013c00 	.word	0x40013c00

08006bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	887b      	ldrh	r3, [r7, #2]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c10:	2301      	movs	r3, #1
 8006c12:	73fb      	strb	r3, [r7, #15]
 8006c14:	e001      	b.n	8006c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	807b      	strh	r3, [r7, #2]
 8006c34:	4613      	mov	r3, r2
 8006c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c38:	787b      	ldrb	r3, [r7, #1]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c3e:	887a      	ldrh	r2, [r7, #2]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c44:	e003      	b.n	8006c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c46:	887b      	ldrh	r3, [r7, #2]
 8006c48:	041a      	lsls	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	619a      	str	r2, [r3, #24]
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0cc      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c70:	4b68      	ldr	r3, [pc, #416]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d90c      	bls.n	8006c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7e:	4b65      	ldr	r3, [pc, #404]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c86:	4b63      	ldr	r3, [pc, #396]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0b8      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cb0:	4b59      	ldr	r3, [pc, #356]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4a58      	ldr	r2, [pc, #352]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc8:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a52      	ldr	r2, [pc, #328]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd4:	4b50      	ldr	r3, [pc, #320]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	494d      	ldr	r1, [pc, #308]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d044      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cfa:	4b47      	ldr	r3, [pc, #284]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d119      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e07f      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d003      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d107      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d1a:	4b3f      	ldr	r3, [pc, #252]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e06f      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d2a:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e067      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d3a:	4b37      	ldr	r3, [pc, #220]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f023 0203 	bic.w	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4934      	ldr	r1, [pc, #208]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d4c:	f7fe ff1c 	bl	8005b88 <HAL_GetTick>
 8006d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d52:	e00a      	b.n	8006d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d54:	f7fe ff18 	bl	8005b88 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e04f      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6a:	4b2b      	ldr	r3, [pc, #172]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 020c 	and.w	r2, r3, #12
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d1eb      	bne.n	8006d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d7c:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d20c      	bcs.n	8006da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d8a:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <HAL_RCC_ClockConfig+0x1b8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e032      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4916      	ldr	r1, [pc, #88]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	490e      	ldr	r1, [pc, #56]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006de2:	f000 f855 	bl	8006e90 <HAL_RCC_GetSysClockFreq>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	490a      	ldr	r1, [pc, #40]	; (8006e1c <HAL_RCC_ClockConfig+0x1c0>)
 8006df4:	5ccb      	ldrb	r3, [r1, r3]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCC_ClockConfig+0x1c8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fe7c 	bl	8005b00 <HAL_InitTick>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40023c00 	.word	0x40023c00
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	0800a5b8 	.word	0x0800a5b8
 8006e20:	20000030 	.word	0x20000030
 8006e24:	20000034 	.word	0x20000034

08006e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e2c:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000030 	.word	0x20000030

08006e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e44:	f7ff fff0 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	0a9b      	lsrs	r3, r3, #10
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	4903      	ldr	r1, [pc, #12]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e56:	5ccb      	ldrb	r3, [r1, r3]
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40023800 	.word	0x40023800
 8006e64:	0800a5c8 	.word	0x0800a5c8

08006e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e6c:	f7ff ffdc 	bl	8006e28 <HAL_RCC_GetHCLKFreq>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	0b5b      	lsrs	r3, r3, #13
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	4903      	ldr	r1, [pc, #12]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e7e:	5ccb      	ldrb	r3, [r1, r3]
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0800a5c8 	.word	0x0800a5c8

08006e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e94:	b0ae      	sub	sp, #184	; 0xb8
 8006e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb6:	4bcb      	ldr	r3, [pc, #812]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	f200 8206 	bhi.w	80072d0 <HAL_RCC_GetSysClockFreq+0x440>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	080072d1 	.word	0x080072d1
 8006ed4:	080072d1 	.word	0x080072d1
 8006ed8:	080072d1 	.word	0x080072d1
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	080072d1 	.word	0x080072d1
 8006ee4:	080072d1 	.word	0x080072d1
 8006ee8:	080072d1 	.word	0x080072d1
 8006eec:	08006f11 	.word	0x08006f11
 8006ef0:	080072d1 	.word	0x080072d1
 8006ef4:	080072d1 	.word	0x080072d1
 8006ef8:	080072d1 	.word	0x080072d1
 8006efc:	08007101 	.word	0x08007101
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f00:	4bb9      	ldr	r3, [pc, #740]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006f06:	e1e7      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f08:	4bb8      	ldr	r3, [pc, #736]	; (80071ec <HAL_RCC_GetSysClockFreq+0x35c>)
 8006f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006f0e:	e1e3      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f10:	4bb4      	ldr	r3, [pc, #720]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f1c:	4bb1      	ldr	r3, [pc, #708]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d071      	beq.n	800700c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f28:	4bae      	ldr	r3, [pc, #696]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f04f 0100 	mov.w	r1, #0
 8006f5a:	0159      	lsls	r1, r3, #5
 8006f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f60:	0150      	lsls	r0, r2, #5
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4621      	mov	r1, r4
 8006f68:	1a51      	subs	r1, r2, r1
 8006f6a:	6439      	str	r1, [r7, #64]	; 0x40
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f72:	647b      	str	r3, [r7, #68]	; 0x44
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006f80:	4649      	mov	r1, r9
 8006f82:	018b      	lsls	r3, r1, #6
 8006f84:	4641      	mov	r1, r8
 8006f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	018a      	lsls	r2, r1, #6
 8006f8e:	4641      	mov	r1, r8
 8006f90:	1a51      	subs	r1, r2, r1
 8006f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f94:	4649      	mov	r1, r9
 8006f96:	eb63 0301 	sbc.w	r3, r3, r1
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006fa8:	4649      	mov	r1, r9
 8006faa:	00cb      	lsls	r3, r1, #3
 8006fac:	4641      	mov	r1, r8
 8006fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	00ca      	lsls	r2, r1, #3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	eb42 0303 	adc.w	r3, r2, r3
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fd8:	4629      	mov	r1, r5
 8006fda:	024b      	lsls	r3, r1, #9
 8006fdc:	4621      	mov	r1, r4
 8006fde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	024a      	lsls	r2, r1, #9
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ff4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ff8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006ffc:	f7f9 fd82 	bl	8000b04 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4613      	mov	r3, r2
 8007006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800700a:	e067      	b.n	80070dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800700c:	4b75      	ldr	r3, [pc, #468]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	2200      	movs	r2, #0
 8007014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007018:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800701c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007024:	67bb      	str	r3, [r7, #120]	; 0x78
 8007026:	2300      	movs	r3, #0
 8007028:	67fb      	str	r3, [r7, #124]	; 0x7c
 800702a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800702e:	4622      	mov	r2, r4
 8007030:	462b      	mov	r3, r5
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f04f 0100 	mov.w	r1, #0
 800703a:	0159      	lsls	r1, r3, #5
 800703c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007040:	0150      	lsls	r0, r2, #5
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4621      	mov	r1, r4
 8007048:	1a51      	subs	r1, r2, r1
 800704a:	62b9      	str	r1, [r7, #40]	; 0x28
 800704c:	4629      	mov	r1, r5
 800704e:	eb63 0301 	sbc.w	r3, r3, r1
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007060:	4649      	mov	r1, r9
 8007062:	018b      	lsls	r3, r1, #6
 8007064:	4641      	mov	r1, r8
 8007066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800706a:	4641      	mov	r1, r8
 800706c:	018a      	lsls	r2, r1, #6
 800706e:	4641      	mov	r1, r8
 8007070:	ebb2 0a01 	subs.w	sl, r2, r1
 8007074:	4649      	mov	r1, r9
 8007076:	eb63 0b01 	sbc.w	fp, r3, r1
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007086:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800708a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800708e:	4692      	mov	sl, r2
 8007090:	469b      	mov	fp, r3
 8007092:	4623      	mov	r3, r4
 8007094:	eb1a 0303 	adds.w	r3, sl, r3
 8007098:	623b      	str	r3, [r7, #32]
 800709a:	462b      	mov	r3, r5
 800709c:	eb4b 0303 	adc.w	r3, fp, r3
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80070ae:	4629      	mov	r1, r5
 80070b0:	028b      	lsls	r3, r1, #10
 80070b2:	4621      	mov	r1, r4
 80070b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070b8:	4621      	mov	r1, r4
 80070ba:	028a      	lsls	r2, r1, #10
 80070bc:	4610      	mov	r0, r2
 80070be:	4619      	mov	r1, r3
 80070c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070c4:	2200      	movs	r2, #0
 80070c6:	673b      	str	r3, [r7, #112]	; 0x70
 80070c8:	677a      	str	r2, [r7, #116]	; 0x74
 80070ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80070ce:	f7f9 fd19 	bl	8000b04 <__aeabi_uldivmod>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4613      	mov	r3, r2
 80070d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070dc:	4b41      	ldr	r3, [pc, #260]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	3301      	adds	r3, #1
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80070ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80070fe:	e0eb      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007100:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800710c:	4b35      	ldr	r3, [pc, #212]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d06b      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007118:	4b32      	ldr	r3, [pc, #200]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	099b      	lsrs	r3, r3, #6
 800711e:	2200      	movs	r2, #0
 8007120:	66bb      	str	r3, [r7, #104]	; 0x68
 8007122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	663b      	str	r3, [r7, #96]	; 0x60
 800712c:	2300      	movs	r3, #0
 800712e:	667b      	str	r3, [r7, #100]	; 0x64
 8007130:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007134:	4622      	mov	r2, r4
 8007136:	462b      	mov	r3, r5
 8007138:	f04f 0000 	mov.w	r0, #0
 800713c:	f04f 0100 	mov.w	r1, #0
 8007140:	0159      	lsls	r1, r3, #5
 8007142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007146:	0150      	lsls	r0, r2, #5
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4621      	mov	r1, r4
 800714e:	1a51      	subs	r1, r2, r1
 8007150:	61b9      	str	r1, [r7, #24]
 8007152:	4629      	mov	r1, r5
 8007154:	eb63 0301 	sbc.w	r3, r3, r1
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007166:	4659      	mov	r1, fp
 8007168:	018b      	lsls	r3, r1, #6
 800716a:	4651      	mov	r1, sl
 800716c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007170:	4651      	mov	r1, sl
 8007172:	018a      	lsls	r2, r1, #6
 8007174:	4651      	mov	r1, sl
 8007176:	ebb2 0801 	subs.w	r8, r2, r1
 800717a:	4659      	mov	r1, fp
 800717c:	eb63 0901 	sbc.w	r9, r3, r1
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800718c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007190:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007194:	4690      	mov	r8, r2
 8007196:	4699      	mov	r9, r3
 8007198:	4623      	mov	r3, r4
 800719a:	eb18 0303 	adds.w	r3, r8, r3
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	462b      	mov	r3, r5
 80071a2:	eb49 0303 	adc.w	r3, r9, r3
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80071b4:	4629      	mov	r1, r5
 80071b6:	024b      	lsls	r3, r1, #9
 80071b8:	4621      	mov	r1, r4
 80071ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071be:	4621      	mov	r1, r4
 80071c0:	024a      	lsls	r2, r1, #9
 80071c2:	4610      	mov	r0, r2
 80071c4:	4619      	mov	r1, r3
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ca:	2200      	movs	r2, #0
 80071cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80071d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071d4:	f7f9 fc96 	bl	8000b04 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071e2:	e065      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x420>
 80071e4:	40023800 	.word	0x40023800
 80071e8:	00f42400 	.word	0x00f42400
 80071ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f0:	4b3d      	ldr	r3, [pc, #244]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	099b      	lsrs	r3, r3, #6
 80071f6:	2200      	movs	r2, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	4611      	mov	r1, r2
 80071fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007200:	653b      	str	r3, [r7, #80]	; 0x50
 8007202:	2300      	movs	r3, #0
 8007204:	657b      	str	r3, [r7, #84]	; 0x54
 8007206:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800720a:	4642      	mov	r2, r8
 800720c:	464b      	mov	r3, r9
 800720e:	f04f 0000 	mov.w	r0, #0
 8007212:	f04f 0100 	mov.w	r1, #0
 8007216:	0159      	lsls	r1, r3, #5
 8007218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800721c:	0150      	lsls	r0, r2, #5
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4641      	mov	r1, r8
 8007224:	1a51      	subs	r1, r2, r1
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4649      	mov	r1, r9
 800722a:	eb63 0301 	sbc.w	r3, r3, r1
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800723c:	4659      	mov	r1, fp
 800723e:	018b      	lsls	r3, r1, #6
 8007240:	4651      	mov	r1, sl
 8007242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007246:	4651      	mov	r1, sl
 8007248:	018a      	lsls	r2, r1, #6
 800724a:	4651      	mov	r1, sl
 800724c:	1a54      	subs	r4, r2, r1
 800724e:	4659      	mov	r1, fp
 8007250:	eb63 0501 	sbc.w	r5, r3, r1
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	00eb      	lsls	r3, r5, #3
 800725e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007262:	00e2      	lsls	r2, r4, #3
 8007264:	4614      	mov	r4, r2
 8007266:	461d      	mov	r5, r3
 8007268:	4643      	mov	r3, r8
 800726a:	18e3      	adds	r3, r4, r3
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	464b      	mov	r3, r9
 8007270:	eb45 0303 	adc.w	r3, r5, r3
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007282:	4629      	mov	r1, r5
 8007284:	028b      	lsls	r3, r1, #10
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800728c:	4621      	mov	r1, r4
 800728e:	028a      	lsls	r2, r1, #10
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007298:	2200      	movs	r2, #0
 800729a:	64bb      	str	r3, [r7, #72]	; 0x48
 800729c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800729e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072a2:	f7f9 fc2f 	bl	8000b04 <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4613      	mov	r3, r2
 80072ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	0f1b      	lsrs	r3, r3, #28
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80072be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80072ce:	e003      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80072d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80072d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	37b8      	adds	r7, #184	; 0xb8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800
 80072ec:	00f42400 	.word	0x00f42400

080072f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e28d      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8083 	beq.w	8007416 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007310:	4b94      	ldr	r3, [pc, #592]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 030c 	and.w	r3, r3, #12
 8007318:	2b04      	cmp	r3, #4
 800731a:	d019      	beq.n	8007350 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800731c:	4b91      	ldr	r3, [pc, #580]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007324:	2b08      	cmp	r3, #8
 8007326:	d106      	bne.n	8007336 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007328:	4b8e      	ldr	r3, [pc, #568]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007334:	d00c      	beq.n	8007350 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007336:	4b8b      	ldr	r3, [pc, #556]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800733e:	2b0c      	cmp	r3, #12
 8007340:	d112      	bne.n	8007368 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007342:	4b88      	ldr	r3, [pc, #544]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800734a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800734e:	d10b      	bne.n	8007368 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007350:	4b84      	ldr	r3, [pc, #528]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05b      	beq.n	8007414 <HAL_RCC_OscConfig+0x124>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d157      	bne.n	8007414 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e25a      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007370:	d106      	bne.n	8007380 <HAL_RCC_OscConfig+0x90>
 8007372:	4b7c      	ldr	r3, [pc, #496]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a7b      	ldr	r2, [pc, #492]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	e01d      	b.n	80073bc <HAL_RCC_OscConfig+0xcc>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007388:	d10c      	bne.n	80073a4 <HAL_RCC_OscConfig+0xb4>
 800738a:	4b76      	ldr	r3, [pc, #472]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a75      	ldr	r2, [pc, #468]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	4b73      	ldr	r3, [pc, #460]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a72      	ldr	r2, [pc, #456]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 800739c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e00b      	b.n	80073bc <HAL_RCC_OscConfig+0xcc>
 80073a4:	4b6f      	ldr	r3, [pc, #444]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a6e      	ldr	r2, [pc, #440]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80073aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	4b6c      	ldr	r3, [pc, #432]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a6b      	ldr	r2, [pc, #428]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80073b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d013      	beq.n	80073ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fe fbe0 	bl	8005b88 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073cc:	f7fe fbdc 	bl	8005b88 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	; 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e21f      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073de:	4b61      	ldr	r3, [pc, #388]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0xdc>
 80073ea:	e014      	b.n	8007416 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fe fbcc 	bl	8005b88 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073f4:	f7fe fbc8 	bl	8005b88 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b64      	cmp	r3, #100	; 0x64
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e20b      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007406:	4b57      	ldr	r3, [pc, #348]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x104>
 8007412:	e000      	b.n	8007416 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d06f      	beq.n	8007502 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007422:	4b50      	ldr	r3, [pc, #320]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 030c 	and.w	r3, r3, #12
 800742a:	2b00      	cmp	r3, #0
 800742c:	d017      	beq.n	800745e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800742e:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007436:	2b08      	cmp	r3, #8
 8007438:	d105      	bne.n	8007446 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800743a:	4b4a      	ldr	r3, [pc, #296]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007446:	4b47      	ldr	r3, [pc, #284]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d11c      	bne.n	800748c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007452:	4b44      	ldr	r3, [pc, #272]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d116      	bne.n	800748c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745e:	4b41      	ldr	r3, [pc, #260]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_RCC_OscConfig+0x186>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e1d3      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007476:	4b3b      	ldr	r3, [pc, #236]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	4937      	ldr	r1, [pc, #220]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007486:	4313      	orrs	r3, r2
 8007488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	e03a      	b.n	8007502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d020      	beq.n	80074d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007494:	4b34      	ldr	r3, [pc, #208]	; (8007568 <HAL_RCC_OscConfig+0x278>)
 8007496:	2201      	movs	r2, #1
 8007498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7fe fb75 	bl	8005b88 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074a2:	f7fe fb71 	bl	8005b88 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e1b4      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b4:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c0:	4b28      	ldr	r3, [pc, #160]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4925      	ldr	r1, [pc, #148]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	600b      	str	r3, [r1, #0]
 80074d4:	e015      	b.n	8007502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_RCC_OscConfig+0x278>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074dc:	f7fe fb54 	bl	8005b88 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074e4:	f7fe fb50 	bl	8005b88 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e193      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f6:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f0      	bne.n	80074e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d036      	beq.n	800757c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007516:	4b15      	ldr	r3, [pc, #84]	; (800756c <HAL_RCC_OscConfig+0x27c>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751c:	f7fe fb34 	bl	8005b88 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007524:	f7fe fb30 	bl	8005b88 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e173      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007536:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <HAL_RCC_OscConfig+0x274>)
 8007538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x234>
 8007542:	e01b      	b.n	800757c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <HAL_RCC_OscConfig+0x27c>)
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754a:	f7fe fb1d 	bl	8005b88 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007550:	e00e      	b.n	8007570 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007552:	f7fe fb19 	bl	8005b88 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d907      	bls.n	8007570 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e15c      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
 8007564:	40023800 	.word	0x40023800
 8007568:	42470000 	.word	0x42470000
 800756c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007570:	4b8a      	ldr	r3, [pc, #552]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1ea      	bne.n	8007552 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8097 	beq.w	80076b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800758e:	4b83      	ldr	r3, [pc, #524]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10f      	bne.n	80075ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	60bb      	str	r3, [r7, #8]
 800759e:	4b7f      	ldr	r3, [pc, #508]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a7e      	ldr	r2, [pc, #504]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
 80075aa:	4b7c      	ldr	r3, [pc, #496]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ba:	4b79      	ldr	r3, [pc, #484]	; (80077a0 <HAL_RCC_OscConfig+0x4b0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d118      	bne.n	80075f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c6:	4b76      	ldr	r3, [pc, #472]	; (80077a0 <HAL_RCC_OscConfig+0x4b0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a75      	ldr	r2, [pc, #468]	; (80077a0 <HAL_RCC_OscConfig+0x4b0>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d2:	f7fe fad9 	bl	8005b88 <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075da:	f7fe fad5 	bl	8005b88 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e118      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ec:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <HAL_RCC_OscConfig+0x4b0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d106      	bne.n	800760e <HAL_RCC_OscConfig+0x31e>
 8007600:	4b66      	ldr	r3, [pc, #408]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	4a65      	ldr	r2, [pc, #404]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	6713      	str	r3, [r2, #112]	; 0x70
 800760c:	e01c      	b.n	8007648 <HAL_RCC_OscConfig+0x358>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b05      	cmp	r3, #5
 8007614:	d10c      	bne.n	8007630 <HAL_RCC_OscConfig+0x340>
 8007616:	4b61      	ldr	r3, [pc, #388]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a60      	ldr	r2, [pc, #384]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
 8007622:	4b5e      	ldr	r3, [pc, #376]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	4a5d      	ldr	r2, [pc, #372]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
 800762e:	e00b      	b.n	8007648 <HAL_RCC_OscConfig+0x358>
 8007630:	4b5a      	ldr	r3, [pc, #360]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4a59      	ldr	r2, [pc, #356]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	6713      	str	r3, [r2, #112]	; 0x70
 800763c:	4b57      	ldr	r3, [pc, #348]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 800763e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007640:	4a56      	ldr	r2, [pc, #344]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007642:	f023 0304 	bic.w	r3, r3, #4
 8007646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007650:	f7fe fa9a 	bl	8005b88 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007656:	e00a      	b.n	800766e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007658:	f7fe fa96 	bl	8005b88 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	f241 3288 	movw	r2, #5000	; 0x1388
 8007666:	4293      	cmp	r3, r2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e0d7      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766e:	4b4b      	ldr	r3, [pc, #300]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0ee      	beq.n	8007658 <HAL_RCC_OscConfig+0x368>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767c:	f7fe fa84 	bl	8005b88 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007682:	e00a      	b.n	800769a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007684:	f7fe fa80 	bl	8005b88 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e0c1      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1ee      	bne.n	8007684 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ac:	4b3b      	ldr	r3, [pc, #236]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	4a3a      	ldr	r2, [pc, #232]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80076b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80ad 	beq.w	800781c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076c2:	4b36      	ldr	r3, [pc, #216]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 030c 	and.w	r3, r3, #12
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d060      	beq.n	8007790 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d145      	bne.n	8007762 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d6:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <HAL_RCC_OscConfig+0x4b4>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fe fa54 	bl	8005b88 <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e4:	f7fe fa50 	bl	8005b88 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e093      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f6:	4b29      	ldr	r3, [pc, #164]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69da      	ldr	r2, [r3, #28]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	019b      	lsls	r3, r3, #6
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	3b01      	subs	r3, #1
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	071b      	lsls	r3, r3, #28
 800772e:	491b      	ldr	r1, [pc, #108]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <HAL_RCC_OscConfig+0x4b4>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773a:	f7fe fa25 	bl	8005b88 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007742:	f7fe fa21 	bl	8005b88 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e064      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007754:	4b11      	ldr	r3, [pc, #68]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x452>
 8007760:	e05c      	b.n	800781c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007762:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <HAL_RCC_OscConfig+0x4b4>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7fe fa0e 	bl	8005b88 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007770:	f7fe fa0a 	bl	8005b88 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e04d      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007782:	4b06      	ldr	r3, [pc, #24]	; (800779c <HAL_RCC_OscConfig+0x4ac>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0x480>
 800778e:	e045      	b.n	800781c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d107      	bne.n	80077a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e040      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
 800779c:	40023800 	.word	0x40023800
 80077a0:	40007000 	.word	0x40007000
 80077a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077a8:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <HAL_RCC_OscConfig+0x538>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d030      	beq.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d129      	bne.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d122      	bne.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d119      	bne.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	3b01      	subs	r3, #1
 80077f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d10f      	bne.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d107      	bne.n	8007818 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800

0800782c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e041      	b.n	80078c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fd fec4 	bl	80055e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f000 fda4 	bl	80083b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d001      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e04e      	b.n	8007982 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a23      	ldr	r2, [pc, #140]	; (8007990 <HAL_TIM_Base_Start_IT+0xc4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d022      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d01d      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <HAL_TIM_Base_Start_IT+0xc8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d018      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <HAL_TIM_Base_Start_IT+0xcc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_TIM_Base_Start_IT+0xd0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d00e      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d009      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <HAL_TIM_Base_Start_IT+0x80>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d111      	bne.n	8007970 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d010      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0201 	orr.w	r2, r2, #1
 800796c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796e:	e007      	b.n	8007980 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40010400 	.word	0x40010400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	40001800 	.word	0x40001800

080079ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e041      	b.n	8007a42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fd fda8 	bl	8005528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f000 fce4 	bl	80083b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_TIM_PWM_Start+0x24>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	e022      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x6a>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d109      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x3e>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	bf14      	ite	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	2300      	moveq	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	e015      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x6a>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d109      	bne.n	8007aa4 <HAL_TIM_PWM_Start+0x58>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	bf14      	ite	ne
 8007a9c:	2301      	movne	r3, #1
 8007a9e:	2300      	moveq	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	e008      	b.n	8007ab6 <HAL_TIM_PWM_Start+0x6a>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	bf14      	ite	ne
 8007ab0:	2301      	movne	r3, #1
 8007ab2:	2300      	moveq	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e07c      	b.n	8007bb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0x82>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007acc:	e013      	b.n	8007af6 <HAL_TIM_PWM_Start+0xaa>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0x92>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007adc:	e00b      	b.n	8007af6 <HAL_TIM_PWM_Start+0xaa>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start+0xa2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aec:	e003      	b.n	8007af6 <HAL_TIM_PWM_Start+0xaa>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2201      	movs	r2, #1
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 ff44 	bl	800898c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2d      	ldr	r2, [pc, #180]	; (8007bc0 <HAL_TIM_PWM_Start+0x174>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d004      	beq.n	8007b18 <HAL_TIM_PWM_Start+0xcc>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2c      	ldr	r2, [pc, #176]	; (8007bc4 <HAL_TIM_PWM_Start+0x178>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d101      	bne.n	8007b1c <HAL_TIM_PWM_Start+0xd0>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <HAL_TIM_PWM_Start+0xd2>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a22      	ldr	r2, [pc, #136]	; (8007bc0 <HAL_TIM_PWM_Start+0x174>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d022      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b44:	d01d      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <HAL_TIM_PWM_Start+0x17c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d018      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_TIM_PWM_Start+0x180>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <HAL_TIM_PWM_Start+0x184>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00e      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a16      	ldr	r2, [pc, #88]	; (8007bc4 <HAL_TIM_PWM_Start+0x178>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d009      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <HAL_TIM_PWM_Start+0x188>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d004      	beq.n	8007b82 <HAL_TIM_PWM_Start+0x136>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a16      	ldr	r2, [pc, #88]	; (8007bd8 <HAL_TIM_PWM_Start+0x18c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d111      	bne.n	8007ba6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b06      	cmp	r3, #6
 8007b92:	d010      	beq.n	8007bb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba4:	e007      	b.n	8007bb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	40010400 	.word	0x40010400
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40001800 	.word	0x40001800

08007bdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e097      	b.n	8007d20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fd fbd9 	bl	80053bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f000 fbc1 	bl	80083b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c7c:	f023 030c 	bic.w	r3, r3, #12
 8007c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	011a      	lsls	r2, r3, #4
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	031b      	lsls	r3, r3, #12
 8007cac:	4313      	orrs	r3, r2
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d110      	bne.n	8007d7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d102      	bne.n	8007d64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d5e:	7b7b      	ldrb	r3, [r7, #13]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d001      	beq.n	8007d68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e069      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d78:	e031      	b.n	8007dde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d110      	bne.n	8007da2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d102      	bne.n	8007d8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d86:	7b3b      	ldrb	r3, [r7, #12]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e055      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da0:	e01d      	b.n	8007dde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d108      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d105      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dae:	7b7b      	ldrb	r3, [r7, #13]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d102      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007db4:	7b3b      	ldrb	r3, [r7, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e03e      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_TIM_Encoder_Start+0xc4>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d008      	beq.n	8007dfc <HAL_TIM_Encoder_Start+0xd4>
 8007dea:	e00f      	b.n	8007e0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2201      	movs	r2, #1
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fdc9 	bl	800898c <TIM_CCxChannelCmd>
      break;
 8007dfa:	e016      	b.n	8007e2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2201      	movs	r2, #1
 8007e02:	2104      	movs	r1, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fdc1 	bl	800898c <TIM_CCxChannelCmd>
      break;
 8007e0a:	e00e      	b.n	8007e2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2201      	movs	r2, #1
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fdb9 	bl	800898c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	2104      	movs	r1, #4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fdb2 	bl	800898c <TIM_CCxChannelCmd>
      break;
 8007e28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d122      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d11b      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0202 	mvn.w	r2, #2
 8007e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa77 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa69 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa7a 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d122      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d11b      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0204 	mvn.w	r2, #4
 8007ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa4d 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007ee0:	e005      	b.n	8007eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa3f 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa50 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d122      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d11b      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0208 	mvn.w	r2, #8
 8007f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa23 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007f34:	e005      	b.n	8007f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa15 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa26 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d122      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d11b      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0210 	mvn.w	r2, #16
 8007f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2208      	movs	r2, #8
 8007f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9f9 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007f88:	e005      	b.n	8007f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9eb 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9fc 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d107      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0201 	mvn.w	r2, #1
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f8 ff48 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fdca 	bl	8008b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d10e      	bne.n	8008020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d107      	bne.n	8008020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9c1 	bl	80083a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d10e      	bne.n	800804c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b20      	cmp	r3, #32
 800803a:	d107      	bne.n	800804c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0220 	mvn.w	r2, #32
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fd94 	bl	8008b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800806e:	2302      	movs	r3, #2
 8008070:	e0ae      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b0c      	cmp	r3, #12
 800807e:	f200 809f 	bhi.w	80081c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080081c1 	.word	0x080081c1
 8008090:	080081c1 	.word	0x080081c1
 8008094:	080081c1 	.word	0x080081c1
 8008098:	080080fd 	.word	0x080080fd
 800809c:	080081c1 	.word	0x080081c1
 80080a0:	080081c1 	.word	0x080081c1
 80080a4:	080081c1 	.word	0x080081c1
 80080a8:	0800813f 	.word	0x0800813f
 80080ac:	080081c1 	.word	0x080081c1
 80080b0:	080081c1 	.word	0x080081c1
 80080b4:	080081c1 	.word	0x080081c1
 80080b8:	0800817f 	.word	0x0800817f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fa18 	bl	80084f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0208 	orr.w	r2, r2, #8
 80080d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0204 	bic.w	r2, r2, #4
 80080e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	619a      	str	r2, [r3, #24]
      break;
 80080fa:	e064      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fa68 	bl	80085d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6999      	ldr	r1, [r3, #24]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	619a      	str	r2, [r3, #24]
      break;
 800813c:	e043      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fabd 	bl	80086c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0208 	orr.w	r2, r2, #8
 8008158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0204 	bic.w	r2, r2, #4
 8008168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	61da      	str	r2, [r3, #28]
      break;
 800817c:	e023      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fb11 	bl	80087ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69da      	ldr	r2, [r3, #28]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69d9      	ldr	r1, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	021a      	lsls	r2, r3, #8
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	61da      	str	r2, [r3, #28]
      break;
 80081be:	e002      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_TIM_ConfigClockSource+0x1c>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e0b4      	b.n	800835e <HAL_TIM_ConfigClockSource+0x186>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822c:	d03e      	beq.n	80082ac <HAL_TIM_ConfigClockSource+0xd4>
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	f200 8087 	bhi.w	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	f000 8086 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x172>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d87f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b70      	cmp	r3, #112	; 0x70
 8008246:	d01a      	beq.n	800827e <HAL_TIM_ConfigClockSource+0xa6>
 8008248:	2b70      	cmp	r3, #112	; 0x70
 800824a:	d87b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b60      	cmp	r3, #96	; 0x60
 800824e:	d050      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008250:	2b60      	cmp	r3, #96	; 0x60
 8008252:	d877      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b50      	cmp	r3, #80	; 0x50
 8008256:	d03c      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008258:	2b50      	cmp	r3, #80	; 0x50
 800825a:	d873      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d058      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x13a>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	d86f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008264:	2b30      	cmp	r3, #48	; 0x30
 8008266:	d064      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008268:	2b30      	cmp	r3, #48	; 0x30
 800826a:	d86b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d060      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008270:	2b20      	cmp	r3, #32
 8008272:	d867      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d05c      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008278:	2b10      	cmp	r3, #16
 800827a:	d05a      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 800827c:	e062      	b.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6899      	ldr	r1, [r3, #8]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f000 fb5d 	bl	800894c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	609a      	str	r2, [r3, #8]
      break;
 80082aa:	e04f      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6899      	ldr	r1, [r3, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f000 fb46 	bl	800894c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ce:	609a      	str	r2, [r3, #8]
      break;
 80082d0:	e03c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 faba 	bl	8008858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2150      	movs	r1, #80	; 0x50
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fb13 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 80082f0:	e02c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	461a      	mov	r2, r3
 8008300:	f000 fad9 	bl	80088b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2160      	movs	r1, #96	; 0x60
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fb03 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 8008310:	e01c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	461a      	mov	r2, r3
 8008320:	f000 fa9a 	bl	8008858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	4618      	mov	r0, r3
 800832c:	f000 faf3 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 8008330:	e00c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f000 faea 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 8008342:	e003      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e000      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800834a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a40      	ldr	r2, [pc, #256]	; (80084cc <TIM_Base_SetConfig+0x114>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d013      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d00f      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a3d      	ldr	r2, [pc, #244]	; (80084d0 <TIM_Base_SetConfig+0x118>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00b      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a3c      	ldr	r2, [pc, #240]	; (80084d4 <TIM_Base_SetConfig+0x11c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d007      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a3b      	ldr	r2, [pc, #236]	; (80084d8 <TIM_Base_SetConfig+0x120>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a3a      	ldr	r2, [pc, #232]	; (80084dc <TIM_Base_SetConfig+0x124>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d108      	bne.n	800840a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2f      	ldr	r2, [pc, #188]	; (80084cc <TIM_Base_SetConfig+0x114>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d02b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008418:	d027      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2c      	ldr	r2, [pc, #176]	; (80084d0 <TIM_Base_SetConfig+0x118>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d023      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2b      	ldr	r2, [pc, #172]	; (80084d4 <TIM_Base_SetConfig+0x11c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01f      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <TIM_Base_SetConfig+0x120>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a29      	ldr	r2, [pc, #164]	; (80084dc <TIM_Base_SetConfig+0x124>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d017      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a28      	ldr	r2, [pc, #160]	; (80084e0 <TIM_Base_SetConfig+0x128>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a27      	ldr	r2, [pc, #156]	; (80084e4 <TIM_Base_SetConfig+0x12c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00f      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a26      	ldr	r2, [pc, #152]	; (80084e8 <TIM_Base_SetConfig+0x130>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00b      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a25      	ldr	r2, [pc, #148]	; (80084ec <TIM_Base_SetConfig+0x134>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a24      	ldr	r2, [pc, #144]	; (80084f0 <TIM_Base_SetConfig+0x138>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d003      	beq.n	800846a <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a23      	ldr	r2, [pc, #140]	; (80084f4 <TIM_Base_SetConfig+0x13c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <TIM_Base_SetConfig+0x114>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_Base_SetConfig+0xf8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <TIM_Base_SetConfig+0x124>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d103      	bne.n	80084b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	615a      	str	r2, [r3, #20]
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40010400 	.word	0x40010400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800
 80084ec:	40001800 	.word	0x40001800
 80084f0:	40001c00 	.word	0x40001c00
 80084f4:	40002000 	.word	0x40002000

080084f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f023 0201 	bic.w	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 0302 	bic.w	r3, r3, #2
 8008540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a20      	ldr	r2, [pc, #128]	; (80085d0 <TIM_OC1_SetConfig+0xd8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC1_SetConfig+0x64>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <TIM_OC1_SetConfig+0xdc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d10c      	bne.n	8008576 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0308 	bic.w	r3, r3, #8
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f023 0304 	bic.w	r3, r3, #4
 8008574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a15      	ldr	r2, [pc, #84]	; (80085d0 <TIM_OC1_SetConfig+0xd8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d003      	beq.n	8008586 <TIM_OC1_SetConfig+0x8e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a14      	ldr	r2, [pc, #80]	; (80085d4 <TIM_OC1_SetConfig+0xdc>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d111      	bne.n	80085aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800858c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	621a      	str	r2, [r3, #32]
}
 80085c4:	bf00      	nop
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40010400 	.word	0x40010400

080085d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f023 0210 	bic.w	r2, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800860e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f023 0320 	bic.w	r3, r3, #32
 8008622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a22      	ldr	r2, [pc, #136]	; (80086bc <TIM_OC2_SetConfig+0xe4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_OC2_SetConfig+0x68>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <TIM_OC2_SetConfig+0xe8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10d      	bne.n	800865c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a17      	ldr	r2, [pc, #92]	; (80086bc <TIM_OC2_SetConfig+0xe4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_OC2_SetConfig+0x94>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <TIM_OC2_SetConfig+0xe8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d113      	bne.n	8008694 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800867a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	4313      	orrs	r3, r2
 8008692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40010000 	.word	0x40010000
 80086c0:	40010400 	.word	0x40010400

080086c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800870c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a21      	ldr	r2, [pc, #132]	; (80087a4 <TIM_OC3_SetConfig+0xe0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC3_SetConfig+0x66>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a20      	ldr	r2, [pc, #128]	; (80087a8 <TIM_OC3_SetConfig+0xe4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d10d      	bne.n	8008746 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <TIM_OC3_SetConfig+0xe0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_OC3_SetConfig+0x92>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <TIM_OC3_SetConfig+0xe4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d113      	bne.n	800877e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800875c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	621a      	str	r2, [r3, #32]
}
 8008798:	bf00      	nop
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40010400 	.word	0x40010400

080087ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	031b      	lsls	r3, r3, #12
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a12      	ldr	r2, [pc, #72]	; (8008850 <TIM_OC4_SetConfig+0xa4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_OC4_SetConfig+0x68>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a11      	ldr	r2, [pc, #68]	; (8008854 <TIM_OC4_SetConfig+0xa8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d109      	bne.n	8008828 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800881a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	019b      	lsls	r3, r3, #6
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400

08008858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f023 0201 	bic.w	r2, r3, #1
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 030a 	bic.w	r3, r3, #10
 8008894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b087      	sub	sp, #28
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f023 0210 	bic.w	r2, r3, #16
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	031b      	lsls	r3, r3, #12
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	f043 0307 	orr.w	r3, r3, #7
 8008938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	609a      	str	r2, [r3, #8]
}
 8008940:	bf00      	nop
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	021a      	lsls	r2, r3, #8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	431a      	orrs	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4313      	orrs	r3, r2
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	2201      	movs	r2, #1
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1a      	ldr	r2, [r3, #32]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	43db      	mvns	r3, r3
 80089ae:	401a      	ands	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a1a      	ldr	r2, [r3, #32]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	fa01 f303 	lsl.w	r3, r1, r3
 80089c4:	431a      	orrs	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089ec:	2302      	movs	r3, #2
 80089ee:	e05a      	b.n	8008aa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a21      	ldr	r2, [pc, #132]	; (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d022      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a3c:	d01d      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a1d      	ldr	r2, [pc, #116]	; (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d018      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1b      	ldr	r2, [pc, #108]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d013      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a1a      	ldr	r2, [pc, #104]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00e      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a18      	ldr	r2, [pc, #96]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d009      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d004      	beq.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a15      	ldr	r2, [pc, #84]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d10c      	bne.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40000400 	.word	0x40000400
 8008abc:	40000800 	.word	0x40000800
 8008ac0:	40000c00 	.word	0x40000c00
 8008ac4:	40010400 	.word	0x40010400
 8008ac8:	40014000 	.word	0x40014000
 8008acc:	40001800 	.word	0x40001800

08008ad0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e03d      	b.n	8008b68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e03f      	b.n	8008c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fc fdbc 	bl	8005740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	; 0x24
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 ff71 	bl	8009ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e021      	b.n	8008c8c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c5e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fc fe25 	bl	80058b0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	; 0x30
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d165      	bne.n	8008d7a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_UART_Transmit_DMA+0x26>
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e05e      	b.n	8008d7c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d101      	bne.n	8008ccc <HAL_UART_Transmit_DMA+0x38>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e057      	b.n	8008d7c <HAL_UART_Transmit_DMA+0xe8>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2221      	movs	r2, #33	; 0x21
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	4a22      	ldr	r2, [pc, #136]	; (8008d84 <HAL_UART_Transmit_DMA+0xf0>)
 8008cfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	4a21      	ldr	r2, [pc, #132]	; (8008d88 <HAL_UART_Transmit_DMA+0xf4>)
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d08:	4a20      	ldr	r2, [pc, #128]	; (8008d8c <HAL_UART_Transmit_DMA+0xf8>)
 8008d0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d10:	2200      	movs	r2, #0
 8008d12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	6819      	ldr	r1, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3304      	adds	r3, #4
 8008d28:	461a      	mov	r2, r3
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	f7fd f988 	bl	8006040 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	617b      	str	r3, [r7, #20]
   return(result);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d62:	627a      	str	r2, [r7, #36]	; 0x24
 8008d64:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6a39      	ldr	r1, [r7, #32]
 8008d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e000      	b.n	8008d7c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008d7a:	2302      	movs	r3, #2
  }
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3730      	adds	r7, #48	; 0x30
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	08009361 	.word	0x08009361
 8008d88:	080093fb 	.word	0x080093fb
 8008d8c:	08009573 	.word	0x08009573

08008d90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d11d      	bne.n	8008de6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_UART_Receive_DMA+0x26>
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e016      	b.n	8008de8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UART_Receive_DMA+0x38>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e00f      	b.n	8008de8 <HAL_UART_Receive_DMA+0x58>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fc13 	bl	8009608 <UART_Start_Receive_DMA>
 8008de2:	4603      	mov	r3, r0
 8008de4:	e000      	b.n	8008de8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b0ba      	sub	sp, #232	; 0xe8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10f      	bne.n	8008e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_UART_IRQHandler+0x66>
 8008e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fd7f 	bl	8009952 <UART_Receive_IT>
      return;
 8008e54:	e256      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80de 	beq.w	800901c <HAL_UART_IRQHandler+0x22c>
 8008e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80d1 	beq.w	800901c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <HAL_UART_IRQHandler+0xae>
 8008e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f043 0201 	orr.w	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xd2>
 8008eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f043 0202 	orr.w	r2, r3, #2
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
 8008ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	f043 0204 	orr.w	r2, r3, #4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
 8008ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f043 0208 	orr.w	r2, r3, #8
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 81ed 	beq.w	80092fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <HAL_UART_IRQHandler+0x14e>
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fd0a 	bl	8009952 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2301      	moveq	r3, #1
 8008f4e:	2300      	movne	r3, #0
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d103      	bne.n	8008f6a <HAL_UART_IRQHandler+0x17a>
 8008f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d04f      	beq.n	800900a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fc12 	bl	8009794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d141      	bne.n	8009002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008faa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1d9      	bne.n	8008f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d013      	beq.n	8008ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	4a7d      	ldr	r2, [pc, #500]	; (80091cc <HAL_UART_IRQHandler+0x3dc>)
 8008fd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd f8f6 	bl	80061d0 <HAL_DMA_Abort_IT>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d016      	beq.n	8009018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e00e      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7fa fc0e 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009000:	e00a      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7fa fc0a 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009008:	e006      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fa fc06 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009016:	e170      	b.n	80092fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	bf00      	nop
    return;
 800901a:	e16e      	b.n	80092fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	2b01      	cmp	r3, #1
 8009022:	f040 814a 	bne.w	80092ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8143 	beq.w	80092ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 813c 	beq.w	80092ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009042:	2300      	movs	r3, #0
 8009044:	60bb      	str	r3, [r7, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60bb      	str	r3, [r7, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	f040 80b4 	bne.w	80091d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8140 	beq.w	80092fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009086:	429a      	cmp	r2, r3
 8009088:	f080 8139 	bcs.w	80092fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009092:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800909e:	f000 8088 	beq.w	80091b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	330c      	adds	r3, #12
 80090a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1d9      	bne.n	80090a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800911a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e1      	bne.n	80090ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3314      	adds	r3, #20
 8009130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800913a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800913c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3314      	adds	r3, #20
 800914a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800914e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800915c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e3      	bne.n	800912a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009182:	f023 0310 	bic.w	r3, r3, #16
 8009186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	330c      	adds	r3, #12
 8009190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009194:	65ba      	str	r2, [r7, #88]	; 0x58
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800919a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e3      	bne.n	8009170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fc ff9f 	bl	80060f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8c0 	bl	8009348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091c8:	e099      	b.n	80092fe <HAL_UART_IRQHandler+0x50e>
 80091ca:	bf00      	nop
 80091cc:	0800985b 	.word	0x0800985b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 808b 	beq.w	8009302 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 8086 	beq.w	8009302 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	330c      	adds	r3, #12
 80091fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800920c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	330c      	adds	r3, #12
 8009216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800921a:	647a      	str	r2, [r7, #68]	; 0x44
 800921c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e3      	bne.n	80091f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3314      	adds	r3, #20
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	623b      	str	r3, [r7, #32]
   return(result);
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009252:	633a      	str	r2, [r7, #48]	; 0x30
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e3      	bne.n	800922e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	330c      	adds	r3, #12
 800927a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60fb      	str	r3, [r7, #12]
   return(result);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0310 	bic.w	r3, r3, #16
 800928a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330c      	adds	r3, #12
 8009294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009298:	61fa      	str	r2, [r7, #28]
 800929a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	69b9      	ldr	r1, [r7, #24]
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	617b      	str	r3, [r7, #20]
   return(result);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e3      	bne.n	8009274 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f848 	bl	8009348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b8:	e023      	b.n	8009302 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d009      	beq.n	80092da <HAL_UART_IRQHandler+0x4ea>
 80092c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fad5 	bl	8009882 <UART_Transmit_IT>
    return;
 80092d8:	e014      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <HAL_UART_IRQHandler+0x514>
 80092e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fb15 	bl	8009922 <UART_EndTransmit_IT>
    return;
 80092f8:	e004      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
    return;
 80092fa:	bf00      	nop
 80092fc:	e002      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
      return;
 80092fe:	bf00      	nop
 8009300:	e000      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
      return;
 8009302:	bf00      	nop
  }
}
 8009304:	37e8      	adds	r7, #232	; 0xe8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b090      	sub	sp, #64	; 0x40
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009378:	2b00      	cmp	r3, #0
 800937a:	d137      	bne.n	80093ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800937c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937e:	2200      	movs	r2, #0
 8009380:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3314      	adds	r3, #20
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	623b      	str	r3, [r7, #32]
   return(result);
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009398:	63bb      	str	r3, [r7, #56]	; 0x38
 800939a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3314      	adds	r3, #20
 80093a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a2:	633a      	str	r2, [r7, #48]	; 0x30
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e5      	bne.n	8009382 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	330c      	adds	r3, #12
 80093bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d6:	61fa      	str	r2, [r7, #28]
 80093d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	69b9      	ldr	r1, [r7, #24]
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	617b      	str	r3, [r7, #20]
   return(result);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e5      	bne.n	80093b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093ea:	e002      	b.n	80093f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093ee:	f7fa fa31 	bl	8003854 <HAL_UART_TxCpltCallback>
}
 80093f2:	bf00      	nop
 80093f4:	3740      	adds	r7, #64	; 0x40
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009406:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff ff7f 	bl	800930c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b09c      	sub	sp, #112	; 0x70
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d172      	bne.n	8009518 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009434:	2200      	movs	r2, #0
 8009436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800944e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	330c      	adds	r3, #12
 8009456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009458:	65ba      	str	r2, [r7, #88]	; 0x58
 800945a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800945e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e5      	bne.n	8009438 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3314      	adds	r3, #20
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800947c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947e:	f023 0301 	bic.w	r3, r3, #1
 8009482:	667b      	str	r3, [r7, #100]	; 0x64
 8009484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3314      	adds	r3, #20
 800948a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800948c:	647a      	str	r2, [r7, #68]	; 0x44
 800948e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e5      	bne.n	800946c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3314      	adds	r3, #20
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	623b      	str	r3, [r7, #32]
   return(result);
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094b6:	663b      	str	r3, [r7, #96]	; 0x60
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3314      	adds	r3, #20
 80094be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094c0:	633a      	str	r2, [r7, #48]	; 0x30
 80094c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e5      	bne.n	80094a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d119      	bne.n	8009518 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	330c      	adds	r3, #12
 80094ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0310 	bic.w	r3, r3, #16
 80094fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009504:	61fa      	str	r2, [r7, #28]
 8009506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	617b      	str	r3, [r7, #20]
   return(result);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e5      	bne.n	80094e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951c:	2b01      	cmp	r3, #1
 800951e:	d106      	bne.n	800952e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009522:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009524:	4619      	mov	r1, r3
 8009526:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009528:	f7ff ff0e 	bl	8009348 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800952c:	e002      	b.n	8009534 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800952e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009530:	f7ff fef6 	bl	8009320 <HAL_UART_RxCpltCallback>
}
 8009534:	bf00      	nop
 8009536:	3770      	adds	r7, #112	; 0x70
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	2b01      	cmp	r3, #1
 8009550:	d108      	bne.n	8009564 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	b29b      	uxth	r3, r3
 800955a:	4619      	mov	r1, r3
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff fef3 	bl	8009348 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009562:	e002      	b.n	800956a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fee5 	bl	8009334 <HAL_UART_RxHalfCpltCallback>
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	2b80      	cmp	r3, #128	; 0x80
 8009590:	bf0c      	ite	eq
 8009592:	2301      	moveq	r3, #1
 8009594:	2300      	movne	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b21      	cmp	r3, #33	; 0x21
 80095a4:	d108      	bne.n	80095b8 <UART_DMAError+0x46>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d005      	beq.n	80095b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80095b2:	68b8      	ldr	r0, [r7, #8]
 80095b4:	f000 f8c6 	bl	8009744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	bf0c      	ite	eq
 80095c6:	2301      	moveq	r3, #1
 80095c8:	2300      	movne	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b22      	cmp	r3, #34	; 0x22
 80095d8:	d108      	bne.n	80095ec <UART_DMAError+0x7a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80095e6:	68b8      	ldr	r0, [r7, #8]
 80095e8:	f000 f8d4 	bl	8009794 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f043 0210 	orr.w	r2, r3, #16
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f8:	68b8      	ldr	r0, [r7, #8]
 80095fa:	f7fa f90f 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b098      	sub	sp, #96	; 0x60
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	88fa      	ldrh	r2, [r7, #6]
 8009620:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2222      	movs	r2, #34	; 0x22
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009634:	4a40      	ldr	r2, [pc, #256]	; (8009738 <UART_Start_Receive_DMA+0x130>)
 8009636:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	4a3f      	ldr	r2, [pc, #252]	; (800973c <UART_Start_Receive_DMA+0x134>)
 800963e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	4a3e      	ldr	r2, [pc, #248]	; (8009740 <UART_Start_Receive_DMA+0x138>)
 8009646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	2200      	movs	r2, #0
 800964e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009650:	f107 0308 	add.w	r3, r7, #8
 8009654:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3304      	adds	r3, #4
 8009660:	4619      	mov	r1, r3
 8009662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	f7fc fcea 	bl	8006040 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	613b      	str	r3, [r7, #16]
 8009680:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d019      	beq.n	80096c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80096b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80096b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3314      	adds	r3, #20
 80096cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	657b      	str	r3, [r7, #84]	; 0x54
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e5      	bne.n	80096c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3314      	adds	r3, #20
 8009700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	617b      	str	r3, [r7, #20]
   return(result);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009710:	653b      	str	r3, [r7, #80]	; 0x50
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3314      	adds	r3, #20
 8009718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800971a:	627a      	str	r2, [r7, #36]	; 0x24
 800971c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6a39      	ldr	r1, [r7, #32]
 8009720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	61fb      	str	r3, [r7, #28]
   return(result);
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e5      	bne.n	80096fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3760      	adds	r7, #96	; 0x60
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	08009417 	.word	0x08009417
 800973c:	0800953d 	.word	0x0800953d
 8009740:	08009573 	.word	0x08009573

08009744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b089      	sub	sp, #36	; 0x24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	60bb      	str	r3, [r7, #8]
   return(result);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	69fa      	ldr	r2, [r7, #28]
 800976c:	61ba      	str	r2, [r7, #24]
 800976e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6979      	ldr	r1, [r7, #20]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	613b      	str	r3, [r7, #16]
   return(result);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009788:	bf00      	nop
 800978a:	3724      	adds	r7, #36	; 0x24
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b095      	sub	sp, #84	; 0x54
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097bc:	643a      	str	r2, [r7, #64]	; 0x40
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3314      	adds	r3, #20
 80097d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3314      	adds	r3, #20
 80097ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e5      	bne.n	80097d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	2b01      	cmp	r3, #1
 800980a:	d119      	bne.n	8009840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	60bb      	str	r3, [r7, #8]
   return(result);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	647b      	str	r3, [r7, #68]	; 0x44
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	330c      	adds	r3, #12
 800982a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800982c:	61ba      	str	r2, [r7, #24]
 800982e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6979      	ldr	r1, [r7, #20]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	613b      	str	r3, [r7, #16]
   return(result);
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e5      	bne.n	800980c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800984e:	bf00      	nop
 8009850:	3754      	adds	r7, #84	; 0x54
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7f9 ffd1 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b21      	cmp	r3, #33	; 0x21
 8009894:	d13e      	bne.n	8009914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800989e:	d114      	bne.n	80098ca <UART_Transmit_IT+0x48>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d110      	bne.n	80098ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	1c9a      	adds	r2, r3, #2
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	621a      	str	r2, [r3, #32]
 80098c8:	e008      	b.n	80098dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6211      	str	r1, [r2, #32]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4619      	mov	r1, r3
 80098ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800990e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009938:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2220      	movs	r2, #32
 800993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7f9 ff86 	bl	8003854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b08c      	sub	sp, #48	; 0x30
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b22      	cmp	r3, #34	; 0x22
 8009964:	f040 80ab 	bne.w	8009abe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009970:	d117      	bne.n	80099a2 <UART_Receive_IT+0x50>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d113      	bne.n	80099a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009982:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b29b      	uxth	r3, r3
 800998c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009990:	b29a      	uxth	r2, r3
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999a:	1c9a      	adds	r2, r3, #2
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28
 80099a0:	e026      	b.n	80099f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b4:	d007      	beq.n	80099c6 <UART_Receive_IT+0x74>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <UART_Receive_IT+0x82>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	e008      	b.n	80099e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4619      	mov	r1, r3
 80099fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d15a      	bne.n	8009aba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0220 	bic.w	r2, r2, #32
 8009a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695a      	ldr	r2, [r3, #20]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0201 	bic.w	r2, r2, #1
 8009a32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d135      	bne.n	8009ab0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	330c      	adds	r3, #12
 8009a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	e853 3f00 	ldrex	r3, [r3]
 8009a58:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f023 0310 	bic.w	r3, r3, #16
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	330c      	adds	r3, #12
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	623a      	str	r2, [r7, #32]
 8009a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	69f9      	ldr	r1, [r7, #28]
 8009a70:	6a3a      	ldr	r2, [r7, #32]
 8009a72:	e841 2300 	strex	r3, r2, [r1]
 8009a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e5      	bne.n	8009a4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b10      	cmp	r3, #16
 8009a8a:	d10a      	bne.n	8009aa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff fc4d 	bl	8009348 <HAL_UARTEx_RxEventCallback>
 8009aae:	e002      	b.n	8009ab6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fc35 	bl	8009320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e002      	b.n	8009ac0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e000      	b.n	8009ac0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009abe:	2302      	movs	r3, #2
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3730      	adds	r7, #48	; 0x30
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009acc:	b0c0      	sub	sp, #256	; 0x100
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae4:	68d9      	ldr	r1, [r3, #12]
 8009ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	ea40 0301 	orr.w	r3, r0, r1
 8009af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b20:	f021 010c 	bic.w	r1, r1, #12
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b42:	6999      	ldr	r1, [r3, #24]
 8009b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	ea40 0301 	orr.w	r3, r0, r1
 8009b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	4b8f      	ldr	r3, [pc, #572]	; (8009d94 <UART_SetConfig+0x2cc>)
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d005      	beq.n	8009b68 <UART_SetConfig+0xa0>
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4b8d      	ldr	r3, [pc, #564]	; (8009d98 <UART_SetConfig+0x2d0>)
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d104      	bne.n	8009b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b68:	f7fd f97e 	bl	8006e68 <HAL_RCC_GetPCLK2Freq>
 8009b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b70:	e003      	b.n	8009b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b72:	f7fd f965 	bl	8006e40 <HAL_RCC_GetPCLK1Freq>
 8009b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b84:	f040 810c 	bne.w	8009da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	1891      	adds	r1, r2, r2
 8009ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ba2:	415b      	adcs	r3, r3
 8009ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009baa:	4621      	mov	r1, r4
 8009bac:	eb12 0801 	adds.w	r8, r2, r1
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	eb43 0901 	adc.w	r9, r3, r1
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	f04f 0300 	mov.w	r3, #0
 8009bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bca:	4690      	mov	r8, r2
 8009bcc:	4699      	mov	r9, r3
 8009bce:	4623      	mov	r3, r4
 8009bd0:	eb18 0303 	adds.w	r3, r8, r3
 8009bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bd8:	462b      	mov	r3, r5
 8009bda:	eb49 0303 	adc.w	r3, r9, r3
 8009bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	18db      	adds	r3, r3, r3
 8009bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	eb42 0303 	adc.w	r3, r2, r3
 8009c02:	657b      	str	r3, [r7, #84]	; 0x54
 8009c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c0c:	f7f6 ff7a 	bl	8000b04 <__aeabi_uldivmod>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4b61      	ldr	r3, [pc, #388]	; (8009d9c <UART_SetConfig+0x2d4>)
 8009c16:	fba3 2302 	umull	r2, r3, r3, r2
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	011c      	lsls	r4, r3, #4
 8009c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009c30:	4642      	mov	r2, r8
 8009c32:	464b      	mov	r3, r9
 8009c34:	1891      	adds	r1, r2, r2
 8009c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c38:	415b      	adcs	r3, r3
 8009c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c40:	4641      	mov	r1, r8
 8009c42:	eb12 0a01 	adds.w	sl, r2, r1
 8009c46:	4649      	mov	r1, r9
 8009c48:	eb43 0b01 	adc.w	fp, r3, r1
 8009c4c:	f04f 0200 	mov.w	r2, #0
 8009c50:	f04f 0300 	mov.w	r3, #0
 8009c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c60:	4692      	mov	sl, r2
 8009c62:	469b      	mov	fp, r3
 8009c64:	4643      	mov	r3, r8
 8009c66:	eb1a 0303 	adds.w	r3, sl, r3
 8009c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	eb4b 0303 	adc.w	r3, fp, r3
 8009c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	18db      	adds	r3, r3, r3
 8009c90:	643b      	str	r3, [r7, #64]	; 0x40
 8009c92:	4613      	mov	r3, r2
 8009c94:	eb42 0303 	adc.w	r3, r2, r3
 8009c98:	647b      	str	r3, [r7, #68]	; 0x44
 8009c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009ca2:	f7f6 ff2f 	bl	8000b04 <__aeabi_uldivmod>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4611      	mov	r1, r2
 8009cac:	4b3b      	ldr	r3, [pc, #236]	; (8009d9c <UART_SetConfig+0x2d4>)
 8009cae:	fba3 2301 	umull	r2, r3, r3, r1
 8009cb2:	095b      	lsrs	r3, r3, #5
 8009cb4:	2264      	movs	r2, #100	; 0x64
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
 8009cba:	1acb      	subs	r3, r1, r3
 8009cbc:	00db      	lsls	r3, r3, #3
 8009cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009cc2:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <UART_SetConfig+0x2d4>)
 8009cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8009cc8:	095b      	lsrs	r3, r3, #5
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cd0:	441c      	add	r4, r3
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8009cec:	415b      	adcs	r3, r3
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	1851      	adds	r1, r2, r1
 8009cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	414b      	adcs	r3, r1
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	00cb      	lsls	r3, r1, #3
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d16:	4651      	mov	r1, sl
 8009d18:	00ca      	lsls	r2, r1, #3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4642      	mov	r2, r8
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d28:	464b      	mov	r3, r9
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d48:	460b      	mov	r3, r1
 8009d4a:	18db      	adds	r3, r3, r3
 8009d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d4e:	4613      	mov	r3, r2
 8009d50:	eb42 0303 	adc.w	r3, r2, r3
 8009d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d5e:	f7f6 fed1 	bl	8000b04 <__aeabi_uldivmod>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <UART_SetConfig+0x2d4>)
 8009d68:	fba3 1302 	umull	r1, r3, r3, r2
 8009d6c:	095b      	lsrs	r3, r3, #5
 8009d6e:	2164      	movs	r1, #100	; 0x64
 8009d70:	fb01 f303 	mul.w	r3, r1, r3
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	3332      	adds	r3, #50	; 0x32
 8009d7a:	4a08      	ldr	r2, [pc, #32]	; (8009d9c <UART_SetConfig+0x2d4>)
 8009d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	f003 0207 	and.w	r2, r3, #7
 8009d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4422      	add	r2, r4
 8009d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d90:	e106      	b.n	8009fa0 <UART_SetConfig+0x4d8>
 8009d92:	bf00      	nop
 8009d94:	40011000 	.word	0x40011000
 8009d98:	40011400 	.word	0x40011400
 8009d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	1891      	adds	r1, r2, r2
 8009db8:	6239      	str	r1, [r7, #32]
 8009dba:	415b      	adcs	r3, r3
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	1854      	adds	r4, r2, r1
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	eb43 0501 	adc.w	r5, r3, r1
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	00eb      	lsls	r3, r5, #3
 8009dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dda:	00e2      	lsls	r2, r4, #3
 8009ddc:	4614      	mov	r4, r2
 8009dde:	461d      	mov	r5, r3
 8009de0:	4643      	mov	r3, r8
 8009de2:	18e3      	adds	r3, r4, r3
 8009de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009de8:	464b      	mov	r3, r9
 8009dea:	eb45 0303 	adc.w	r3, r5, r3
 8009dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e0e:	4629      	mov	r1, r5
 8009e10:	008b      	lsls	r3, r1, #2
 8009e12:	4621      	mov	r1, r4
 8009e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e18:	4621      	mov	r1, r4
 8009e1a:	008a      	lsls	r2, r1, #2
 8009e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009e20:	f7f6 fe70 	bl	8000b04 <__aeabi_uldivmod>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4b60      	ldr	r3, [pc, #384]	; (8009fac <UART_SetConfig+0x4e4>)
 8009e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e2e:	095b      	lsrs	r3, r3, #5
 8009e30:	011c      	lsls	r4, r3, #4
 8009e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	1891      	adds	r1, r2, r2
 8009e4a:	61b9      	str	r1, [r7, #24]
 8009e4c:	415b      	adcs	r3, r3
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e54:	4641      	mov	r1, r8
 8009e56:	1851      	adds	r1, r2, r1
 8009e58:	6139      	str	r1, [r7, #16]
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	414b      	adcs	r3, r1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e6c:	4659      	mov	r1, fp
 8009e6e:	00cb      	lsls	r3, r1, #3
 8009e70:	4651      	mov	r1, sl
 8009e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e76:	4651      	mov	r1, sl
 8009e78:	00ca      	lsls	r2, r1, #3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4642      	mov	r2, r8
 8009e82:	189b      	adds	r3, r3, r2
 8009e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e88:	464b      	mov	r3, r9
 8009e8a:	460a      	mov	r2, r1
 8009e8c:	eb42 0303 	adc.w	r3, r2, r3
 8009e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009eac:	4649      	mov	r1, r9
 8009eae:	008b      	lsls	r3, r1, #2
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	008a      	lsls	r2, r1, #2
 8009eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ebe:	f7f6 fe21 	bl	8000b04 <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4b38      	ldr	r3, [pc, #224]	; (8009fac <UART_SetConfig+0x4e4>)
 8009eca:	fba3 2301 	umull	r2, r3, r3, r1
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	2264      	movs	r2, #100	; 0x64
 8009ed2:	fb02 f303 	mul.w	r3, r2, r3
 8009ed6:	1acb      	subs	r3, r1, r3
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	3332      	adds	r3, #50	; 0x32
 8009edc:	4a33      	ldr	r2, [pc, #204]	; (8009fac <UART_SetConfig+0x4e4>)
 8009ede:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee8:	441c      	add	r4, r3
 8009eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eee:	2200      	movs	r2, #0
 8009ef0:	673b      	str	r3, [r7, #112]	; 0x70
 8009ef2:	677a      	str	r2, [r7, #116]	; 0x74
 8009ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	415b      	adcs	r3, r3
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f08:	4641      	mov	r1, r8
 8009f0a:	1851      	adds	r1, r2, r1
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	4649      	mov	r1, r9
 8009f10:	414b      	adcs	r3, r1
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f20:	4659      	mov	r1, fp
 8009f22:	00cb      	lsls	r3, r1, #3
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	00ca      	lsls	r2, r1, #3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4642      	mov	r2, r8
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	460a      	mov	r2, r1
 8009f3e:	eb42 0303 	adc.w	r3, r2, r3
 8009f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f4e:	667a      	str	r2, [r7, #100]	; 0x64
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	008b      	lsls	r3, r1, #2
 8009f60:	4641      	mov	r1, r8
 8009f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f66:	4641      	mov	r1, r8
 8009f68:	008a      	lsls	r2, r1, #2
 8009f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f6e:	f7f6 fdc9 	bl	8000b04 <__aeabi_uldivmod>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <UART_SetConfig+0x4e4>)
 8009f78:	fba3 1302 	umull	r1, r3, r3, r2
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	2164      	movs	r1, #100	; 0x64
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	3332      	adds	r3, #50	; 0x32
 8009f8a:	4a08      	ldr	r2, [pc, #32]	; (8009fac <UART_SetConfig+0x4e4>)
 8009f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	f003 020f 	and.w	r2, r3, #15
 8009f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4422      	add	r2, r4
 8009f9e:	609a      	str	r2, [r3, #8]
}
 8009fa0:	bf00      	nop
 8009fa2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fac:	51eb851f 	.word	0x51eb851f

08009fb0 <realloc>:
 8009fb0:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <realloc+0xc>)
 8009fb2:	460a      	mov	r2, r1
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	f000 b802 	b.w	8009fc0 <_realloc_r>
 8009fbc:	20000088 	.word	0x20000088

08009fc0 <_realloc_r>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4614      	mov	r4, r2
 8009fc8:	460e      	mov	r6, r1
 8009fca:	b921      	cbnz	r1, 8009fd6 <_realloc_r+0x16>
 8009fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	f000 b8d3 	b.w	800a17c <_malloc_r>
 8009fd6:	b92a      	cbnz	r2, 8009fe4 <_realloc_r+0x24>
 8009fd8:	f000 f864 	bl	800a0a4 <_free_r>
 8009fdc:	4625      	mov	r5, r4
 8009fde:	4628      	mov	r0, r5
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe4:	f000 f956 	bl	800a294 <_malloc_usable_size_r>
 8009fe8:	4284      	cmp	r4, r0
 8009fea:	4607      	mov	r7, r0
 8009fec:	d802      	bhi.n	8009ff4 <_realloc_r+0x34>
 8009fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ff2:	d812      	bhi.n	800a01a <_realloc_r+0x5a>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	f000 f8c0 	bl	800a17c <_malloc_r>
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d0ed      	beq.n	8009fde <_realloc_r+0x1e>
 800a002:	42bc      	cmp	r4, r7
 800a004:	4622      	mov	r2, r4
 800a006:	4631      	mov	r1, r6
 800a008:	bf28      	it	cs
 800a00a:	463a      	movcs	r2, r7
 800a00c:	f000 f83c 	bl	800a088 <memcpy>
 800a010:	4631      	mov	r1, r6
 800a012:	4640      	mov	r0, r8
 800a014:	f000 f846 	bl	800a0a4 <_free_r>
 800a018:	e7e1      	b.n	8009fde <_realloc_r+0x1e>
 800a01a:	4635      	mov	r5, r6
 800a01c:	e7df      	b.n	8009fde <_realloc_r+0x1e>

0800a01e <memset>:
 800a01e:	4402      	add	r2, r0
 800a020:	4603      	mov	r3, r0
 800a022:	4293      	cmp	r3, r2
 800a024:	d100      	bne.n	800a028 <memset+0xa>
 800a026:	4770      	bx	lr
 800a028:	f803 1b01 	strb.w	r1, [r3], #1
 800a02c:	e7f9      	b.n	800a022 <memset+0x4>
	...

0800a030 <__errno>:
 800a030:	4b01      	ldr	r3, [pc, #4]	; (800a038 <__errno+0x8>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20000088 	.word	0x20000088

0800a03c <__libc_init_array>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4d0d      	ldr	r5, [pc, #52]	; (800a074 <__libc_init_array+0x38>)
 800a040:	4c0d      	ldr	r4, [pc, #52]	; (800a078 <__libc_init_array+0x3c>)
 800a042:	1b64      	subs	r4, r4, r5
 800a044:	10a4      	asrs	r4, r4, #2
 800a046:	2600      	movs	r6, #0
 800a048:	42a6      	cmp	r6, r4
 800a04a:	d109      	bne.n	800a060 <__libc_init_array+0x24>
 800a04c:	4d0b      	ldr	r5, [pc, #44]	; (800a07c <__libc_init_array+0x40>)
 800a04e:	4c0c      	ldr	r4, [pc, #48]	; (800a080 <__libc_init_array+0x44>)
 800a050:	f000 f938 	bl	800a2c4 <_init>
 800a054:	1b64      	subs	r4, r4, r5
 800a056:	10a4      	asrs	r4, r4, #2
 800a058:	2600      	movs	r6, #0
 800a05a:	42a6      	cmp	r6, r4
 800a05c:	d105      	bne.n	800a06a <__libc_init_array+0x2e>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f855 3b04 	ldr.w	r3, [r5], #4
 800a064:	4798      	blx	r3
 800a066:	3601      	adds	r6, #1
 800a068:	e7ee      	b.n	800a048 <__libc_init_array+0xc>
 800a06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06e:	4798      	blx	r3
 800a070:	3601      	adds	r6, #1
 800a072:	e7f2      	b.n	800a05a <__libc_init_array+0x1e>
 800a074:	0800a5e0 	.word	0x0800a5e0
 800a078:	0800a5e0 	.word	0x0800a5e0
 800a07c:	0800a5e0 	.word	0x0800a5e0
 800a080:	0800a5e8 	.word	0x0800a5e8

0800a084 <__retarget_lock_acquire_recursive>:
 800a084:	4770      	bx	lr

0800a086 <__retarget_lock_release_recursive>:
 800a086:	4770      	bx	lr

0800a088 <memcpy>:
 800a088:	440a      	add	r2, r1
 800a08a:	4291      	cmp	r1, r2
 800a08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a090:	d100      	bne.n	800a094 <memcpy+0xc>
 800a092:	4770      	bx	lr
 800a094:	b510      	push	{r4, lr}
 800a096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a09e:	4291      	cmp	r1, r2
 800a0a0:	d1f9      	bne.n	800a096 <memcpy+0xe>
 800a0a2:	bd10      	pop	{r4, pc}

0800a0a4 <_free_r>:
 800a0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	d044      	beq.n	800a134 <_free_r+0x90>
 800a0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ae:	9001      	str	r0, [sp, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0b6:	bfb8      	it	lt
 800a0b8:	18e4      	addlt	r4, r4, r3
 800a0ba:	f000 f8df 	bl	800a27c <__malloc_lock>
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <_free_r+0x94>)
 800a0c0:	9801      	ldr	r0, [sp, #4]
 800a0c2:	6813      	ldr	r3, [r2, #0]
 800a0c4:	b933      	cbnz	r3, 800a0d4 <_free_r+0x30>
 800a0c6:	6063      	str	r3, [r4, #4]
 800a0c8:	6014      	str	r4, [r2, #0]
 800a0ca:	b003      	add	sp, #12
 800a0cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0d0:	f000 b8da 	b.w	800a288 <__malloc_unlock>
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	d908      	bls.n	800a0ea <_free_r+0x46>
 800a0d8:	6825      	ldr	r5, [r4, #0]
 800a0da:	1961      	adds	r1, r4, r5
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	bf01      	itttt	eq
 800a0e0:	6819      	ldreq	r1, [r3, #0]
 800a0e2:	685b      	ldreq	r3, [r3, #4]
 800a0e4:	1949      	addeq	r1, r1, r5
 800a0e6:	6021      	streq	r1, [r4, #0]
 800a0e8:	e7ed      	b.n	800a0c6 <_free_r+0x22>
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	b10b      	cbz	r3, 800a0f4 <_free_r+0x50>
 800a0f0:	42a3      	cmp	r3, r4
 800a0f2:	d9fa      	bls.n	800a0ea <_free_r+0x46>
 800a0f4:	6811      	ldr	r1, [r2, #0]
 800a0f6:	1855      	adds	r5, r2, r1
 800a0f8:	42a5      	cmp	r5, r4
 800a0fa:	d10b      	bne.n	800a114 <_free_r+0x70>
 800a0fc:	6824      	ldr	r4, [r4, #0]
 800a0fe:	4421      	add	r1, r4
 800a100:	1854      	adds	r4, r2, r1
 800a102:	42a3      	cmp	r3, r4
 800a104:	6011      	str	r1, [r2, #0]
 800a106:	d1e0      	bne.n	800a0ca <_free_r+0x26>
 800a108:	681c      	ldr	r4, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	6053      	str	r3, [r2, #4]
 800a10e:	440c      	add	r4, r1
 800a110:	6014      	str	r4, [r2, #0]
 800a112:	e7da      	b.n	800a0ca <_free_r+0x26>
 800a114:	d902      	bls.n	800a11c <_free_r+0x78>
 800a116:	230c      	movs	r3, #12
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	e7d6      	b.n	800a0ca <_free_r+0x26>
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	1961      	adds	r1, r4, r5
 800a120:	428b      	cmp	r3, r1
 800a122:	bf04      	itt	eq
 800a124:	6819      	ldreq	r1, [r3, #0]
 800a126:	685b      	ldreq	r3, [r3, #4]
 800a128:	6063      	str	r3, [r4, #4]
 800a12a:	bf04      	itt	eq
 800a12c:	1949      	addeq	r1, r1, r5
 800a12e:	6021      	streq	r1, [r4, #0]
 800a130:	6054      	str	r4, [r2, #4]
 800a132:	e7ca      	b.n	800a0ca <_free_r+0x26>
 800a134:	b003      	add	sp, #12
 800a136:	bd30      	pop	{r4, r5, pc}
 800a138:	20001ba8 	.word	0x20001ba8

0800a13c <sbrk_aligned>:
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4e0e      	ldr	r6, [pc, #56]	; (800a178 <sbrk_aligned+0x3c>)
 800a140:	460c      	mov	r4, r1
 800a142:	6831      	ldr	r1, [r6, #0]
 800a144:	4605      	mov	r5, r0
 800a146:	b911      	cbnz	r1, 800a14e <sbrk_aligned+0x12>
 800a148:	f000 f8ac 	bl	800a2a4 <_sbrk_r>
 800a14c:	6030      	str	r0, [r6, #0]
 800a14e:	4621      	mov	r1, r4
 800a150:	4628      	mov	r0, r5
 800a152:	f000 f8a7 	bl	800a2a4 <_sbrk_r>
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	d00a      	beq.n	800a170 <sbrk_aligned+0x34>
 800a15a:	1cc4      	adds	r4, r0, #3
 800a15c:	f024 0403 	bic.w	r4, r4, #3
 800a160:	42a0      	cmp	r0, r4
 800a162:	d007      	beq.n	800a174 <sbrk_aligned+0x38>
 800a164:	1a21      	subs	r1, r4, r0
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f89c 	bl	800a2a4 <_sbrk_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	d101      	bne.n	800a174 <sbrk_aligned+0x38>
 800a170:	f04f 34ff 	mov.w	r4, #4294967295
 800a174:	4620      	mov	r0, r4
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	20001bac 	.word	0x20001bac

0800a17c <_malloc_r>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	1ccd      	adds	r5, r1, #3
 800a182:	f025 0503 	bic.w	r5, r5, #3
 800a186:	3508      	adds	r5, #8
 800a188:	2d0c      	cmp	r5, #12
 800a18a:	bf38      	it	cc
 800a18c:	250c      	movcc	r5, #12
 800a18e:	2d00      	cmp	r5, #0
 800a190:	4607      	mov	r7, r0
 800a192:	db01      	blt.n	800a198 <_malloc_r+0x1c>
 800a194:	42a9      	cmp	r1, r5
 800a196:	d905      	bls.n	800a1a4 <_malloc_r+0x28>
 800a198:	230c      	movs	r3, #12
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	2600      	movs	r6, #0
 800a19e:	4630      	mov	r0, r6
 800a1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a278 <_malloc_r+0xfc>
 800a1a8:	f000 f868 	bl	800a27c <__malloc_lock>
 800a1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b0:	461c      	mov	r4, r3
 800a1b2:	bb5c      	cbnz	r4, 800a20c <_malloc_r+0x90>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f7ff ffc0 	bl	800a13c <sbrk_aligned>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	4604      	mov	r4, r0
 800a1c0:	d155      	bne.n	800a26e <_malloc_r+0xf2>
 800a1c2:	f8d8 4000 	ldr.w	r4, [r8]
 800a1c6:	4626      	mov	r6, r4
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	d145      	bne.n	800a258 <_malloc_r+0xdc>
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d048      	beq.n	800a262 <_malloc_r+0xe6>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	eb04 0903 	add.w	r9, r4, r3
 800a1da:	f000 f863 	bl	800a2a4 <_sbrk_r>
 800a1de:	4581      	cmp	r9, r0
 800a1e0:	d13f      	bne.n	800a262 <_malloc_r+0xe6>
 800a1e2:	6821      	ldr	r1, [r4, #0]
 800a1e4:	1a6d      	subs	r5, r5, r1
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f7ff ffa7 	bl	800a13c <sbrk_aligned>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d037      	beq.n	800a262 <_malloc_r+0xe6>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	442b      	add	r3, r5
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d038      	beq.n	800a272 <_malloc_r+0xf6>
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	42a2      	cmp	r2, r4
 800a204:	d12b      	bne.n	800a25e <_malloc_r+0xe2>
 800a206:	2200      	movs	r2, #0
 800a208:	605a      	str	r2, [r3, #4]
 800a20a:	e00f      	b.n	800a22c <_malloc_r+0xb0>
 800a20c:	6822      	ldr	r2, [r4, #0]
 800a20e:	1b52      	subs	r2, r2, r5
 800a210:	d41f      	bmi.n	800a252 <_malloc_r+0xd6>
 800a212:	2a0b      	cmp	r2, #11
 800a214:	d917      	bls.n	800a246 <_malloc_r+0xca>
 800a216:	1961      	adds	r1, r4, r5
 800a218:	42a3      	cmp	r3, r4
 800a21a:	6025      	str	r5, [r4, #0]
 800a21c:	bf18      	it	ne
 800a21e:	6059      	strne	r1, [r3, #4]
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	bf08      	it	eq
 800a224:	f8c8 1000 	streq.w	r1, [r8]
 800a228:	5162      	str	r2, [r4, r5]
 800a22a:	604b      	str	r3, [r1, #4]
 800a22c:	4638      	mov	r0, r7
 800a22e:	f104 060b 	add.w	r6, r4, #11
 800a232:	f000 f829 	bl	800a288 <__malloc_unlock>
 800a236:	f026 0607 	bic.w	r6, r6, #7
 800a23a:	1d23      	adds	r3, r4, #4
 800a23c:	1af2      	subs	r2, r6, r3
 800a23e:	d0ae      	beq.n	800a19e <_malloc_r+0x22>
 800a240:	1b9b      	subs	r3, r3, r6
 800a242:	50a3      	str	r3, [r4, r2]
 800a244:	e7ab      	b.n	800a19e <_malloc_r+0x22>
 800a246:	42a3      	cmp	r3, r4
 800a248:	6862      	ldr	r2, [r4, #4]
 800a24a:	d1dd      	bne.n	800a208 <_malloc_r+0x8c>
 800a24c:	f8c8 2000 	str.w	r2, [r8]
 800a250:	e7ec      	b.n	800a22c <_malloc_r+0xb0>
 800a252:	4623      	mov	r3, r4
 800a254:	6864      	ldr	r4, [r4, #4]
 800a256:	e7ac      	b.n	800a1b2 <_malloc_r+0x36>
 800a258:	4634      	mov	r4, r6
 800a25a:	6876      	ldr	r6, [r6, #4]
 800a25c:	e7b4      	b.n	800a1c8 <_malloc_r+0x4c>
 800a25e:	4613      	mov	r3, r2
 800a260:	e7cc      	b.n	800a1fc <_malloc_r+0x80>
 800a262:	230c      	movs	r3, #12
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	4638      	mov	r0, r7
 800a268:	f000 f80e 	bl	800a288 <__malloc_unlock>
 800a26c:	e797      	b.n	800a19e <_malloc_r+0x22>
 800a26e:	6025      	str	r5, [r4, #0]
 800a270:	e7dc      	b.n	800a22c <_malloc_r+0xb0>
 800a272:	605b      	str	r3, [r3, #4]
 800a274:	deff      	udf	#255	; 0xff
 800a276:	bf00      	nop
 800a278:	20001ba8 	.word	0x20001ba8

0800a27c <__malloc_lock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	; (800a284 <__malloc_lock+0x8>)
 800a27e:	f7ff bf01 	b.w	800a084 <__retarget_lock_acquire_recursive>
 800a282:	bf00      	nop
 800a284:	20001ba4 	.word	0x20001ba4

0800a288 <__malloc_unlock>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__malloc_unlock+0x8>)
 800a28a:	f7ff befc 	b.w	800a086 <__retarget_lock_release_recursive>
 800a28e:	bf00      	nop
 800a290:	20001ba4 	.word	0x20001ba4

0800a294 <_malloc_usable_size_r>:
 800a294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a298:	1f18      	subs	r0, r3, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	bfbc      	itt	lt
 800a29e:	580b      	ldrlt	r3, [r1, r0]
 800a2a0:	18c0      	addlt	r0, r0, r3
 800a2a2:	4770      	bx	lr

0800a2a4 <_sbrk_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	; (800a2c0 <_sbrk_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7fb fb92 	bl	80059d8 <_sbrk>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_sbrk_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_sbrk_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20001ba0 	.word	0x20001ba0

0800a2c4 <_init>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr

0800a2d0 <_fini>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	bf00      	nop
 800a2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d6:	bc08      	pop	{r3}
 800a2d8:	469e      	mov	lr, r3
 800a2da:	4770      	bx	lr
